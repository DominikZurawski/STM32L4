
licznik_sygn_zewn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004670  08004670  00005670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f8  080046f8  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080046f8  080046f8  000056f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004700  08004700  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004700  08004700  00005700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004704  08004704  00005704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004708  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000068  08004770  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004770  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1ad  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1a  00000000  00000000  00015245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00017160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba1  00000000  00000000  00018048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276c9  00000000  00000000  00018be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113a8  00000000  00000000  000402b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3e95  00000000  00000000  0005165a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001454ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000462c  00000000  00000000  00145534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00149b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004658 	.word	0x08004658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004658 	.word	0x08004658

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b0a      	cmp	r3, #10
 800056c:	d102      	bne.n	8000574 <__io_putchar+0x14>
    __io_putchar('\r');
 800056e:	200d      	movs	r0, #13
 8000570:	f7ff fff6 	bl	8000560 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000574:	1d39      	adds	r1, r7, #4
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	2201      	movs	r2, #1
 800057c:	4803      	ldr	r0, [pc, #12]	@ (800058c <__io_putchar+0x2c>)
 800057e:	f002 fbe3 	bl	8002d48 <HAL_UART_Transmit>

  return 1;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200000d0 	.word	0x200000d0

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fae8 	bl	8000b6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f823 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8f7 	bl	8000790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f8c5 	bl	8000730 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005a6:	f000 f86f 	bl	8000688 <MX_TIM3_Init>
    if (captured_value != 0) {
      printf("value = %lu\n", captured_value);
      captured_value = 0;
    }*/
//wykorzystanie trybu encodera dla TIM3
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005aa:	213c      	movs	r1, #60	@ 0x3c
 80005ac:	480b      	ldr	r0, [pc, #44]	@ (80005dc <main+0x4c>)
 80005ae:	f002 f9a7 	bl	8002900 <HAL_TIM_Encoder_Start>
  int16_t prev_value = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	80fb      	strh	r3, [r7, #6]

  while (1)
  {
    int16_t value = __HAL_TIM_GET_COUNTER(&htim3);
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <main+0x4c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005bc:	80bb      	strh	r3, [r7, #4]
    if (value != prev_value) {
 80005be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d0f5      	beq.n	80005b6 <main+0x26>
      printf("value = %d\n", value);
 80005ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <main+0x50>)
 80005d2:	f003 f9d3 	bl	800397c <iprintf>
      prev_value = value;
 80005d6:	88bb      	ldrh	r3, [r7, #4]
 80005d8:	80fb      	strh	r3, [r7, #6]
  {
 80005da:	e7ec      	b.n	80005b6 <main+0x26>
 80005dc:	20000084 	.word	0x20000084
 80005e0:	08004670 	.word	0x08004670

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b096      	sub	sp, #88	@ 0x58
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2244      	movs	r2, #68	@ 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fa17 	bl	8003a26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000606:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800060a:	f000 fdc1 	bl	8001190 <HAL_PWREx_ControlVoltageScaling>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000614:	f000 f8d4 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000618:	2310      	movs	r3, #16
 800061a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	@ 0x60
 8000626:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062c:	2301      	movs	r3, #1
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000634:	2328      	movs	r3, #40	@ 0x28
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fdf7 	bl	800123c <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000654:	f000 f8b4 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2104      	movs	r1, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f9bf 	bl	80019f4 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800067c:	f000 f8a0 	bl	80007c0 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3758      	adds	r7, #88	@ 0x58
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	@ 0x30
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2224      	movs	r2, #36	@ 0x24
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 f9c5 	bl	8003a26 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a6:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <MX_TIM3_Init+0xa0>)
 80006a8:	4a20      	ldr	r2, [pc, #128]	@ (800072c <MX_TIM3_Init+0xa4>)
 80006aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <MX_TIM3_Init+0xa0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <MX_TIM3_Init+0xa0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <MX_TIM3_Init+0xa0>)
 80006ba:	2227      	movs	r2, #39	@ 0x27
 80006bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006be:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_TIM3_Init+0xa0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_TIM3_Init+0xa0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006e2:	2301      	movs	r3, #1
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <MX_TIM3_Init+0xa0>)
 80006f6:	f002 f85d 	bl	80027b4 <HAL_TIM_Encoder_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000700:	f000 f85e 	bl	80007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_TIM3_Init+0xa0>)
 8000712:	f002 fa43 	bl	8002b9c <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800071c:	f000 f850 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3730      	adds	r7, #48	@ 0x30
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000084 	.word	0x20000084
 800072c:	40000400 	.word	0x40000400

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000736:	4a15      	ldr	r2, [pc, #84]	@ (800078c <MX_USART2_UART_Init+0x5c>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000774:	f002 fa9a 	bl	8002cac <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f81f 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000d0 	.word	0x200000d0
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_GPIO_Init+0x2c>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <MX_GPIO_Init+0x2c>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_GPIO_Init+0x2c>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <Error_Handler+0x8>

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <HAL_MspInit+0x44>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <HAL_MspInit+0x44>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <HAL_MspInit+0x44>)
 80007e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <HAL_MspInit+0x44>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ee:	4a08      	ldr	r2, [pc, #32]	@ (8000810 <HAL_MspInit+0x44>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_MspInit+0x44>)
 80007f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a17      	ldr	r2, [pc, #92]	@ (8000890 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d128      	bne.n	8000888 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000836:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <HAL_TIM_Encoder_MspInit+0x80>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083a:	4a16      	ldr	r2, [pc, #88]	@ (8000894 <HAL_TIM_Encoder_MspInit+0x80>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6593      	str	r3, [r2, #88]	@ 0x58
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <HAL_TIM_Encoder_MspInit+0x80>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <HAL_TIM_Encoder_MspInit+0x80>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <HAL_TIM_Encoder_MspInit+0x80>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <HAL_TIM_Encoder_MspInit+0x80>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000866:	23c0      	movs	r3, #192	@ 0xc0
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000876:	2302      	movs	r3, #2
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000884:	f000 facc 	bl	8000e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	@ 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40000400 	.word	0x40000400
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b0ac      	sub	sp, #176	@ 0xb0
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2288      	movs	r2, #136	@ 0x88
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 f8b4 	bl	8003a26 <memset>
  if(huart->Instance==USART2)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a21      	ldr	r2, [pc, #132]	@ (8000948 <HAL_UART_MspInit+0xb0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d13b      	bne.n	8000940 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fab1 	bl	8001e3c <HAL_RCCEx_PeriphCLKConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e0:	f7ff ff6e 	bl	80007c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e4:	4b19      	ldr	r3, [pc, #100]	@ (800094c <HAL_UART_MspInit+0xb4>)
 80008e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e8:	4a18      	ldr	r2, [pc, #96]	@ (800094c <HAL_UART_MspInit+0xb4>)
 80008ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <HAL_UART_MspInit+0xb4>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b13      	ldr	r3, [pc, #76]	@ (800094c <HAL_UART_MspInit+0xb4>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000900:	4a12      	ldr	r2, [pc, #72]	@ (800094c <HAL_UART_MspInit+0xb4>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <HAL_UART_MspInit+0xb4>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000914:	230c      	movs	r3, #12
 8000916:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092c:	2307      	movs	r3, #7
 800092e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000936:	4619      	mov	r1, r3
 8000938:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093c:	f000 fa70 	bl	8000e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	37b0      	adds	r7, #176	@ 0xb0
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40004400 	.word	0x40004400
 800094c:	40021000 	.word	0x40021000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <NMI_Handler+0x4>

08000958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <MemManage_Handler+0x4>

08000968 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <UsageFault_Handler+0x4>

08000978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a6:	f000 f935 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	e00a      	b.n	80009d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009c0:	f3af 8000 	nop.w
 80009c4:	4601      	mov	r1, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	60ba      	str	r2, [r7, #8]
 80009cc:	b2ca      	uxtb	r2, r1
 80009ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	3301      	adds	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	429a      	cmp	r2, r3
 80009dc:	dbf0      	blt.n	80009c0 <_read+0x12>
  }

  return len;
 80009de:	687b      	ldr	r3, [r7, #4]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	e009      	b.n	8000a0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1c5a      	adds	r2, r3, #1
 80009fe:	60ba      	str	r2, [r7, #8]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fdac 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	697a      	ldr	r2, [r7, #20]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	dbf1      	blt.n	80009fa <_write+0x12>
  }
  return len;
 8000a16:	687b      	ldr	r3, [r7, #4]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_close>:

int _close(int file)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a48:	605a      	str	r2, [r3, #4]
  return 0;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <_isatty>:

int _isatty(int file)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a60:	2301      	movs	r3, #1
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b085      	sub	sp, #20
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a90:	4a14      	ldr	r2, [pc, #80]	@ (8000ae4 <_sbrk+0x5c>)
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <_sbrk+0x60>)
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a9c:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <_sbrk+0x64>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <_sbrk+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d207      	bcs.n	8000ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab8:	f003 f804 	bl	8003ac4 <__errno>
 8000abc:	4603      	mov	r3, r0
 8000abe:	220c      	movs	r2, #12
 8000ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac6:	e009      	b.n	8000adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ace:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a05      	ldr	r2, [pc, #20]	@ (8000aec <_sbrk+0x64>)
 8000ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20018000 	.word	0x20018000
 8000ae8:	00000400 	.word	0x00000400
 8000aec:	20000158 	.word	0x20000158
 8000af0:	200002b0 	.word	0x200002b0

08000af4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b1c:	f7ff ffea 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	@ (8000b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <LoopForever+0xe>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	@ (8000b64 <LoopForever+0x16>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f002 ffc3 	bl	8003ad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4a:	f7ff fd21 	bl	8000590 <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b5c:	08004708 	.word	0x08004708
  ldr r2, =_sbss
 8000b60:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b64:	200002ac 	.word	0x200002ac

08000b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_2_IRQHandler>

08000b6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f91f 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f80e 	bl	8000b9c <HAL_InitTick>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	e001      	b.n	8000b90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b8c:	f7ff fe1e 	bl	80007cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <HAL_InitTick+0x6c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d023      	beq.n	8000bf8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <HAL_InitTick+0x70>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <HAL_InitTick+0x6c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f91d 	bl	8000e06 <HAL_SYSTICK_Config>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10f      	bne.n	8000bf2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d809      	bhi.n	8000bec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 f8f5 	bl	8000dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <HAL_InitTick+0x74>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e007      	b.n	8000bfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	e004      	b.n	8000bfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	73fb      	strb	r3, [r7, #15]
 8000bf6:	e001      	b.n	8000bfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008
 8000c38:	2000015c 	.word	0x2000015c

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000015c 	.word	0x2000015c

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	@ (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	@ (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	@ 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	@ 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff47 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff5c 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff8e 	bl	8000d0c <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffb0 	bl	8000d74 <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	e17f      	b.n	8001130 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2101      	movs	r1, #1
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8171 	beq.w	800112a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d005      	beq.n	8000e60 <HAL_GPIO_Init+0x40>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d130      	bne.n	8000ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e96:	2201      	movs	r2, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 0201 	and.w	r2, r3, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d118      	bne.n	8000f00 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	08db      	lsrs	r3, r3, #3
 8000eea:	f003 0201 	and.w	r2, r3, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d017      	beq.n	8000f3c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d123      	bne.n	8000f90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	691a      	ldr	r2, [r3, #16]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	6939      	ldr	r1, [r7, #16]
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0203 	and.w	r2, r3, #3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80ac 	beq.w	800112a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8001150 <HAL_GPIO_Init+0x330>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd6:	4a5e      	ldr	r2, [pc, #376]	@ (8001150 <HAL_GPIO_Init+0x330>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fde:	4b5c      	ldr	r3, [pc, #368]	@ (8001150 <HAL_GPIO_Init+0x330>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fea:	4a5a      	ldr	r2, [pc, #360]	@ (8001154 <HAL_GPIO_Init+0x334>)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001014:	d025      	beq.n	8001062 <HAL_GPIO_Init+0x242>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4f      	ldr	r2, [pc, #316]	@ (8001158 <HAL_GPIO_Init+0x338>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d01f      	beq.n	800105e <HAL_GPIO_Init+0x23e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4e      	ldr	r2, [pc, #312]	@ (800115c <HAL_GPIO_Init+0x33c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d019      	beq.n	800105a <HAL_GPIO_Init+0x23a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4d      	ldr	r2, [pc, #308]	@ (8001160 <HAL_GPIO_Init+0x340>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d013      	beq.n	8001056 <HAL_GPIO_Init+0x236>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4c      	ldr	r2, [pc, #304]	@ (8001164 <HAL_GPIO_Init+0x344>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d00d      	beq.n	8001052 <HAL_GPIO_Init+0x232>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4b      	ldr	r2, [pc, #300]	@ (8001168 <HAL_GPIO_Init+0x348>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d007      	beq.n	800104e <HAL_GPIO_Init+0x22e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4a      	ldr	r2, [pc, #296]	@ (800116c <HAL_GPIO_Init+0x34c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_GPIO_Init+0x22a>
 8001046:	2306      	movs	r3, #6
 8001048:	e00c      	b.n	8001064 <HAL_GPIO_Init+0x244>
 800104a:	2307      	movs	r3, #7
 800104c:	e00a      	b.n	8001064 <HAL_GPIO_Init+0x244>
 800104e:	2305      	movs	r3, #5
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x244>
 8001052:	2304      	movs	r3, #4
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x244>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x244>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x244>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x244>
 8001062:	2300      	movs	r3, #0
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001074:	4937      	ldr	r1, [pc, #220]	@ (8001154 <HAL_GPIO_Init+0x334>)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001082:	4b3b      	ldr	r3, [pc, #236]	@ (8001170 <HAL_GPIO_Init+0x350>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a6:	4a32      	ldr	r2, [pc, #200]	@ (8001170 <HAL_GPIO_Init+0x350>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ac:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <HAL_GPIO_Init+0x350>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010d0:	4a27      	ldr	r2, [pc, #156]	@ (8001170 <HAL_GPIO_Init+0x350>)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010d6:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <HAL_GPIO_Init+0x350>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001170 <HAL_GPIO_Init+0x350>)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001100:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <HAL_GPIO_Init+0x350>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001124:	4a12      	ldr	r2, [pc, #72]	@ (8001170 <HAL_GPIO_Init+0x350>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3301      	adds	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa22 f303 	lsr.w	r3, r2, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	f47f ae78 	bne.w	8000e30 <HAL_GPIO_Init+0x10>
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	40010000 	.word	0x40010000
 8001158:	48000400 	.word	0x48000400
 800115c:	48000800 	.word	0x48000800
 8001160:	48000c00 	.word	0x48000c00
 8001164:	48001000 	.word	0x48001000
 8001168:	48001400 	.word	0x48001400
 800116c:	48001800 	.word	0x48001800
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <HAL_PWREx_GetVoltageRange+0x18>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40007000 	.word	0x40007000

08001190 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800119e:	d130      	bne.n	8001202 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a0:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011ac:	d038      	beq.n	8001220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ae:	4b20      	ldr	r3, [pc, #128]	@ (8001230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2232      	movs	r2, #50	@ 0x32
 80011c4:	fb02 f303 	mul.w	r3, r2, r3
 80011c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001238 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	0c9b      	lsrs	r3, r3, #18
 80011d0:	3301      	adds	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d4:	e002      	b.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3b01      	subs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011dc:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011e8:	d102      	bne.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f2      	bne.n	80011d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011fc:	d110      	bne.n	8001220 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e00f      	b.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800120a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800120e:	d007      	beq.n	8001220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001210:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001218:	4a05      	ldr	r2, [pc, #20]	@ (8001230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800121e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40007000 	.word	0x40007000
 8001234:	20000000 	.word	0x20000000
 8001238:	431bde83 	.word	0x431bde83

0800123c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e3ca      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800124e:	4b97      	ldr	r3, [pc, #604]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001258:	4b94      	ldr	r3, [pc, #592]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80e4 	beq.w	8001438 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <HAL_RCC_OscConfig+0x4a>
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b0c      	cmp	r3, #12
 800127a:	f040 808b 	bne.w	8001394 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2b01      	cmp	r3, #1
 8001282:	f040 8087 	bne.w	8001394 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001286:	4b89      	ldr	r3, [pc, #548]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_RCC_OscConfig+0x62>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e3a2      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a1a      	ldr	r2, [r3, #32]
 80012a2:	4b82      	ldr	r3, [pc, #520]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d004      	beq.n	80012b8 <HAL_RCC_OscConfig+0x7c>
 80012ae:	4b7f      	ldr	r3, [pc, #508]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012b6:	e005      	b.n	80012c4 <HAL_RCC_OscConfig+0x88>
 80012b8:	4b7c      	ldr	r3, [pc, #496]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80012ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d223      	bcs.n	8001310 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fd55 	bl	8001d7c <RCC_SetFlashLatencyFromMSIRange>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e383      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012dc:	4b73      	ldr	r3, [pc, #460]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a72      	ldr	r2, [pc, #456]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b70      	ldr	r3, [pc, #448]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	496d      	ldr	r1, [pc, #436]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fa:	4b6c      	ldr	r3, [pc, #432]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	4968      	ldr	r1, [pc, #416]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
 800130e:	e025      	b.n	800135c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001310:	4b66      	ldr	r3, [pc, #408]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a65      	ldr	r2, [pc, #404]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 8001316:	f043 0308 	orr.w	r3, r3, #8
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b63      	ldr	r3, [pc, #396]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4960      	ldr	r1, [pc, #384]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800132e:	4b5f      	ldr	r3, [pc, #380]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	495b      	ldr	r1, [pc, #364]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d109      	bne.n	800135c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fd15 	bl	8001d7c <RCC_SetFlashLatencyFromMSIRange>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e343      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800135c:	f000 fc4a 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	4b52      	ldr	r3, [pc, #328]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	4950      	ldr	r1, [pc, #320]	@ (80014b0 <HAL_RCC_OscConfig+0x274>)
 800136e:	5ccb      	ldrb	r3, [r1, r3]
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
 8001378:	4a4e      	ldr	r2, [pc, #312]	@ (80014b4 <HAL_RCC_OscConfig+0x278>)
 800137a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800137c:	4b4e      	ldr	r3, [pc, #312]	@ (80014b8 <HAL_RCC_OscConfig+0x27c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fc0b 	bl	8000b9c <HAL_InitTick>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d052      	beq.n	8001436 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	e327      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d032      	beq.n	8001402 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800139c:	4b43      	ldr	r3, [pc, #268]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a42      	ldr	r2, [pc, #264]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc48 	bl	8000c3c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b0:	f7ff fc44 	bl	8000c3c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e310      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013c2:	4b3a      	ldr	r3, [pc, #232]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ce:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a36      	ldr	r2, [pc, #216]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b34      	ldr	r3, [pc, #208]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4931      	ldr	r1, [pc, #196]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ec:	4b2f      	ldr	r3, [pc, #188]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	492c      	ldr	r1, [pc, #176]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
 8001400:	e01a      	b.n	8001438 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001402:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a29      	ldr	r2, [pc, #164]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800140e:	f7ff fc15 	bl	8000c3c <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001416:	f7ff fc11 	bl	8000c3c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e2dd      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001428:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0x1da>
 8001434:	e000      	b.n	8001438 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001436:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b00      	cmp	r3, #0
 8001442:	d074      	beq.n	800152e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b08      	cmp	r3, #8
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x21a>
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b0c      	cmp	r3, #12
 800144e:	d10e      	bne.n	800146e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d10b      	bne.n	800146e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d064      	beq.n	800152c <HAL_RCC_OscConfig+0x2f0>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d160      	bne.n	800152c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e2ba      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x24a>
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0b      	ldr	r2, [pc, #44]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 800147e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e026      	b.n	80014d4 <HAL_RCC_OscConfig+0x298>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800148e:	d115      	bne.n	80014bc <HAL_RCC_OscConfig+0x280>
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 8001496:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b03      	ldr	r3, [pc, #12]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a02      	ldr	r2, [pc, #8]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80014a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e014      	b.n	80014d4 <HAL_RCC_OscConfig+0x298>
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	0800467c 	.word	0x0800467c
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000004 	.word	0x20000004
 80014bc:	4ba0      	ldr	r3, [pc, #640]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a9f      	ldr	r2, [pc, #636]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a9c      	ldr	r2, [pc, #624]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff fbae 	bl	8000c3c <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fbaa 	bl	8000c3c <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	@ 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e276      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f6:	4b92      	ldr	r3, [pc, #584]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x2a8>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fb9a 	bl	8000c3c <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fb96 	bl	8000c3c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	@ 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e262      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800151e:	4b88      	ldr	r3, [pc, #544]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x2d0>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d060      	beq.n	80015fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b04      	cmp	r3, #4
 800153e:	d005      	beq.n	800154c <HAL_RCC_OscConfig+0x310>
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2b0c      	cmp	r3, #12
 8001544:	d119      	bne.n	800157a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d116      	bne.n	800157a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800154c:	4b7c      	ldr	r3, [pc, #496]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_RCC_OscConfig+0x328>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e23f      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b76      	ldr	r3, [pc, #472]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	4973      	ldr	r1, [pc, #460]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001578:	e040      	b.n	80015fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d023      	beq.n	80015ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001582:	4b6f      	ldr	r3, [pc, #444]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a6e      	ldr	r2, [pc, #440]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fb55 	bl	8000c3c <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff fb51 	bl	8000c3c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e21d      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a8:	4b65      	ldr	r3, [pc, #404]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b62      	ldr	r3, [pc, #392]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	061b      	lsls	r3, r3, #24
 80015c2:	495f      	ldr	r1, [pc, #380]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
 80015c8:	e018      	b.n	80015fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80015d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff fb31 	bl	8000c3c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fb2d 	bl	8000c3c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e1f9      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f0:	4b53      	ldr	r3, [pc, #332]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f0      	bne.n	80015de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d03c      	beq.n	8001682 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01c      	beq.n	800164a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001610:	4b4b      	ldr	r3, [pc, #300]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001612:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001616:	4a4a      	ldr	r2, [pc, #296]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fb0c 	bl	8000c3c <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff fb08 	bl	8000c3c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e1d4      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800163a:	4b41      	ldr	r3, [pc, #260]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0ef      	beq.n	8001628 <HAL_RCC_OscConfig+0x3ec>
 8001648:	e01b      	b.n	8001682 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164a:	4b3d      	ldr	r3, [pc, #244]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 800164c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001650:	4a3b      	ldr	r2, [pc, #236]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff faef 	bl	8000c3c <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff faeb 	bl	8000c3c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e1b7      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001674:	4b32      	ldr	r3, [pc, #200]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ef      	bne.n	8001662 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 80a6 	beq.w	80017dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001694:	4b2a      	ldr	r3, [pc, #168]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10d      	bne.n	80016bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a4:	4a26      	ldr	r2, [pc, #152]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ac:	4b24      	ldr	r3, [pc, #144]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b8:	2301      	movs	r3, #1
 80016ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016bc:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <HAL_RCC_OscConfig+0x508>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d118      	bne.n	80016fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <HAL_RCC_OscConfig+0x508>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <HAL_RCC_OscConfig+0x508>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d4:	f7ff fab2 	bl	8000c3c <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016dc:	f7ff faae 	bl	8000c3c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e17a      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_RCC_OscConfig+0x508>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d108      	bne.n	8001714 <HAL_RCC_OscConfig+0x4d8>
 8001702:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001708:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001712:	e029      	b.n	8001768 <HAL_RCC_OscConfig+0x52c>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b05      	cmp	r3, #5
 800171a:	d115      	bne.n	8001748 <HAL_RCC_OscConfig+0x50c>
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001722:	4a07      	ldr	r2, [pc, #28]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 800172e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001732:	4a03      	ldr	r2, [pc, #12]	@ (8001740 <HAL_RCC_OscConfig+0x504>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800173c:	e014      	b.n	8001768 <HAL_RCC_OscConfig+0x52c>
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	40007000 	.word	0x40007000
 8001748:	4b9c      	ldr	r3, [pc, #624]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174e:	4a9b      	ldr	r2, [pc, #620]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001758:	4b98      	ldr	r3, [pc, #608]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 800175a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175e:	4a97      	ldr	r2, [pc, #604]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d016      	beq.n	800179e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff fa64 	bl	8000c3c <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001776:	e00a      	b.n	800178e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001778:	f7ff fa60 	bl	8000c3c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e12a      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800178e:	4b8b      	ldr	r3, [pc, #556]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ed      	beq.n	8001778 <HAL_RCC_OscConfig+0x53c>
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179e:	f7ff fa4d 	bl	8000c3c <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff fa49 	bl	8000c3c <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e113      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017bc:	4b7f      	ldr	r3, [pc, #508]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 80017be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1ed      	bne.n	80017a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ca:	7ffb      	ldrb	r3, [r7, #31]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d0:	4b7a      	ldr	r3, [pc, #488]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d4:	4a79      	ldr	r2, [pc, #484]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 80017d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017da:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80fe 	beq.w	80019e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	f040 80d0 	bne.w	8001990 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017f0:	4b72      	ldr	r3, [pc, #456]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001800:	429a      	cmp	r2, r3
 8001802:	d130      	bne.n	8001866 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	3b01      	subs	r3, #1
 8001810:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d127      	bne.n	8001866 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001820:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d11f      	bne.n	8001866 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001830:	2a07      	cmp	r2, #7
 8001832:	bf14      	ite	ne
 8001834:	2201      	movne	r2, #1
 8001836:	2200      	moveq	r2, #0
 8001838:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800183a:	4293      	cmp	r3, r2
 800183c:	d113      	bne.n	8001866 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	3b01      	subs	r3, #1
 800184c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d109      	bne.n	8001866 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	3b01      	subs	r3, #1
 8001860:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d06e      	beq.n	8001944 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b0c      	cmp	r3, #12
 800186a:	d069      	beq.n	8001940 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800186c:	4b53      	ldr	r3, [pc, #332]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d105      	bne.n	8001884 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001878:	4b50      	ldr	r3, [pc, #320]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0ad      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001888:	4b4c      	ldr	r3, [pc, #304]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a4b      	ldr	r2, [pc, #300]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 800188e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001892:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001894:	f7ff f9d2 	bl	8000c3c <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f9ce 	bl	8000c3c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e09a      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ae:	4b43      	ldr	r3, [pc, #268]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ba:	4b40      	ldr	r3, [pc, #256]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	4b40      	ldr	r3, [pc, #256]	@ (80019c0 <HAL_RCC_OscConfig+0x784>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018ca:	3a01      	subs	r2, #1
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	4311      	orrs	r1, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018d4:	0212      	lsls	r2, r2, #8
 80018d6:	4311      	orrs	r1, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018dc:	0852      	lsrs	r2, r2, #1
 80018de:	3a01      	subs	r2, #1
 80018e0:	0552      	lsls	r2, r2, #21
 80018e2:	4311      	orrs	r1, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018e8:	0852      	lsrs	r2, r2, #1
 80018ea:	3a01      	subs	r2, #1
 80018ec:	0652      	lsls	r2, r2, #25
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018f4:	0912      	lsrs	r2, r2, #4
 80018f6:	0452      	lsls	r2, r2, #17
 80018f8:	430a      	orrs	r2, r1
 80018fa:	4930      	ldr	r1, [pc, #192]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001900:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2d      	ldr	r2, [pc, #180]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800190a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800190c:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4a2a      	ldr	r2, [pc, #168]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001916:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001918:	f7ff f990 	bl	8000c3c <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff f98c 	bl	8000c3c <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e058      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001932:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800193e:	e050      	b.n	80019e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e04f      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001944:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d148      	bne.n	80019e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a19      	ldr	r2, [pc, #100]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800195a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800195c:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4a16      	ldr	r2, [pc, #88]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001966:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001968:	f7ff f968 	bl	8000c3c <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff f964 	bl	8000c3c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e030      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x734>
 800198e:	e028      	b.n	80019e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d023      	beq.n	80019de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <HAL_RCC_OscConfig+0x780>)
 800199c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff f94b 	bl	8000c3c <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a8:	e00c      	b.n	80019c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff f947 	bl	8000c3c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d905      	bls.n	80019c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e013      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
 80019bc:	40021000 	.word	0x40021000
 80019c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_RCC_OscConfig+0x7b0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1ec      	bne.n	80019aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_RCC_OscConfig+0x7b0>)
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	4905      	ldr	r1, [pc, #20]	@ (80019ec <HAL_RCC_OscConfig+0x7b0>)
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_RCC_OscConfig+0x7b4>)
 80019d8:	4013      	ands	r3, r2
 80019da:	60cb      	str	r3, [r1, #12]
 80019dc:	e001      	b.n	80019e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000
 80019f0:	feeefffc 	.word	0xfeeefffc

080019f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0e7      	b.n	8001bd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b75      	ldr	r3, [pc, #468]	@ (8001be0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d910      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b72      	ldr	r3, [pc, #456]	@ (8001be0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 0207 	bic.w	r2, r3, #7
 8001a1e:	4970      	ldr	r1, [pc, #448]	@ (8001be0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b6e      	ldr	r3, [pc, #440]	@ (8001be0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0cf      	b.n	8001bd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d010      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4b66      	ldr	r3, [pc, #408]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d908      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4b63      	ldr	r3, [pc, #396]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4960      	ldr	r1, [pc, #384]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d04c      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d121      	bne.n	8001aca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0a6      	b.n	8001bd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a92:	4b54      	ldr	r3, [pc, #336]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d115      	bne.n	8001aca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e09a      	b.n	8001bd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e08e      	b.n	8001bd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aba:	4b4a      	ldr	r3, [pc, #296]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e086      	b.n	8001bd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aca:	4b46      	ldr	r3, [pc, #280]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f023 0203 	bic.w	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4943      	ldr	r1, [pc, #268]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001adc:	f7ff f8ae 	bl	8000c3c <HAL_GetTick>
 8001ae0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae4:	f7ff f8aa 	bl	8000c3c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e06e      	b.n	8001bd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	4b3a      	ldr	r3, [pc, #232]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 020c 	and.w	r2, r3, #12
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d1eb      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d010      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d208      	bcs.n	8001b3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	492b      	ldr	r1, [pc, #172]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3a:	4b29      	ldr	r3, [pc, #164]	@ (8001be0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d210      	bcs.n	8001b6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b48:	4b25      	ldr	r3, [pc, #148]	@ (8001be0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 0207 	bic.w	r2, r3, #7
 8001b50:	4923      	ldr	r1, [pc, #140]	@ (8001be0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b58:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e036      	b.n	8001bd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b76:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	4918      	ldr	r1, [pc, #96]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d009      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b94:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4910      	ldr	r1, [pc, #64]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ba8:	f000 f824 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	490b      	ldr	r1, [pc, #44]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f4>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	4a09      	ldr	r2, [pc, #36]	@ (8001bec <HAL_RCC_ClockConfig+0x1f8>)
 8001bc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bc8:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1fc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe ffe5 	bl	8000b9c <HAL_InitTick>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bd6:	7afb      	ldrb	r3, [r7, #11]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40022000 	.word	0x40022000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	0800467c 	.word	0x0800467c
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	@ 0x24
 8001bf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c02:	4b3e      	ldr	r3, [pc, #248]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x34>
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d121      	bne.n	8001c66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d11e      	bne.n	8001c66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c28:	4b34      	ldr	r3, [pc, #208]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c34:	4b31      	ldr	r3, [pc, #196]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	e005      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c44:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c50:	4a2b      	ldr	r2, [pc, #172]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10d      	bne.n	8001c7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d102      	bne.n	8001c72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c6c:	4b25      	ldr	r3, [pc, #148]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c6e:	61bb      	str	r3, [r7, #24]
 8001c70:	e004      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c78:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d134      	bne.n	8001cec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c82:	4b1e      	ldr	r3, [pc, #120]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d003      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xac>
 8001c98:	e005      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c9c:	617b      	str	r3, [r7, #20]
      break;
 8001c9e:	e005      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ca0:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ca2:	617b      	str	r3, [r7, #20]
      break;
 8001ca4:	e002      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	617b      	str	r3, [r7, #20]
      break;
 8001caa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cac:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	fb03 f202 	mul.w	r2, r3, r2
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	0e5b      	lsrs	r3, r3, #25
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	3301      	adds	r3, #1
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cec:	69bb      	ldr	r3, [r7, #24]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	@ 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	08004694 	.word	0x08004694
 8001d04:	00f42400 	.word	0x00f42400
 8001d08:	007a1200 	.word	0x007a1200

08001d0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000000 	.word	0x20000000

08001d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d28:	f7ff fff0 	bl	8001d0c <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4904      	ldr	r1, [pc, #16]	@ (8001d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	0800468c 	.word	0x0800468c

08001d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d54:	f7ff ffda 	bl	8001d0c <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0adb      	lsrs	r3, r3, #11
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4904      	ldr	r1, [pc, #16]	@ (8001d78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	0800468c 	.word	0x0800468c

08001d7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d88:	4b2a      	ldr	r3, [pc, #168]	@ (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d94:	f7ff f9ee 	bl	8001174 <HAL_PWREx_GetVoltageRange>
 8001d98:	6178      	str	r0, [r7, #20]
 8001d9a:	e014      	b.n	8001dc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d9c:	4b25      	ldr	r3, [pc, #148]	@ (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	4a24      	ldr	r2, [pc, #144]	@ (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001da8:	4b22      	ldr	r3, [pc, #136]	@ (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001db4:	f7ff f9de 	bl	8001174 <HAL_PWREx_GetVoltageRange>
 8001db8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dba:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dcc:	d10b      	bne.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b80      	cmp	r3, #128	@ 0x80
 8001dd2:	d919      	bls.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dd8:	d902      	bls.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dda:	2302      	movs	r3, #2
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	e013      	b.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de0:	2301      	movs	r3, #1
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	e010      	b.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b80      	cmp	r3, #128	@ 0x80
 8001dea:	d902      	bls.n	8001df2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dec:	2303      	movs	r3, #3
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	e00a      	b.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b80      	cmp	r3, #128	@ 0x80
 8001df6:	d102      	bne.n	8001dfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001df8:	2302      	movs	r3, #2
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	e004      	b.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b70      	cmp	r3, #112	@ 0x70
 8001e02:	d101      	bne.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e04:	2301      	movs	r3, #1
 8001e06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e08:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 0207 	bic.w	r2, r3, #7
 8001e10:	4909      	ldr	r1, [pc, #36]	@ (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e18:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d001      	beq.n	8001e2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40022000 	.word	0x40022000

08001e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e44:	2300      	movs	r3, #0
 8001e46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e48:	2300      	movs	r3, #0
 8001e4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d041      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e5c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e60:	d02a      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e62:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e66:	d824      	bhi.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e6c:	d008      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e72:	d81e      	bhi.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e7c:	d010      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e7e:	e018      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e80:	4b86      	ldr	r3, [pc, #536]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4a85      	ldr	r2, [pc, #532]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e8c:	e015      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fabb 	bl	8002410 <RCCEx_PLLSAI1_Config>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e9e:	e00c      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3320      	adds	r3, #32
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fba6 	bl	80025f8 <RCCEx_PLLSAI2_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eb0:	e003      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	74fb      	strb	r3, [r7, #19]
      break;
 8001eb6:	e000      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eba:	7cfb      	ldrb	r3, [r7, #19]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10b      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ec0:	4b76      	ldr	r3, [pc, #472]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ece:	4973      	ldr	r1, [pc, #460]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ed6:	e001      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d041      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001eec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ef0:	d02a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ef2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ef6:	d824      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ef8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001efc:	d008      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001efe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f02:	d81e      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f0c:	d010      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f0e:	e018      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f10:	4b62      	ldr	r3, [pc, #392]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4a61      	ldr	r2, [pc, #388]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f1c:	e015      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fa73 	bl	8002410 <RCCEx_PLLSAI1_Config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f2e:	e00c      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3320      	adds	r3, #32
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fb5e 	bl	80025f8 <RCCEx_PLLSAI2_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f40:	e003      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	74fb      	strb	r3, [r7, #19]
      break;
 8001f46:	e000      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f4a:	7cfb      	ldrb	r3, [r7, #19]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f50:	4b52      	ldr	r3, [pc, #328]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f56:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f5e:	494f      	ldr	r1, [pc, #316]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f66:	e001      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80a0 	beq.w	80020ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f7e:	4b47      	ldr	r3, [pc, #284]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00d      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	4b41      	ldr	r3, [pc, #260]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	4a40      	ldr	r2, [pc, #256]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa0:	4b3e      	ldr	r3, [pc, #248]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fac:	2301      	movs	r3, #1
 8001fae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a3a      	ldr	r2, [pc, #232]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fbc:	f7fe fe3e 	bl	8000c3c <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fc2:	e009      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc4:	f7fe fe3a 	bl	8000c3c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d902      	bls.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	74fb      	strb	r3, [r7, #19]
        break;
 8001fd6:	e005      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fd8:	4b31      	ldr	r3, [pc, #196]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ef      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d15c      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fea:	4b2c      	ldr	r3, [pc, #176]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ff4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01f      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	429a      	cmp	r2, r3
 8002006:	d019      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002008:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002012:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002014:	4b21      	ldr	r3, [pc, #132]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201a:	4a20      	ldr	r2, [pc, #128]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002024:	4b1d      	ldr	r3, [pc, #116]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202a:	4a1c      	ldr	r2, [pc, #112]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002034:	4a19      	ldr	r2, [pc, #100]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d016      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7fe fdf9 	bl	8000c3c <HAL_GetTick>
 800204a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204c:	e00b      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7fe fdf5 	bl	8000c3c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d902      	bls.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	74fb      	strb	r3, [r7, #19]
            break;
 8002064:	e006      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002066:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ec      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10c      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800207a:	4b08      	ldr	r3, [pc, #32]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800208a:	4904      	ldr	r1, [pc, #16]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002092:	e009      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	74bb      	strb	r3, [r7, #18]
 8002098:	e006      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a4:	7cfb      	ldrb	r3, [r7, #19]
 80020a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a8:	7c7b      	ldrb	r3, [r7, #17]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d105      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ae:	4b9e      	ldr	r3, [pc, #632]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	4a9d      	ldr	r2, [pc, #628]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020c6:	4b98      	ldr	r3, [pc, #608]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020cc:	f023 0203 	bic.w	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d4:	4994      	ldr	r1, [pc, #592]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ee:	f023 020c 	bic.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f6:	498c      	ldr	r1, [pc, #560]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800210a:	4b87      	ldr	r3, [pc, #540]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002110:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	4983      	ldr	r1, [pc, #524]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800212c:	4b7e      	ldr	r3, [pc, #504]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002132:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	497b      	ldr	r1, [pc, #492]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800214e:	4b76      	ldr	r3, [pc, #472]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002154:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215c:	4972      	ldr	r1, [pc, #456]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002170:	4b6d      	ldr	r3, [pc, #436]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002176:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	496a      	ldr	r1, [pc, #424]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002192:	4b65      	ldr	r3, [pc, #404]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002198:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a0:	4961      	ldr	r1, [pc, #388]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021b4:	4b5c      	ldr	r3, [pc, #368]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c2:	4959      	ldr	r1, [pc, #356]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021d6:	4b54      	ldr	r3, [pc, #336]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e4:	4950      	ldr	r1, [pc, #320]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002206:	4948      	ldr	r1, [pc, #288]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800221a:	4b43      	ldr	r3, [pc, #268]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002220:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	493f      	ldr	r1, [pc, #252]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d028      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800223c:	4b3a      	ldr	r3, [pc, #232]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800224a:	4937      	ldr	r1, [pc, #220]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002256:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800225a:	d106      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800225c:	4b32      	ldr	r3, [pc, #200]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a31      	ldr	r2, [pc, #196]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002266:	60d3      	str	r3, [r2, #12]
 8002268:	e011      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800226e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002272:	d10c      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	2101      	movs	r1, #1
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f8c8 	bl	8002410 <RCCEx_PLLSAI1_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d028      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800229a:	4b23      	ldr	r3, [pc, #140]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a8:	491f      	ldr	r1, [pc, #124]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022b8:	d106      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4a1a      	ldr	r2, [pc, #104]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c4:	60d3      	str	r3, [r2, #12]
 80022c6:	e011      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022d0:	d10c      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3304      	adds	r3, #4
 80022d6:	2101      	movs	r1, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f899 	bl	8002410 <RCCEx_PLLSAI1_Config>
 80022de:	4603      	mov	r3, r0
 80022e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022e2:	7cfb      	ldrb	r3, [r7, #19]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d02b      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002306:	4908      	ldr	r1, [pc, #32]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002312:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002316:	d109      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002318:	4b03      	ldr	r3, [pc, #12]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a02      	ldr	r2, [pc, #8]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002322:	60d3      	str	r3, [r2, #12]
 8002324:	e014      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002330:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002334:	d10c      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3304      	adds	r3, #4
 800233a:	2101      	movs	r1, #1
 800233c:	4618      	mov	r0, r3
 800233e:	f000 f867 	bl	8002410 <RCCEx_PLLSAI1_Config>
 8002342:	4603      	mov	r3, r0
 8002344:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002346:	7cfb      	ldrb	r3, [r7, #19]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800234c:	7cfb      	ldrb	r3, [r7, #19]
 800234e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d02f      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800235c:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002362:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800236a:	4928      	ldr	r1, [pc, #160]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002376:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800237a:	d10d      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3304      	adds	r3, #4
 8002380:	2102      	movs	r1, #2
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f844 	bl	8002410 <RCCEx_PLLSAI1_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d014      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	74bb      	strb	r3, [r7, #18]
 8002396:	e011      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800239c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3320      	adds	r3, #32
 80023a6:	2102      	movs	r1, #2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f925 	bl	80025f8 <RCCEx_PLLSAI2_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023c8:	4b10      	ldr	r3, [pc, #64]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023d6:	490d      	ldr	r1, [pc, #52]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023ea:	4b08      	ldr	r3, [pc, #32]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023fa:	4904      	ldr	r1, [pc, #16]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002402:	7cbb      	ldrb	r3, [r7, #18]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000

08002410 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800241e:	4b75      	ldr	r3, [pc, #468]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d018      	beq.n	800245c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800242a:	4b72      	ldr	r3, [pc, #456]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 0203 	and.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d10d      	bne.n	8002456 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
       ||
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002442:	4b6c      	ldr	r3, [pc, #432]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
       ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d047      	beq.n	80024e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
 800245a:	e044      	b.n	80024e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d018      	beq.n	8002496 <RCCEx_PLLSAI1_Config+0x86>
 8002464:	2b03      	cmp	r3, #3
 8002466:	d825      	bhi.n	80024b4 <RCCEx_PLLSAI1_Config+0xa4>
 8002468:	2b01      	cmp	r3, #1
 800246a:	d002      	beq.n	8002472 <RCCEx_PLLSAI1_Config+0x62>
 800246c:	2b02      	cmp	r3, #2
 800246e:	d009      	beq.n	8002484 <RCCEx_PLLSAI1_Config+0x74>
 8002470:	e020      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002472:	4b60      	ldr	r3, [pc, #384]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d11d      	bne.n	80024ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002482:	e01a      	b.n	80024ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002484:	4b5b      	ldr	r3, [pc, #364]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d116      	bne.n	80024be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002494:	e013      	b.n	80024be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002496:	4b57      	ldr	r3, [pc, #348]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10f      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024a2:	4b54      	ldr	r3, [pc, #336]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024b2:	e006      	b.n	80024c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e004      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ba:	bf00      	nop
 80024bc:	e002      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024be:	bf00      	nop
 80024c0:	e000      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ca:	4b4a      	ldr	r3, [pc, #296]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6819      	ldr	r1, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	430b      	orrs	r3, r1
 80024e0:	4944      	ldr	r1, [pc, #272]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d17d      	bne.n	80025e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024ec:	4b41      	ldr	r3, [pc, #260]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a40      	ldr	r2, [pc, #256]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f8:	f7fe fba0 	bl	8000c3c <HAL_GetTick>
 80024fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024fe:	e009      	b.n	8002514 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002500:	f7fe fb9c 	bl	8000c3c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d902      	bls.n	8002514 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	73fb      	strb	r3, [r7, #15]
        break;
 8002512:	e005      	b.n	8002520 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002514:	4b37      	ldr	r3, [pc, #220]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ef      	bne.n	8002500 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d160      	bne.n	80025e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d111      	bne.n	8002550 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800252c:	4b31      	ldr	r3, [pc, #196]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6892      	ldr	r2, [r2, #8]
 800253c:	0211      	lsls	r1, r2, #8
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68d2      	ldr	r2, [r2, #12]
 8002542:	0912      	lsrs	r2, r2, #4
 8002544:	0452      	lsls	r2, r2, #17
 8002546:	430a      	orrs	r2, r1
 8002548:	492a      	ldr	r1, [pc, #168]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	610b      	str	r3, [r1, #16]
 800254e:	e027      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d112      	bne.n	800257c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002556:	4b27      	ldr	r3, [pc, #156]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800255e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6892      	ldr	r2, [r2, #8]
 8002566:	0211      	lsls	r1, r2, #8
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6912      	ldr	r2, [r2, #16]
 800256c:	0852      	lsrs	r2, r2, #1
 800256e:	3a01      	subs	r2, #1
 8002570:	0552      	lsls	r2, r2, #21
 8002572:	430a      	orrs	r2, r1
 8002574:	491f      	ldr	r1, [pc, #124]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	610b      	str	r3, [r1, #16]
 800257a:	e011      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800257c:	4b1d      	ldr	r3, [pc, #116]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002584:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6892      	ldr	r2, [r2, #8]
 800258c:	0211      	lsls	r1, r2, #8
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6952      	ldr	r2, [r2, #20]
 8002592:	0852      	lsrs	r2, r2, #1
 8002594:	3a01      	subs	r2, #1
 8002596:	0652      	lsls	r2, r2, #25
 8002598:	430a      	orrs	r2, r1
 800259a:	4916      	ldr	r1, [pc, #88]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025a0:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a13      	ldr	r2, [pc, #76]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ac:	f7fe fb46 	bl	8000c3c <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b2:	e009      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025b4:	f7fe fb42 	bl	8000c3c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d902      	bls.n	80025c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	73fb      	strb	r3, [r7, #15]
          break;
 80025c6:	e005      	b.n	80025d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025c8:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0ef      	beq.n	80025b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	4904      	ldr	r1, [pc, #16]	@ (80025f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000

080025f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002606:	4b6a      	ldr	r3, [pc, #424]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d018      	beq.n	8002644 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002612:	4b67      	ldr	r3, [pc, #412]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f003 0203 	and.w	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d10d      	bne.n	800263e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
       ||
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800262a:	4b61      	ldr	r3, [pc, #388]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
       ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d047      	beq.n	80026ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	e044      	b.n	80026ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d018      	beq.n	800267e <RCCEx_PLLSAI2_Config+0x86>
 800264c:	2b03      	cmp	r3, #3
 800264e:	d825      	bhi.n	800269c <RCCEx_PLLSAI2_Config+0xa4>
 8002650:	2b01      	cmp	r3, #1
 8002652:	d002      	beq.n	800265a <RCCEx_PLLSAI2_Config+0x62>
 8002654:	2b02      	cmp	r3, #2
 8002656:	d009      	beq.n	800266c <RCCEx_PLLSAI2_Config+0x74>
 8002658:	e020      	b.n	800269c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800265a:	4b55      	ldr	r3, [pc, #340]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d11d      	bne.n	80026a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266a:	e01a      	b.n	80026a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800266c:	4b50      	ldr	r3, [pc, #320]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002674:	2b00      	cmp	r3, #0
 8002676:	d116      	bne.n	80026a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267c:	e013      	b.n	80026a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800267e:	4b4c      	ldr	r3, [pc, #304]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10f      	bne.n	80026aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800268a:	4b49      	ldr	r3, [pc, #292]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800269a:	e006      	b.n	80026aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
      break;
 80026a0:	e004      	b.n	80026ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026a2:	bf00      	nop
 80026a4:	e002      	b.n	80026ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026a6:	bf00      	nop
 80026a8:	e000      	b.n	80026ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026b2:	4b3f      	ldr	r3, [pc, #252]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	430b      	orrs	r3, r1
 80026c8:	4939      	ldr	r1, [pc, #228]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d167      	bne.n	80027a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026d4:	4b36      	ldr	r3, [pc, #216]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a35      	ldr	r2, [pc, #212]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e0:	f7fe faac 	bl	8000c3c <HAL_GetTick>
 80026e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026e6:	e009      	b.n	80026fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026e8:	f7fe faa8 	bl	8000c3c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d902      	bls.n	80026fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	73fb      	strb	r3, [r7, #15]
        break;
 80026fa:	e005      	b.n	8002708 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026fc:	4b2c      	ldr	r3, [pc, #176]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ef      	bne.n	80026e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d14a      	bne.n	80027a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d111      	bne.n	8002738 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002714:	4b26      	ldr	r3, [pc, #152]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800271c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6892      	ldr	r2, [r2, #8]
 8002724:	0211      	lsls	r1, r2, #8
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68d2      	ldr	r2, [r2, #12]
 800272a:	0912      	lsrs	r2, r2, #4
 800272c:	0452      	lsls	r2, r2, #17
 800272e:	430a      	orrs	r2, r1
 8002730:	491f      	ldr	r1, [pc, #124]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002732:	4313      	orrs	r3, r2
 8002734:	614b      	str	r3, [r1, #20]
 8002736:	e011      	b.n	800275c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002738:	4b1d      	ldr	r3, [pc, #116]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002740:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6892      	ldr	r2, [r2, #8]
 8002748:	0211      	lsls	r1, r2, #8
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6912      	ldr	r2, [r2, #16]
 800274e:	0852      	lsrs	r2, r2, #1
 8002750:	3a01      	subs	r2, #1
 8002752:	0652      	lsls	r2, r2, #25
 8002754:	430a      	orrs	r2, r1
 8002756:	4916      	ldr	r1, [pc, #88]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002758:	4313      	orrs	r3, r2
 800275a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800275c:	4b14      	ldr	r3, [pc, #80]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a13      	ldr	r2, [pc, #76]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002766:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe fa68 	bl	8000c3c <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800276e:	e009      	b.n	8002784 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002770:	f7fe fa64 	bl	8000c3c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d902      	bls.n	8002784 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	73fb      	strb	r3, [r7, #15]
          break;
 8002782:	e005      	b.n	8002790 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002784:	4b0a      	ldr	r3, [pc, #40]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ef      	beq.n	8002770 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	4904      	ldr	r1, [pc, #16]	@ (80027b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000

080027b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e097      	b.n	80028f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d106      	bne.n	80027e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7fe f819 	bl	8000814 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80027f8:	f023 0307 	bic.w	r3, r3, #7
 80027fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	4619      	mov	r1, r3
 8002808:	4610      	mov	r0, r2
 800280a:	f000 f907 	bl	8002a1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002836:	f023 0303 	bic.w	r3, r3, #3
 800283a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	4313      	orrs	r3, r2
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002854:	f023 030c 	bic.w	r3, r3, #12
 8002858:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002860:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	4313      	orrs	r3, r2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	011a      	lsls	r2, r3, #4
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	031b      	lsls	r3, r3, #12
 8002884:	4313      	orrs	r3, r2
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002892:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800289a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	4313      	orrs	r3, r2
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002910:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002918:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002920:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002928:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d110      	bne.n	8002952 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d102      	bne.n	800293c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002936:	7b7b      	ldrb	r3, [r7, #13]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d001      	beq.n	8002940 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e069      	b.n	8002a14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002950:	e031      	b.n	80029b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d110      	bne.n	800297a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002958:	7bbb      	ldrb	r3, [r7, #14]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800295e:	7b3b      	ldrb	r3, [r7, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d001      	beq.n	8002968 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e055      	b.n	8002a14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002978:	e01d      	b.n	80029b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d108      	bne.n	8002992 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002980:	7bbb      	ldrb	r3, [r7, #14]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d105      	bne.n	8002992 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002986:	7b7b      	ldrb	r3, [r7, #13]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d102      	bne.n	8002992 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800298c:	7b3b      	ldrb	r3, [r7, #12]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d001      	beq.n	8002996 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e03e      	b.n	8002a14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2202      	movs	r2, #2
 80029a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_TIM_Encoder_Start+0xc4>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d008      	beq.n	80029d4 <HAL_TIM_Encoder_Start+0xd4>
 80029c2:	e00f      	b.n	80029e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2201      	movs	r2, #1
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 f8bf 	bl	8002b50 <TIM_CCxChannelCmd>
      break;
 80029d2:	e016      	b.n	8002a02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2201      	movs	r2, #1
 80029da:	2104      	movs	r1, #4
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 f8b7 	bl	8002b50 <TIM_CCxChannelCmd>
      break;
 80029e2:	e00e      	b.n	8002a02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f8af 	bl	8002b50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2201      	movs	r2, #1
 80029f8:	2104      	movs	r1, #4
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f8a8 	bl	8002b50 <TIM_CCxChannelCmd>
      break;
 8002a00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0201 	orr.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a40      	ldr	r2, [pc, #256]	@ (8002b30 <TIM_Base_SetConfig+0x114>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d013      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a3a:	d00f      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b34 <TIM_Base_SetConfig+0x118>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00b      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a3c      	ldr	r2, [pc, #240]	@ (8002b38 <TIM_Base_SetConfig+0x11c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d007      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a3b      	ldr	r2, [pc, #236]	@ (8002b3c <TIM_Base_SetConfig+0x120>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d003      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a3a      	ldr	r2, [pc, #232]	@ (8002b40 <TIM_Base_SetConfig+0x124>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d108      	bne.n	8002a6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a2f      	ldr	r2, [pc, #188]	@ (8002b30 <TIM_Base_SetConfig+0x114>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01f      	beq.n	8002ab6 <TIM_Base_SetConfig+0x9a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a7c:	d01b      	beq.n	8002ab6 <TIM_Base_SetConfig+0x9a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2c      	ldr	r2, [pc, #176]	@ (8002b34 <TIM_Base_SetConfig+0x118>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d017      	beq.n	8002ab6 <TIM_Base_SetConfig+0x9a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a2b      	ldr	r2, [pc, #172]	@ (8002b38 <TIM_Base_SetConfig+0x11c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <TIM_Base_SetConfig+0x9a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2a      	ldr	r2, [pc, #168]	@ (8002b3c <TIM_Base_SetConfig+0x120>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00f      	beq.n	8002ab6 <TIM_Base_SetConfig+0x9a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a29      	ldr	r2, [pc, #164]	@ (8002b40 <TIM_Base_SetConfig+0x124>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00b      	beq.n	8002ab6 <TIM_Base_SetConfig+0x9a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a28      	ldr	r2, [pc, #160]	@ (8002b44 <TIM_Base_SetConfig+0x128>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d007      	beq.n	8002ab6 <TIM_Base_SetConfig+0x9a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a27      	ldr	r2, [pc, #156]	@ (8002b48 <TIM_Base_SetConfig+0x12c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d003      	beq.n	8002ab6 <TIM_Base_SetConfig+0x9a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a26      	ldr	r2, [pc, #152]	@ (8002b4c <TIM_Base_SetConfig+0x130>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d108      	bne.n	8002ac8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a10      	ldr	r2, [pc, #64]	@ (8002b30 <TIM_Base_SetConfig+0x114>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00f      	beq.n	8002b14 <TIM_Base_SetConfig+0xf8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <TIM_Base_SetConfig+0x124>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00b      	beq.n	8002b14 <TIM_Base_SetConfig+0xf8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a11      	ldr	r2, [pc, #68]	@ (8002b44 <TIM_Base_SetConfig+0x128>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d007      	beq.n	8002b14 <TIM_Base_SetConfig+0xf8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a10      	ldr	r2, [pc, #64]	@ (8002b48 <TIM_Base_SetConfig+0x12c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <TIM_Base_SetConfig+0xf8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b4c <TIM_Base_SetConfig+0x130>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d103      	bne.n	8002b1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	615a      	str	r2, [r3, #20]
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40000800 	.word	0x40000800
 8002b3c:	40000c00 	.word	0x40000c00
 8002b40:	40013400 	.word	0x40013400
 8002b44:	40014000 	.word	0x40014000
 8002b48:	40014400 	.word	0x40014400
 8002b4c:	40014800 	.word	0x40014800

08002b50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	2201      	movs	r2, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a1a      	ldr	r2, [r3, #32]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	401a      	ands	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1a      	ldr	r2, [r3, #32]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	621a      	str	r2, [r3, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e068      	b.n	8002c86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a2e      	ldr	r2, [pc, #184]	@ (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d004      	beq.n	8002be8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d108      	bne.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002bee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1e      	ldr	r2, [pc, #120]	@ (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01d      	beq.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c26:	d018      	beq.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a18      	ldr	r2, [pc, #96]	@ (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a13      	ldr	r2, [pc, #76]	@ (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a14      	ldr	r2, [pc, #80]	@ (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10c      	bne.n	8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40013400 	.word	0x40013400
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800
 8002ca4:	40000c00 	.word	0x40000c00
 8002ca8:	40014000 	.word	0x40014000

08002cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e040      	b.n	8002d40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fd fde2 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2224      	movs	r2, #36	@ 0x24
 8002cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fb6a 	bl	80033cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f8af 	bl	8002e5c <UART_SetConfig>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e01b      	b.n	8002d40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fbe9 	bl	8003510 <UART_CheckIdleState>
 8002d3e:	4603      	mov	r3, r0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	@ 0x28
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d177      	bne.n	8002e50 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_UART_Transmit+0x24>
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e070      	b.n	8002e52 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2221      	movs	r2, #33	@ 0x21
 8002d7c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d7e:	f7fd ff5d 	bl	8000c3c <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	88fa      	ldrh	r2, [r7, #6]
 8002d88:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d9c:	d108      	bne.n	8002db0 <HAL_UART_Transmit+0x68>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d104      	bne.n	8002db0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	e003      	b.n	8002db8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002db8:	e02f      	b.n	8002e1a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2180      	movs	r1, #128	@ 0x80
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fc4b 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e03b      	b.n	8002e52 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	881a      	ldrh	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dec:	b292      	uxth	r2, r2
 8002dee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	3302      	adds	r3, #2
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	e007      	b.n	8002e08 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	781a      	ldrb	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3301      	adds	r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1c9      	bne.n	8002dba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2140      	movs	r1, #64	@ 0x40
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 fc15 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e005      	b.n	8002e52 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3720      	adds	r7, #32
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e60:	b08a      	sub	sp, #40	@ 0x28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4ba4      	ldr	r3, [pc, #656]	@ (800311c <UART_SetConfig+0x2c0>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a99      	ldr	r2, [pc, #612]	@ (8003120 <UART_SetConfig+0x2c4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a90      	ldr	r2, [pc, #576]	@ (8003124 <UART_SetConfig+0x2c8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d126      	bne.n	8002f34 <UART_SetConfig+0xd8>
 8002ee6:	4b90      	ldr	r3, [pc, #576]	@ (8003128 <UART_SetConfig+0x2cc>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d81b      	bhi.n	8002f2c <UART_SetConfig+0xd0>
 8002ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8002efc <UART_SetConfig+0xa0>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002f0d 	.word	0x08002f0d
 8002f00:	08002f1d 	.word	0x08002f1d
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f25 	.word	0x08002f25
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f12:	e116      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002f14:	2302      	movs	r3, #2
 8002f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f1a:	e112      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f22:	e10e      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002f24:	2308      	movs	r3, #8
 8002f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f2a:	e10a      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f32:	e106      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a7c      	ldr	r2, [pc, #496]	@ (800312c <UART_SetConfig+0x2d0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d138      	bne.n	8002fb0 <UART_SetConfig+0x154>
 8002f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8003128 <UART_SetConfig+0x2cc>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	d82d      	bhi.n	8002fa8 <UART_SetConfig+0x14c>
 8002f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <UART_SetConfig+0xf8>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f89 	.word	0x08002f89
 8002f58:	08002fa9 	.word	0x08002fa9
 8002f5c:	08002fa9 	.word	0x08002fa9
 8002f60:	08002fa9 	.word	0x08002fa9
 8002f64:	08002f99 	.word	0x08002f99
 8002f68:	08002fa9 	.word	0x08002fa9
 8002f6c:	08002fa9 	.word	0x08002fa9
 8002f70:	08002fa9 	.word	0x08002fa9
 8002f74:	08002f91 	.word	0x08002f91
 8002f78:	08002fa9 	.word	0x08002fa9
 8002f7c:	08002fa9 	.word	0x08002fa9
 8002f80:	08002fa9 	.word	0x08002fa9
 8002f84:	08002fa1 	.word	0x08002fa1
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f8e:	e0d8      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002f90:	2302      	movs	r3, #2
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f96:	e0d4      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002f98:	2304      	movs	r3, #4
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f9e:	e0d0      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa6:	e0cc      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002fa8:	2310      	movs	r3, #16
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fae:	e0c8      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5e      	ldr	r2, [pc, #376]	@ (8003130 <UART_SetConfig+0x2d4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d125      	bne.n	8003006 <UART_SetConfig+0x1aa>
 8002fba:	4b5b      	ldr	r3, [pc, #364]	@ (8003128 <UART_SetConfig+0x2cc>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fc4:	2b30      	cmp	r3, #48	@ 0x30
 8002fc6:	d016      	beq.n	8002ff6 <UART_SetConfig+0x19a>
 8002fc8:	2b30      	cmp	r3, #48	@ 0x30
 8002fca:	d818      	bhi.n	8002ffe <UART_SetConfig+0x1a2>
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d00a      	beq.n	8002fe6 <UART_SetConfig+0x18a>
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d814      	bhi.n	8002ffe <UART_SetConfig+0x1a2>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <UART_SetConfig+0x182>
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d008      	beq.n	8002fee <UART_SetConfig+0x192>
 8002fdc:	e00f      	b.n	8002ffe <UART_SetConfig+0x1a2>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fe4:	e0ad      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fec:	e0a9      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002fee:	2304      	movs	r3, #4
 8002ff0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ff4:	e0a5      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffc:	e0a1      	b.n	8003142 <UART_SetConfig+0x2e6>
 8002ffe:	2310      	movs	r3, #16
 8003000:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003004:	e09d      	b.n	8003142 <UART_SetConfig+0x2e6>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a4a      	ldr	r2, [pc, #296]	@ (8003134 <UART_SetConfig+0x2d8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d125      	bne.n	800305c <UART_SetConfig+0x200>
 8003010:	4b45      	ldr	r3, [pc, #276]	@ (8003128 <UART_SetConfig+0x2cc>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003016:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800301a:	2bc0      	cmp	r3, #192	@ 0xc0
 800301c:	d016      	beq.n	800304c <UART_SetConfig+0x1f0>
 800301e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003020:	d818      	bhi.n	8003054 <UART_SetConfig+0x1f8>
 8003022:	2b80      	cmp	r3, #128	@ 0x80
 8003024:	d00a      	beq.n	800303c <UART_SetConfig+0x1e0>
 8003026:	2b80      	cmp	r3, #128	@ 0x80
 8003028:	d814      	bhi.n	8003054 <UART_SetConfig+0x1f8>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <UART_SetConfig+0x1d8>
 800302e:	2b40      	cmp	r3, #64	@ 0x40
 8003030:	d008      	beq.n	8003044 <UART_SetConfig+0x1e8>
 8003032:	e00f      	b.n	8003054 <UART_SetConfig+0x1f8>
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303a:	e082      	b.n	8003142 <UART_SetConfig+0x2e6>
 800303c:	2302      	movs	r3, #2
 800303e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003042:	e07e      	b.n	8003142 <UART_SetConfig+0x2e6>
 8003044:	2304      	movs	r3, #4
 8003046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800304a:	e07a      	b.n	8003142 <UART_SetConfig+0x2e6>
 800304c:	2308      	movs	r3, #8
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003052:	e076      	b.n	8003142 <UART_SetConfig+0x2e6>
 8003054:	2310      	movs	r3, #16
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800305a:	e072      	b.n	8003142 <UART_SetConfig+0x2e6>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a35      	ldr	r2, [pc, #212]	@ (8003138 <UART_SetConfig+0x2dc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d12a      	bne.n	80030bc <UART_SetConfig+0x260>
 8003066:	4b30      	ldr	r3, [pc, #192]	@ (8003128 <UART_SetConfig+0x2cc>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003070:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003074:	d01a      	beq.n	80030ac <UART_SetConfig+0x250>
 8003076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800307a:	d81b      	bhi.n	80030b4 <UART_SetConfig+0x258>
 800307c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003080:	d00c      	beq.n	800309c <UART_SetConfig+0x240>
 8003082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003086:	d815      	bhi.n	80030b4 <UART_SetConfig+0x258>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <UART_SetConfig+0x238>
 800308c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003090:	d008      	beq.n	80030a4 <UART_SetConfig+0x248>
 8003092:	e00f      	b.n	80030b4 <UART_SetConfig+0x258>
 8003094:	2300      	movs	r3, #0
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309a:	e052      	b.n	8003142 <UART_SetConfig+0x2e6>
 800309c:	2302      	movs	r3, #2
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a2:	e04e      	b.n	8003142 <UART_SetConfig+0x2e6>
 80030a4:	2304      	movs	r3, #4
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030aa:	e04a      	b.n	8003142 <UART_SetConfig+0x2e6>
 80030ac:	2308      	movs	r3, #8
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b2:	e046      	b.n	8003142 <UART_SetConfig+0x2e6>
 80030b4:	2310      	movs	r3, #16
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ba:	e042      	b.n	8003142 <UART_SetConfig+0x2e6>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a17      	ldr	r2, [pc, #92]	@ (8003120 <UART_SetConfig+0x2c4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d13a      	bne.n	800313c <UART_SetConfig+0x2e0>
 80030c6:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <UART_SetConfig+0x2cc>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030d4:	d01a      	beq.n	800310c <UART_SetConfig+0x2b0>
 80030d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030da:	d81b      	bhi.n	8003114 <UART_SetConfig+0x2b8>
 80030dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030e0:	d00c      	beq.n	80030fc <UART_SetConfig+0x2a0>
 80030e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030e6:	d815      	bhi.n	8003114 <UART_SetConfig+0x2b8>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <UART_SetConfig+0x298>
 80030ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f0:	d008      	beq.n	8003104 <UART_SetConfig+0x2a8>
 80030f2:	e00f      	b.n	8003114 <UART_SetConfig+0x2b8>
 80030f4:	2300      	movs	r3, #0
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fa:	e022      	b.n	8003142 <UART_SetConfig+0x2e6>
 80030fc:	2302      	movs	r3, #2
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003102:	e01e      	b.n	8003142 <UART_SetConfig+0x2e6>
 8003104:	2304      	movs	r3, #4
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310a:	e01a      	b.n	8003142 <UART_SetConfig+0x2e6>
 800310c:	2308      	movs	r3, #8
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003112:	e016      	b.n	8003142 <UART_SetConfig+0x2e6>
 8003114:	2310      	movs	r3, #16
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311a:	e012      	b.n	8003142 <UART_SetConfig+0x2e6>
 800311c:	efff69f3 	.word	0xefff69f3
 8003120:	40008000 	.word	0x40008000
 8003124:	40013800 	.word	0x40013800
 8003128:	40021000 	.word	0x40021000
 800312c:	40004400 	.word	0x40004400
 8003130:	40004800 	.word	0x40004800
 8003134:	40004c00 	.word	0x40004c00
 8003138:	40005000 	.word	0x40005000
 800313c:	2310      	movs	r3, #16
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a9f      	ldr	r2, [pc, #636]	@ (80033c4 <UART_SetConfig+0x568>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d17a      	bne.n	8003242 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800314c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003150:	2b08      	cmp	r3, #8
 8003152:	d824      	bhi.n	800319e <UART_SetConfig+0x342>
 8003154:	a201      	add	r2, pc, #4	@ (adr r2, 800315c <UART_SetConfig+0x300>)
 8003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315a:	bf00      	nop
 800315c:	08003181 	.word	0x08003181
 8003160:	0800319f 	.word	0x0800319f
 8003164:	08003189 	.word	0x08003189
 8003168:	0800319f 	.word	0x0800319f
 800316c:	0800318f 	.word	0x0800318f
 8003170:	0800319f 	.word	0x0800319f
 8003174:	0800319f 	.word	0x0800319f
 8003178:	0800319f 	.word	0x0800319f
 800317c:	08003197 	.word	0x08003197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003180:	f7fe fdd0 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 8003184:	61f8      	str	r0, [r7, #28]
        break;
 8003186:	e010      	b.n	80031aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003188:	4b8f      	ldr	r3, [pc, #572]	@ (80033c8 <UART_SetConfig+0x56c>)
 800318a:	61fb      	str	r3, [r7, #28]
        break;
 800318c:	e00d      	b.n	80031aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800318e:	f7fe fd31 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8003192:	61f8      	str	r0, [r7, #28]
        break;
 8003194:	e009      	b.n	80031aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800319a:	61fb      	str	r3, [r7, #28]
        break;
 800319c:	e005      	b.n	80031aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80fb 	beq.w	80033a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d305      	bcc.n	80031ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d903      	bls.n	80031d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80031d4:	e0e8      	b.n	80033a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	2200      	movs	r2, #0
 80031da:	461c      	mov	r4, r3
 80031dc:	4615      	mov	r5, r2
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	022b      	lsls	r3, r5, #8
 80031e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031ec:	0222      	lsls	r2, r4, #8
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	6849      	ldr	r1, [r1, #4]
 80031f2:	0849      	lsrs	r1, r1, #1
 80031f4:	2000      	movs	r0, #0
 80031f6:	4688      	mov	r8, r1
 80031f8:	4681      	mov	r9, r0
 80031fa:	eb12 0a08 	adds.w	sl, r2, r8
 80031fe:	eb43 0b09 	adc.w	fp, r3, r9
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003210:	4650      	mov	r0, sl
 8003212:	4659      	mov	r1, fp
 8003214:	f7fd f82c 	bl	8000270 <__aeabi_uldivmod>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4613      	mov	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003226:	d308      	bcc.n	800323a <UART_SetConfig+0x3de>
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800322e:	d204      	bcs.n	800323a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	60da      	str	r2, [r3, #12]
 8003238:	e0b6      	b.n	80033a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003240:	e0b2      	b.n	80033a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800324a:	d15e      	bne.n	800330a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800324c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x44a>
 8003254:	a201      	add	r2, pc, #4	@ (adr r2, 800325c <UART_SetConfig+0x400>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7fe fd50 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 8003284:	61f8      	str	r0, [r7, #28]
        break;
 8003286:	e014      	b.n	80032b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7fe fd62 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 800328c:	61f8      	str	r0, [r7, #28]
        break;
 800328e:	e010      	b.n	80032b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b4d      	ldr	r3, [pc, #308]	@ (80033c8 <UART_SetConfig+0x56c>)
 8003292:	61fb      	str	r3, [r7, #28]
        break;
 8003294:	e00d      	b.n	80032b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe fcad 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 800329a:	61f8      	str	r0, [r7, #28]
        break;
 800329c:	e009      	b.n	80032b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032a2:	61fb      	str	r3, [r7, #28]
        break;
 80032a4:	e005      	b.n	80032b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d077      	beq.n	80033a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005a      	lsls	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	441a      	add	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b0f      	cmp	r3, #15
 80032d2:	d916      	bls.n	8003302 <UART_SetConfig+0x4a6>
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032da:	d212      	bcs.n	8003302 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f023 030f 	bic.w	r3, r3, #15
 80032e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	8afb      	ldrh	r3, [r7, #22]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	8afa      	ldrh	r2, [r7, #22]
 80032fe:	60da      	str	r2, [r3, #12]
 8003300:	e052      	b.n	80033a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003308:	e04e      	b.n	80033a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800330a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800330e:	2b08      	cmp	r3, #8
 8003310:	d827      	bhi.n	8003362 <UART_SetConfig+0x506>
 8003312:	a201      	add	r2, pc, #4	@ (adr r2, 8003318 <UART_SetConfig+0x4bc>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	0800333d 	.word	0x0800333d
 800331c:	08003345 	.word	0x08003345
 8003320:	0800334d 	.word	0x0800334d
 8003324:	08003363 	.word	0x08003363
 8003328:	08003353 	.word	0x08003353
 800332c:	08003363 	.word	0x08003363
 8003330:	08003363 	.word	0x08003363
 8003334:	08003363 	.word	0x08003363
 8003338:	0800335b 	.word	0x0800335b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800333c:	f7fe fcf2 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 8003340:	61f8      	str	r0, [r7, #28]
        break;
 8003342:	e014      	b.n	800336e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003344:	f7fe fd04 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8003348:	61f8      	str	r0, [r7, #28]
        break;
 800334a:	e010      	b.n	800336e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800334c:	4b1e      	ldr	r3, [pc, #120]	@ (80033c8 <UART_SetConfig+0x56c>)
 800334e:	61fb      	str	r3, [r7, #28]
        break;
 8003350:	e00d      	b.n	800336e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003352:	f7fe fc4f 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8003356:	61f8      	str	r0, [r7, #28]
        break;
 8003358:	e009      	b.n	800336e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800335a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800335e:	61fb      	str	r3, [r7, #28]
        break;
 8003360:	e005      	b.n	800336e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800336c:	bf00      	nop
    }

    if (pclk != 0U)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d019      	beq.n	80033a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	085a      	lsrs	r2, r3, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	441a      	add	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b0f      	cmp	r3, #15
 800338c:	d909      	bls.n	80033a2 <UART_SetConfig+0x546>
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003394:	d205      	bcs.n	80033a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	e002      	b.n	80033a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3728      	adds	r7, #40	@ 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c2:	bf00      	nop
 80033c4:	40008000 	.word	0x40008000
 80033c8:	00f42400 	.word	0x00f42400

080033cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01a      	beq.n	80034e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ca:	d10a      	bne.n	80034e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	605a      	str	r2, [r3, #4]
  }
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b098      	sub	sp, #96	@ 0x60
 8003514:	af02      	add	r7, sp, #8
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003520:	f7fd fb8c 	bl	8000c3c <HAL_GetTick>
 8003524:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b08      	cmp	r3, #8
 8003532:	d12e      	bne.n	8003592 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003534:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353c:	2200      	movs	r2, #0
 800353e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f88c 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d021      	beq.n	8003592 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800355c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003562:	653b      	str	r3, [r7, #80]	@ 0x50
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800356c:	647b      	str	r3, [r7, #68]	@ 0x44
 800356e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800357a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e6      	bne.n	800354e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e062      	b.n	8003658 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d149      	bne.n	8003634 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f856 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d03c      	beq.n	8003634 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	623b      	str	r3, [r7, #32]
   return(result);
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e6      	bne.n	80035ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3308      	adds	r3, #8
 80035f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3308      	adds	r3, #8
 800360a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800360c:	61fa      	str	r2, [r7, #28]
 800360e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	617b      	str	r3, [r7, #20]
   return(result);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e011      	b.n	8003658 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3758      	adds	r7, #88	@ 0x58
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003670:	e049      	b.n	8003706 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d045      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fd fadf 	bl	8000c3c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <UART_WaitOnFlagUntilTimeout+0x30>
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e048      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d031      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d110      	bne.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2208      	movs	r2, #8
 80036b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f838 	bl	800372e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2208      	movs	r2, #8
 80036c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e029      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036e0:	d111      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f81e 	bl	800372e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e00f      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	429a      	cmp	r2, r3
 8003722:	d0a6      	beq.n	8003672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800372e:	b480      	push	{r7}
 8003730:	b095      	sub	sp, #84	@ 0x54
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003746:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800374a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003754:	643b      	str	r3, [r7, #64]	@ 0x40
 8003756:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800375a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e6      	bne.n	8003736 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3308      	adds	r3, #8
 800376e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	61fb      	str	r3, [r7, #28]
   return(result);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3308      	adds	r3, #8
 8003786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003788:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800378a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800378e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d118      	bne.n	80037d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f023 0310 	bic.w	r3, r3, #16
 80037b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6979      	ldr	r1, [r7, #20]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	613b      	str	r3, [r7, #16]
   return(result);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e6      	bne.n	80037a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037ea:	bf00      	nop
 80037ec:	3754      	adds	r7, #84	@ 0x54
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <std>:
 80037f8:	2300      	movs	r3, #0
 80037fa:	b510      	push	{r4, lr}
 80037fc:	4604      	mov	r4, r0
 80037fe:	e9c0 3300 	strd	r3, r3, [r0]
 8003802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003806:	6083      	str	r3, [r0, #8]
 8003808:	8181      	strh	r1, [r0, #12]
 800380a:	6643      	str	r3, [r0, #100]	@ 0x64
 800380c:	81c2      	strh	r2, [r0, #14]
 800380e:	6183      	str	r3, [r0, #24]
 8003810:	4619      	mov	r1, r3
 8003812:	2208      	movs	r2, #8
 8003814:	305c      	adds	r0, #92	@ 0x5c
 8003816:	f000 f906 	bl	8003a26 <memset>
 800381a:	4b0d      	ldr	r3, [pc, #52]	@ (8003850 <std+0x58>)
 800381c:	6263      	str	r3, [r4, #36]	@ 0x24
 800381e:	4b0d      	ldr	r3, [pc, #52]	@ (8003854 <std+0x5c>)
 8003820:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003822:	4b0d      	ldr	r3, [pc, #52]	@ (8003858 <std+0x60>)
 8003824:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003826:	4b0d      	ldr	r3, [pc, #52]	@ (800385c <std+0x64>)
 8003828:	6323      	str	r3, [r4, #48]	@ 0x30
 800382a:	4b0d      	ldr	r3, [pc, #52]	@ (8003860 <std+0x68>)
 800382c:	6224      	str	r4, [r4, #32]
 800382e:	429c      	cmp	r4, r3
 8003830:	d006      	beq.n	8003840 <std+0x48>
 8003832:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003836:	4294      	cmp	r4, r2
 8003838:	d002      	beq.n	8003840 <std+0x48>
 800383a:	33d0      	adds	r3, #208	@ 0xd0
 800383c:	429c      	cmp	r4, r3
 800383e:	d105      	bne.n	800384c <std+0x54>
 8003840:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003848:	f000 b966 	b.w	8003b18 <__retarget_lock_init_recursive>
 800384c:	bd10      	pop	{r4, pc}
 800384e:	bf00      	nop
 8003850:	080039a1 	.word	0x080039a1
 8003854:	080039c3 	.word	0x080039c3
 8003858:	080039fb 	.word	0x080039fb
 800385c:	08003a1f 	.word	0x08003a1f
 8003860:	20000160 	.word	0x20000160

08003864 <stdio_exit_handler>:
 8003864:	4a02      	ldr	r2, [pc, #8]	@ (8003870 <stdio_exit_handler+0xc>)
 8003866:	4903      	ldr	r1, [pc, #12]	@ (8003874 <stdio_exit_handler+0x10>)
 8003868:	4803      	ldr	r0, [pc, #12]	@ (8003878 <stdio_exit_handler+0x14>)
 800386a:	f000 b869 	b.w	8003940 <_fwalk_sglue>
 800386e:	bf00      	nop
 8003870:	2000000c 	.word	0x2000000c
 8003874:	080043b9 	.word	0x080043b9
 8003878:	2000001c 	.word	0x2000001c

0800387c <cleanup_stdio>:
 800387c:	6841      	ldr	r1, [r0, #4]
 800387e:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <cleanup_stdio+0x34>)
 8003880:	4299      	cmp	r1, r3
 8003882:	b510      	push	{r4, lr}
 8003884:	4604      	mov	r4, r0
 8003886:	d001      	beq.n	800388c <cleanup_stdio+0x10>
 8003888:	f000 fd96 	bl	80043b8 <_fflush_r>
 800388c:	68a1      	ldr	r1, [r4, #8]
 800388e:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <cleanup_stdio+0x38>)
 8003890:	4299      	cmp	r1, r3
 8003892:	d002      	beq.n	800389a <cleanup_stdio+0x1e>
 8003894:	4620      	mov	r0, r4
 8003896:	f000 fd8f 	bl	80043b8 <_fflush_r>
 800389a:	68e1      	ldr	r1, [r4, #12]
 800389c:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <cleanup_stdio+0x3c>)
 800389e:	4299      	cmp	r1, r3
 80038a0:	d004      	beq.n	80038ac <cleanup_stdio+0x30>
 80038a2:	4620      	mov	r0, r4
 80038a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a8:	f000 bd86 	b.w	80043b8 <_fflush_r>
 80038ac:	bd10      	pop	{r4, pc}
 80038ae:	bf00      	nop
 80038b0:	20000160 	.word	0x20000160
 80038b4:	200001c8 	.word	0x200001c8
 80038b8:	20000230 	.word	0x20000230

080038bc <global_stdio_init.part.0>:
 80038bc:	b510      	push	{r4, lr}
 80038be:	4b0b      	ldr	r3, [pc, #44]	@ (80038ec <global_stdio_init.part.0+0x30>)
 80038c0:	4c0b      	ldr	r4, [pc, #44]	@ (80038f0 <global_stdio_init.part.0+0x34>)
 80038c2:	4a0c      	ldr	r2, [pc, #48]	@ (80038f4 <global_stdio_init.part.0+0x38>)
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	4620      	mov	r0, r4
 80038c8:	2200      	movs	r2, #0
 80038ca:	2104      	movs	r1, #4
 80038cc:	f7ff ff94 	bl	80037f8 <std>
 80038d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80038d4:	2201      	movs	r2, #1
 80038d6:	2109      	movs	r1, #9
 80038d8:	f7ff ff8e 	bl	80037f8 <std>
 80038dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80038e0:	2202      	movs	r2, #2
 80038e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e6:	2112      	movs	r1, #18
 80038e8:	f7ff bf86 	b.w	80037f8 <std>
 80038ec:	20000298 	.word	0x20000298
 80038f0:	20000160 	.word	0x20000160
 80038f4:	08003865 	.word	0x08003865

080038f8 <__sfp_lock_acquire>:
 80038f8:	4801      	ldr	r0, [pc, #4]	@ (8003900 <__sfp_lock_acquire+0x8>)
 80038fa:	f000 b90e 	b.w	8003b1a <__retarget_lock_acquire_recursive>
 80038fe:	bf00      	nop
 8003900:	200002a1 	.word	0x200002a1

08003904 <__sfp_lock_release>:
 8003904:	4801      	ldr	r0, [pc, #4]	@ (800390c <__sfp_lock_release+0x8>)
 8003906:	f000 b909 	b.w	8003b1c <__retarget_lock_release_recursive>
 800390a:	bf00      	nop
 800390c:	200002a1 	.word	0x200002a1

08003910 <__sinit>:
 8003910:	b510      	push	{r4, lr}
 8003912:	4604      	mov	r4, r0
 8003914:	f7ff fff0 	bl	80038f8 <__sfp_lock_acquire>
 8003918:	6a23      	ldr	r3, [r4, #32]
 800391a:	b11b      	cbz	r3, 8003924 <__sinit+0x14>
 800391c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003920:	f7ff bff0 	b.w	8003904 <__sfp_lock_release>
 8003924:	4b04      	ldr	r3, [pc, #16]	@ (8003938 <__sinit+0x28>)
 8003926:	6223      	str	r3, [r4, #32]
 8003928:	4b04      	ldr	r3, [pc, #16]	@ (800393c <__sinit+0x2c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f5      	bne.n	800391c <__sinit+0xc>
 8003930:	f7ff ffc4 	bl	80038bc <global_stdio_init.part.0>
 8003934:	e7f2      	b.n	800391c <__sinit+0xc>
 8003936:	bf00      	nop
 8003938:	0800387d 	.word	0x0800387d
 800393c:	20000298 	.word	0x20000298

08003940 <_fwalk_sglue>:
 8003940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003944:	4607      	mov	r7, r0
 8003946:	4688      	mov	r8, r1
 8003948:	4614      	mov	r4, r2
 800394a:	2600      	movs	r6, #0
 800394c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003950:	f1b9 0901 	subs.w	r9, r9, #1
 8003954:	d505      	bpl.n	8003962 <_fwalk_sglue+0x22>
 8003956:	6824      	ldr	r4, [r4, #0]
 8003958:	2c00      	cmp	r4, #0
 800395a:	d1f7      	bne.n	800394c <_fwalk_sglue+0xc>
 800395c:	4630      	mov	r0, r6
 800395e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003962:	89ab      	ldrh	r3, [r5, #12]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d907      	bls.n	8003978 <_fwalk_sglue+0x38>
 8003968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800396c:	3301      	adds	r3, #1
 800396e:	d003      	beq.n	8003978 <_fwalk_sglue+0x38>
 8003970:	4629      	mov	r1, r5
 8003972:	4638      	mov	r0, r7
 8003974:	47c0      	blx	r8
 8003976:	4306      	orrs	r6, r0
 8003978:	3568      	adds	r5, #104	@ 0x68
 800397a:	e7e9      	b.n	8003950 <_fwalk_sglue+0x10>

0800397c <iprintf>:
 800397c:	b40f      	push	{r0, r1, r2, r3}
 800397e:	b507      	push	{r0, r1, r2, lr}
 8003980:	4906      	ldr	r1, [pc, #24]	@ (800399c <iprintf+0x20>)
 8003982:	ab04      	add	r3, sp, #16
 8003984:	6808      	ldr	r0, [r1, #0]
 8003986:	f853 2b04 	ldr.w	r2, [r3], #4
 800398a:	6881      	ldr	r1, [r0, #8]
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	f000 f9e9 	bl	8003d64 <_vfiprintf_r>
 8003992:	b003      	add	sp, #12
 8003994:	f85d eb04 	ldr.w	lr, [sp], #4
 8003998:	b004      	add	sp, #16
 800399a:	4770      	bx	lr
 800399c:	20000018 	.word	0x20000018

080039a0 <__sread>:
 80039a0:	b510      	push	{r4, lr}
 80039a2:	460c      	mov	r4, r1
 80039a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039a8:	f000 f868 	bl	8003a7c <_read_r>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	bfab      	itete	ge
 80039b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80039b2:	89a3      	ldrhlt	r3, [r4, #12]
 80039b4:	181b      	addge	r3, r3, r0
 80039b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80039ba:	bfac      	ite	ge
 80039bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80039be:	81a3      	strhlt	r3, [r4, #12]
 80039c0:	bd10      	pop	{r4, pc}

080039c2 <__swrite>:
 80039c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c6:	461f      	mov	r7, r3
 80039c8:	898b      	ldrh	r3, [r1, #12]
 80039ca:	05db      	lsls	r3, r3, #23
 80039cc:	4605      	mov	r5, r0
 80039ce:	460c      	mov	r4, r1
 80039d0:	4616      	mov	r6, r2
 80039d2:	d505      	bpl.n	80039e0 <__swrite+0x1e>
 80039d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d8:	2302      	movs	r3, #2
 80039da:	2200      	movs	r2, #0
 80039dc:	f000 f83c 	bl	8003a58 <_lseek_r>
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039ea:	81a3      	strh	r3, [r4, #12]
 80039ec:	4632      	mov	r2, r6
 80039ee:	463b      	mov	r3, r7
 80039f0:	4628      	mov	r0, r5
 80039f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039f6:	f000 b853 	b.w	8003aa0 <_write_r>

080039fa <__sseek>:
 80039fa:	b510      	push	{r4, lr}
 80039fc:	460c      	mov	r4, r1
 80039fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a02:	f000 f829 	bl	8003a58 <_lseek_r>
 8003a06:	1c43      	adds	r3, r0, #1
 8003a08:	89a3      	ldrh	r3, [r4, #12]
 8003a0a:	bf15      	itete	ne
 8003a0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a16:	81a3      	strheq	r3, [r4, #12]
 8003a18:	bf18      	it	ne
 8003a1a:	81a3      	strhne	r3, [r4, #12]
 8003a1c:	bd10      	pop	{r4, pc}

08003a1e <__sclose>:
 8003a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a22:	f000 b809 	b.w	8003a38 <_close_r>

08003a26 <memset>:
 8003a26:	4402      	add	r2, r0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d100      	bne.n	8003a30 <memset+0xa>
 8003a2e:	4770      	bx	lr
 8003a30:	f803 1b01 	strb.w	r1, [r3], #1
 8003a34:	e7f9      	b.n	8003a2a <memset+0x4>
	...

08003a38 <_close_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	4d06      	ldr	r5, [pc, #24]	@ (8003a54 <_close_r+0x1c>)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	4604      	mov	r4, r0
 8003a40:	4608      	mov	r0, r1
 8003a42:	602b      	str	r3, [r5, #0]
 8003a44:	f7fc ffec 	bl	8000a20 <_close>
 8003a48:	1c43      	adds	r3, r0, #1
 8003a4a:	d102      	bne.n	8003a52 <_close_r+0x1a>
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	b103      	cbz	r3, 8003a52 <_close_r+0x1a>
 8003a50:	6023      	str	r3, [r4, #0]
 8003a52:	bd38      	pop	{r3, r4, r5, pc}
 8003a54:	2000029c 	.word	0x2000029c

08003a58 <_lseek_r>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	4d07      	ldr	r5, [pc, #28]	@ (8003a78 <_lseek_r+0x20>)
 8003a5c:	4604      	mov	r4, r0
 8003a5e:	4608      	mov	r0, r1
 8003a60:	4611      	mov	r1, r2
 8003a62:	2200      	movs	r2, #0
 8003a64:	602a      	str	r2, [r5, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f7fd f801 	bl	8000a6e <_lseek>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d102      	bne.n	8003a76 <_lseek_r+0x1e>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	b103      	cbz	r3, 8003a76 <_lseek_r+0x1e>
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
 8003a78:	2000029c 	.word	0x2000029c

08003a7c <_read_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4d07      	ldr	r5, [pc, #28]	@ (8003a9c <_read_r+0x20>)
 8003a80:	4604      	mov	r4, r0
 8003a82:	4608      	mov	r0, r1
 8003a84:	4611      	mov	r1, r2
 8003a86:	2200      	movs	r2, #0
 8003a88:	602a      	str	r2, [r5, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f7fc ff8f 	bl	80009ae <_read>
 8003a90:	1c43      	adds	r3, r0, #1
 8003a92:	d102      	bne.n	8003a9a <_read_r+0x1e>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	b103      	cbz	r3, 8003a9a <_read_r+0x1e>
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	2000029c 	.word	0x2000029c

08003aa0 <_write_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4d07      	ldr	r5, [pc, #28]	@ (8003ac0 <_write_r+0x20>)
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	4608      	mov	r0, r1
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	2200      	movs	r2, #0
 8003aac:	602a      	str	r2, [r5, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f7fc ff9a 	bl	80009e8 <_write>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d102      	bne.n	8003abe <_write_r+0x1e>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	b103      	cbz	r3, 8003abe <_write_r+0x1e>
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
 8003ac0:	2000029c 	.word	0x2000029c

08003ac4 <__errno>:
 8003ac4:	4b01      	ldr	r3, [pc, #4]	@ (8003acc <__errno+0x8>)
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000018 	.word	0x20000018

08003ad0 <__libc_init_array>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8003b08 <__libc_init_array+0x38>)
 8003ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8003b0c <__libc_init_array+0x3c>)
 8003ad6:	1b64      	subs	r4, r4, r5
 8003ad8:	10a4      	asrs	r4, r4, #2
 8003ada:	2600      	movs	r6, #0
 8003adc:	42a6      	cmp	r6, r4
 8003ade:	d109      	bne.n	8003af4 <__libc_init_array+0x24>
 8003ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8003b10 <__libc_init_array+0x40>)
 8003ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8003b14 <__libc_init_array+0x44>)
 8003ae4:	f000 fdb8 	bl	8004658 <_init>
 8003ae8:	1b64      	subs	r4, r4, r5
 8003aea:	10a4      	asrs	r4, r4, #2
 8003aec:	2600      	movs	r6, #0
 8003aee:	42a6      	cmp	r6, r4
 8003af0:	d105      	bne.n	8003afe <__libc_init_array+0x2e>
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
 8003af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af8:	4798      	blx	r3
 8003afa:	3601      	adds	r6, #1
 8003afc:	e7ee      	b.n	8003adc <__libc_init_array+0xc>
 8003afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b02:	4798      	blx	r3
 8003b04:	3601      	adds	r6, #1
 8003b06:	e7f2      	b.n	8003aee <__libc_init_array+0x1e>
 8003b08:	08004700 	.word	0x08004700
 8003b0c:	08004700 	.word	0x08004700
 8003b10:	08004700 	.word	0x08004700
 8003b14:	08004704 	.word	0x08004704

08003b18 <__retarget_lock_init_recursive>:
 8003b18:	4770      	bx	lr

08003b1a <__retarget_lock_acquire_recursive>:
 8003b1a:	4770      	bx	lr

08003b1c <__retarget_lock_release_recursive>:
 8003b1c:	4770      	bx	lr
	...

08003b20 <_free_r>:
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	4605      	mov	r5, r0
 8003b24:	2900      	cmp	r1, #0
 8003b26:	d041      	beq.n	8003bac <_free_r+0x8c>
 8003b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b2c:	1f0c      	subs	r4, r1, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bfb8      	it	lt
 8003b32:	18e4      	addlt	r4, r4, r3
 8003b34:	f000 f8e0 	bl	8003cf8 <__malloc_lock>
 8003b38:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb0 <_free_r+0x90>)
 8003b3a:	6813      	ldr	r3, [r2, #0]
 8003b3c:	b933      	cbnz	r3, 8003b4c <_free_r+0x2c>
 8003b3e:	6063      	str	r3, [r4, #4]
 8003b40:	6014      	str	r4, [r2, #0]
 8003b42:	4628      	mov	r0, r5
 8003b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b48:	f000 b8dc 	b.w	8003d04 <__malloc_unlock>
 8003b4c:	42a3      	cmp	r3, r4
 8003b4e:	d908      	bls.n	8003b62 <_free_r+0x42>
 8003b50:	6820      	ldr	r0, [r4, #0]
 8003b52:	1821      	adds	r1, r4, r0
 8003b54:	428b      	cmp	r3, r1
 8003b56:	bf01      	itttt	eq
 8003b58:	6819      	ldreq	r1, [r3, #0]
 8003b5a:	685b      	ldreq	r3, [r3, #4]
 8003b5c:	1809      	addeq	r1, r1, r0
 8003b5e:	6021      	streq	r1, [r4, #0]
 8003b60:	e7ed      	b.n	8003b3e <_free_r+0x1e>
 8003b62:	461a      	mov	r2, r3
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	b10b      	cbz	r3, 8003b6c <_free_r+0x4c>
 8003b68:	42a3      	cmp	r3, r4
 8003b6a:	d9fa      	bls.n	8003b62 <_free_r+0x42>
 8003b6c:	6811      	ldr	r1, [r2, #0]
 8003b6e:	1850      	adds	r0, r2, r1
 8003b70:	42a0      	cmp	r0, r4
 8003b72:	d10b      	bne.n	8003b8c <_free_r+0x6c>
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	4401      	add	r1, r0
 8003b78:	1850      	adds	r0, r2, r1
 8003b7a:	4283      	cmp	r3, r0
 8003b7c:	6011      	str	r1, [r2, #0]
 8003b7e:	d1e0      	bne.n	8003b42 <_free_r+0x22>
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	6053      	str	r3, [r2, #4]
 8003b86:	4408      	add	r0, r1
 8003b88:	6010      	str	r0, [r2, #0]
 8003b8a:	e7da      	b.n	8003b42 <_free_r+0x22>
 8003b8c:	d902      	bls.n	8003b94 <_free_r+0x74>
 8003b8e:	230c      	movs	r3, #12
 8003b90:	602b      	str	r3, [r5, #0]
 8003b92:	e7d6      	b.n	8003b42 <_free_r+0x22>
 8003b94:	6820      	ldr	r0, [r4, #0]
 8003b96:	1821      	adds	r1, r4, r0
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	bf04      	itt	eq
 8003b9c:	6819      	ldreq	r1, [r3, #0]
 8003b9e:	685b      	ldreq	r3, [r3, #4]
 8003ba0:	6063      	str	r3, [r4, #4]
 8003ba2:	bf04      	itt	eq
 8003ba4:	1809      	addeq	r1, r1, r0
 8003ba6:	6021      	streq	r1, [r4, #0]
 8003ba8:	6054      	str	r4, [r2, #4]
 8003baa:	e7ca      	b.n	8003b42 <_free_r+0x22>
 8003bac:	bd38      	pop	{r3, r4, r5, pc}
 8003bae:	bf00      	nop
 8003bb0:	200002a8 	.word	0x200002a8

08003bb4 <sbrk_aligned>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8003bf4 <sbrk_aligned+0x40>)
 8003bb8:	460c      	mov	r4, r1
 8003bba:	6831      	ldr	r1, [r6, #0]
 8003bbc:	4605      	mov	r5, r0
 8003bbe:	b911      	cbnz	r1, 8003bc6 <sbrk_aligned+0x12>
 8003bc0:	f000 fcb6 	bl	8004530 <_sbrk_r>
 8003bc4:	6030      	str	r0, [r6, #0]
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f000 fcb1 	bl	8004530 <_sbrk_r>
 8003bce:	1c43      	adds	r3, r0, #1
 8003bd0:	d103      	bne.n	8003bda <sbrk_aligned+0x26>
 8003bd2:	f04f 34ff 	mov.w	r4, #4294967295
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	bd70      	pop	{r4, r5, r6, pc}
 8003bda:	1cc4      	adds	r4, r0, #3
 8003bdc:	f024 0403 	bic.w	r4, r4, #3
 8003be0:	42a0      	cmp	r0, r4
 8003be2:	d0f8      	beq.n	8003bd6 <sbrk_aligned+0x22>
 8003be4:	1a21      	subs	r1, r4, r0
 8003be6:	4628      	mov	r0, r5
 8003be8:	f000 fca2 	bl	8004530 <_sbrk_r>
 8003bec:	3001      	adds	r0, #1
 8003bee:	d1f2      	bne.n	8003bd6 <sbrk_aligned+0x22>
 8003bf0:	e7ef      	b.n	8003bd2 <sbrk_aligned+0x1e>
 8003bf2:	bf00      	nop
 8003bf4:	200002a4 	.word	0x200002a4

08003bf8 <_malloc_r>:
 8003bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bfc:	1ccd      	adds	r5, r1, #3
 8003bfe:	f025 0503 	bic.w	r5, r5, #3
 8003c02:	3508      	adds	r5, #8
 8003c04:	2d0c      	cmp	r5, #12
 8003c06:	bf38      	it	cc
 8003c08:	250c      	movcc	r5, #12
 8003c0a:	2d00      	cmp	r5, #0
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	db01      	blt.n	8003c14 <_malloc_r+0x1c>
 8003c10:	42a9      	cmp	r1, r5
 8003c12:	d904      	bls.n	8003c1e <_malloc_r+0x26>
 8003c14:	230c      	movs	r3, #12
 8003c16:	6033      	str	r3, [r6, #0]
 8003c18:	2000      	movs	r0, #0
 8003c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cf4 <_malloc_r+0xfc>
 8003c22:	f000 f869 	bl	8003cf8 <__malloc_lock>
 8003c26:	f8d8 3000 	ldr.w	r3, [r8]
 8003c2a:	461c      	mov	r4, r3
 8003c2c:	bb44      	cbnz	r4, 8003c80 <_malloc_r+0x88>
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4630      	mov	r0, r6
 8003c32:	f7ff ffbf 	bl	8003bb4 <sbrk_aligned>
 8003c36:	1c43      	adds	r3, r0, #1
 8003c38:	4604      	mov	r4, r0
 8003c3a:	d158      	bne.n	8003cee <_malloc_r+0xf6>
 8003c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8003c40:	4627      	mov	r7, r4
 8003c42:	2f00      	cmp	r7, #0
 8003c44:	d143      	bne.n	8003cce <_malloc_r+0xd6>
 8003c46:	2c00      	cmp	r4, #0
 8003c48:	d04b      	beq.n	8003ce2 <_malloc_r+0xea>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	4639      	mov	r1, r7
 8003c4e:	4630      	mov	r0, r6
 8003c50:	eb04 0903 	add.w	r9, r4, r3
 8003c54:	f000 fc6c 	bl	8004530 <_sbrk_r>
 8003c58:	4581      	cmp	r9, r0
 8003c5a:	d142      	bne.n	8003ce2 <_malloc_r+0xea>
 8003c5c:	6821      	ldr	r1, [r4, #0]
 8003c5e:	1a6d      	subs	r5, r5, r1
 8003c60:	4629      	mov	r1, r5
 8003c62:	4630      	mov	r0, r6
 8003c64:	f7ff ffa6 	bl	8003bb4 <sbrk_aligned>
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d03a      	beq.n	8003ce2 <_malloc_r+0xea>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	442b      	add	r3, r5
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	f8d8 3000 	ldr.w	r3, [r8]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	bb62      	cbnz	r2, 8003cd4 <_malloc_r+0xdc>
 8003c7a:	f8c8 7000 	str.w	r7, [r8]
 8003c7e:	e00f      	b.n	8003ca0 <_malloc_r+0xa8>
 8003c80:	6822      	ldr	r2, [r4, #0]
 8003c82:	1b52      	subs	r2, r2, r5
 8003c84:	d420      	bmi.n	8003cc8 <_malloc_r+0xd0>
 8003c86:	2a0b      	cmp	r2, #11
 8003c88:	d917      	bls.n	8003cba <_malloc_r+0xc2>
 8003c8a:	1961      	adds	r1, r4, r5
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	6025      	str	r5, [r4, #0]
 8003c90:	bf18      	it	ne
 8003c92:	6059      	strne	r1, [r3, #4]
 8003c94:	6863      	ldr	r3, [r4, #4]
 8003c96:	bf08      	it	eq
 8003c98:	f8c8 1000 	streq.w	r1, [r8]
 8003c9c:	5162      	str	r2, [r4, r5]
 8003c9e:	604b      	str	r3, [r1, #4]
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f000 f82f 	bl	8003d04 <__malloc_unlock>
 8003ca6:	f104 000b 	add.w	r0, r4, #11
 8003caa:	1d23      	adds	r3, r4, #4
 8003cac:	f020 0007 	bic.w	r0, r0, #7
 8003cb0:	1ac2      	subs	r2, r0, r3
 8003cb2:	bf1c      	itt	ne
 8003cb4:	1a1b      	subne	r3, r3, r0
 8003cb6:	50a3      	strne	r3, [r4, r2]
 8003cb8:	e7af      	b.n	8003c1a <_malloc_r+0x22>
 8003cba:	6862      	ldr	r2, [r4, #4]
 8003cbc:	42a3      	cmp	r3, r4
 8003cbe:	bf0c      	ite	eq
 8003cc0:	f8c8 2000 	streq.w	r2, [r8]
 8003cc4:	605a      	strne	r2, [r3, #4]
 8003cc6:	e7eb      	b.n	8003ca0 <_malloc_r+0xa8>
 8003cc8:	4623      	mov	r3, r4
 8003cca:	6864      	ldr	r4, [r4, #4]
 8003ccc:	e7ae      	b.n	8003c2c <_malloc_r+0x34>
 8003cce:	463c      	mov	r4, r7
 8003cd0:	687f      	ldr	r7, [r7, #4]
 8003cd2:	e7b6      	b.n	8003c42 <_malloc_r+0x4a>
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	42a3      	cmp	r3, r4
 8003cda:	d1fb      	bne.n	8003cd4 <_malloc_r+0xdc>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	6053      	str	r3, [r2, #4]
 8003ce0:	e7de      	b.n	8003ca0 <_malloc_r+0xa8>
 8003ce2:	230c      	movs	r3, #12
 8003ce4:	6033      	str	r3, [r6, #0]
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f000 f80c 	bl	8003d04 <__malloc_unlock>
 8003cec:	e794      	b.n	8003c18 <_malloc_r+0x20>
 8003cee:	6005      	str	r5, [r0, #0]
 8003cf0:	e7d6      	b.n	8003ca0 <_malloc_r+0xa8>
 8003cf2:	bf00      	nop
 8003cf4:	200002a8 	.word	0x200002a8

08003cf8 <__malloc_lock>:
 8003cf8:	4801      	ldr	r0, [pc, #4]	@ (8003d00 <__malloc_lock+0x8>)
 8003cfa:	f7ff bf0e 	b.w	8003b1a <__retarget_lock_acquire_recursive>
 8003cfe:	bf00      	nop
 8003d00:	200002a0 	.word	0x200002a0

08003d04 <__malloc_unlock>:
 8003d04:	4801      	ldr	r0, [pc, #4]	@ (8003d0c <__malloc_unlock+0x8>)
 8003d06:	f7ff bf09 	b.w	8003b1c <__retarget_lock_release_recursive>
 8003d0a:	bf00      	nop
 8003d0c:	200002a0 	.word	0x200002a0

08003d10 <__sfputc_r>:
 8003d10:	6893      	ldr	r3, [r2, #8]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	b410      	push	{r4}
 8003d18:	6093      	str	r3, [r2, #8]
 8003d1a:	da08      	bge.n	8003d2e <__sfputc_r+0x1e>
 8003d1c:	6994      	ldr	r4, [r2, #24]
 8003d1e:	42a3      	cmp	r3, r4
 8003d20:	db01      	blt.n	8003d26 <__sfputc_r+0x16>
 8003d22:	290a      	cmp	r1, #10
 8003d24:	d103      	bne.n	8003d2e <__sfputc_r+0x1e>
 8003d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d2a:	f000 bb6d 	b.w	8004408 <__swbuf_r>
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	1c58      	adds	r0, r3, #1
 8003d32:	6010      	str	r0, [r2, #0]
 8003d34:	7019      	strb	r1, [r3, #0]
 8003d36:	4608      	mov	r0, r1
 8003d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <__sfputs_r>:
 8003d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d40:	4606      	mov	r6, r0
 8003d42:	460f      	mov	r7, r1
 8003d44:	4614      	mov	r4, r2
 8003d46:	18d5      	adds	r5, r2, r3
 8003d48:	42ac      	cmp	r4, r5
 8003d4a:	d101      	bne.n	8003d50 <__sfputs_r+0x12>
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	e007      	b.n	8003d60 <__sfputs_r+0x22>
 8003d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d54:	463a      	mov	r2, r7
 8003d56:	4630      	mov	r0, r6
 8003d58:	f7ff ffda 	bl	8003d10 <__sfputc_r>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d1f3      	bne.n	8003d48 <__sfputs_r+0xa>
 8003d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d64 <_vfiprintf_r>:
 8003d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d68:	460d      	mov	r5, r1
 8003d6a:	b09d      	sub	sp, #116	@ 0x74
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	4698      	mov	r8, r3
 8003d70:	4606      	mov	r6, r0
 8003d72:	b118      	cbz	r0, 8003d7c <_vfiprintf_r+0x18>
 8003d74:	6a03      	ldr	r3, [r0, #32]
 8003d76:	b90b      	cbnz	r3, 8003d7c <_vfiprintf_r+0x18>
 8003d78:	f7ff fdca 	bl	8003910 <__sinit>
 8003d7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d7e:	07d9      	lsls	r1, r3, #31
 8003d80:	d405      	bmi.n	8003d8e <_vfiprintf_r+0x2a>
 8003d82:	89ab      	ldrh	r3, [r5, #12]
 8003d84:	059a      	lsls	r2, r3, #22
 8003d86:	d402      	bmi.n	8003d8e <_vfiprintf_r+0x2a>
 8003d88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d8a:	f7ff fec6 	bl	8003b1a <__retarget_lock_acquire_recursive>
 8003d8e:	89ab      	ldrh	r3, [r5, #12]
 8003d90:	071b      	lsls	r3, r3, #28
 8003d92:	d501      	bpl.n	8003d98 <_vfiprintf_r+0x34>
 8003d94:	692b      	ldr	r3, [r5, #16]
 8003d96:	b99b      	cbnz	r3, 8003dc0 <_vfiprintf_r+0x5c>
 8003d98:	4629      	mov	r1, r5
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	f000 fb72 	bl	8004484 <__swsetup_r>
 8003da0:	b170      	cbz	r0, 8003dc0 <_vfiprintf_r+0x5c>
 8003da2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003da4:	07dc      	lsls	r4, r3, #31
 8003da6:	d504      	bpl.n	8003db2 <_vfiprintf_r+0x4e>
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	b01d      	add	sp, #116	@ 0x74
 8003dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db2:	89ab      	ldrh	r3, [r5, #12]
 8003db4:	0598      	lsls	r0, r3, #22
 8003db6:	d4f7      	bmi.n	8003da8 <_vfiprintf_r+0x44>
 8003db8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dba:	f7ff feaf 	bl	8003b1c <__retarget_lock_release_recursive>
 8003dbe:	e7f3      	b.n	8003da8 <_vfiprintf_r+0x44>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dc4:	2320      	movs	r3, #32
 8003dc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dce:	2330      	movs	r3, #48	@ 0x30
 8003dd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003f80 <_vfiprintf_r+0x21c>
 8003dd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dd8:	f04f 0901 	mov.w	r9, #1
 8003ddc:	4623      	mov	r3, r4
 8003dde:	469a      	mov	sl, r3
 8003de0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003de4:	b10a      	cbz	r2, 8003dea <_vfiprintf_r+0x86>
 8003de6:	2a25      	cmp	r2, #37	@ 0x25
 8003de8:	d1f9      	bne.n	8003dde <_vfiprintf_r+0x7a>
 8003dea:	ebba 0b04 	subs.w	fp, sl, r4
 8003dee:	d00b      	beq.n	8003e08 <_vfiprintf_r+0xa4>
 8003df0:	465b      	mov	r3, fp
 8003df2:	4622      	mov	r2, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	4630      	mov	r0, r6
 8003df8:	f7ff ffa1 	bl	8003d3e <__sfputs_r>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	f000 80a7 	beq.w	8003f50 <_vfiprintf_r+0x1ec>
 8003e02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e04:	445a      	add	r2, fp
 8003e06:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e08:	f89a 3000 	ldrb.w	r3, [sl]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 809f 	beq.w	8003f50 <_vfiprintf_r+0x1ec>
 8003e12:	2300      	movs	r3, #0
 8003e14:	f04f 32ff 	mov.w	r2, #4294967295
 8003e18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e1c:	f10a 0a01 	add.w	sl, sl, #1
 8003e20:	9304      	str	r3, [sp, #16]
 8003e22:	9307      	str	r3, [sp, #28]
 8003e24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e28:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e2a:	4654      	mov	r4, sl
 8003e2c:	2205      	movs	r2, #5
 8003e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e32:	4853      	ldr	r0, [pc, #332]	@ (8003f80 <_vfiprintf_r+0x21c>)
 8003e34:	f7fc f9cc 	bl	80001d0 <memchr>
 8003e38:	9a04      	ldr	r2, [sp, #16]
 8003e3a:	b9d8      	cbnz	r0, 8003e74 <_vfiprintf_r+0x110>
 8003e3c:	06d1      	lsls	r1, r2, #27
 8003e3e:	bf44      	itt	mi
 8003e40:	2320      	movmi	r3, #32
 8003e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e46:	0713      	lsls	r3, r2, #28
 8003e48:	bf44      	itt	mi
 8003e4a:	232b      	movmi	r3, #43	@ 0x2b
 8003e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e50:	f89a 3000 	ldrb.w	r3, [sl]
 8003e54:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e56:	d015      	beq.n	8003e84 <_vfiprintf_r+0x120>
 8003e58:	9a07      	ldr	r2, [sp, #28]
 8003e5a:	4654      	mov	r4, sl
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f04f 0c0a 	mov.w	ip, #10
 8003e62:	4621      	mov	r1, r4
 8003e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e68:	3b30      	subs	r3, #48	@ 0x30
 8003e6a:	2b09      	cmp	r3, #9
 8003e6c:	d94b      	bls.n	8003f06 <_vfiprintf_r+0x1a2>
 8003e6e:	b1b0      	cbz	r0, 8003e9e <_vfiprintf_r+0x13a>
 8003e70:	9207      	str	r2, [sp, #28]
 8003e72:	e014      	b.n	8003e9e <_vfiprintf_r+0x13a>
 8003e74:	eba0 0308 	sub.w	r3, r0, r8
 8003e78:	fa09 f303 	lsl.w	r3, r9, r3
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	9304      	str	r3, [sp, #16]
 8003e80:	46a2      	mov	sl, r4
 8003e82:	e7d2      	b.n	8003e2a <_vfiprintf_r+0xc6>
 8003e84:	9b03      	ldr	r3, [sp, #12]
 8003e86:	1d19      	adds	r1, r3, #4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	9103      	str	r1, [sp, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bfbb      	ittet	lt
 8003e90:	425b      	neglt	r3, r3
 8003e92:	f042 0202 	orrlt.w	r2, r2, #2
 8003e96:	9307      	strge	r3, [sp, #28]
 8003e98:	9307      	strlt	r3, [sp, #28]
 8003e9a:	bfb8      	it	lt
 8003e9c:	9204      	strlt	r2, [sp, #16]
 8003e9e:	7823      	ldrb	r3, [r4, #0]
 8003ea0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ea2:	d10a      	bne.n	8003eba <_vfiprintf_r+0x156>
 8003ea4:	7863      	ldrb	r3, [r4, #1]
 8003ea6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ea8:	d132      	bne.n	8003f10 <_vfiprintf_r+0x1ac>
 8003eaa:	9b03      	ldr	r3, [sp, #12]
 8003eac:	1d1a      	adds	r2, r3, #4
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	9203      	str	r2, [sp, #12]
 8003eb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003eb6:	3402      	adds	r4, #2
 8003eb8:	9305      	str	r3, [sp, #20]
 8003eba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003f90 <_vfiprintf_r+0x22c>
 8003ebe:	7821      	ldrb	r1, [r4, #0]
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	4650      	mov	r0, sl
 8003ec4:	f7fc f984 	bl	80001d0 <memchr>
 8003ec8:	b138      	cbz	r0, 8003eda <_vfiprintf_r+0x176>
 8003eca:	9b04      	ldr	r3, [sp, #16]
 8003ecc:	eba0 000a 	sub.w	r0, r0, sl
 8003ed0:	2240      	movs	r2, #64	@ 0x40
 8003ed2:	4082      	lsls	r2, r0
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	3401      	adds	r4, #1
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ede:	4829      	ldr	r0, [pc, #164]	@ (8003f84 <_vfiprintf_r+0x220>)
 8003ee0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ee4:	2206      	movs	r2, #6
 8003ee6:	f7fc f973 	bl	80001d0 <memchr>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d03f      	beq.n	8003f6e <_vfiprintf_r+0x20a>
 8003eee:	4b26      	ldr	r3, [pc, #152]	@ (8003f88 <_vfiprintf_r+0x224>)
 8003ef0:	bb1b      	cbnz	r3, 8003f3a <_vfiprintf_r+0x1d6>
 8003ef2:	9b03      	ldr	r3, [sp, #12]
 8003ef4:	3307      	adds	r3, #7
 8003ef6:	f023 0307 	bic.w	r3, r3, #7
 8003efa:	3308      	adds	r3, #8
 8003efc:	9303      	str	r3, [sp, #12]
 8003efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f00:	443b      	add	r3, r7
 8003f02:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f04:	e76a      	b.n	8003ddc <_vfiprintf_r+0x78>
 8003f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	e7a8      	b.n	8003e62 <_vfiprintf_r+0xfe>
 8003f10:	2300      	movs	r3, #0
 8003f12:	3401      	adds	r4, #1
 8003f14:	9305      	str	r3, [sp, #20]
 8003f16:	4619      	mov	r1, r3
 8003f18:	f04f 0c0a 	mov.w	ip, #10
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f22:	3a30      	subs	r2, #48	@ 0x30
 8003f24:	2a09      	cmp	r2, #9
 8003f26:	d903      	bls.n	8003f30 <_vfiprintf_r+0x1cc>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0c6      	beq.n	8003eba <_vfiprintf_r+0x156>
 8003f2c:	9105      	str	r1, [sp, #20]
 8003f2e:	e7c4      	b.n	8003eba <_vfiprintf_r+0x156>
 8003f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f34:	4604      	mov	r4, r0
 8003f36:	2301      	movs	r3, #1
 8003f38:	e7f0      	b.n	8003f1c <_vfiprintf_r+0x1b8>
 8003f3a:	ab03      	add	r3, sp, #12
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	462a      	mov	r2, r5
 8003f40:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <_vfiprintf_r+0x228>)
 8003f42:	a904      	add	r1, sp, #16
 8003f44:	4630      	mov	r0, r6
 8003f46:	f3af 8000 	nop.w
 8003f4a:	4607      	mov	r7, r0
 8003f4c:	1c78      	adds	r0, r7, #1
 8003f4e:	d1d6      	bne.n	8003efe <_vfiprintf_r+0x19a>
 8003f50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f52:	07d9      	lsls	r1, r3, #31
 8003f54:	d405      	bmi.n	8003f62 <_vfiprintf_r+0x1fe>
 8003f56:	89ab      	ldrh	r3, [r5, #12]
 8003f58:	059a      	lsls	r2, r3, #22
 8003f5a:	d402      	bmi.n	8003f62 <_vfiprintf_r+0x1fe>
 8003f5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f5e:	f7ff fddd 	bl	8003b1c <__retarget_lock_release_recursive>
 8003f62:	89ab      	ldrh	r3, [r5, #12]
 8003f64:	065b      	lsls	r3, r3, #25
 8003f66:	f53f af1f 	bmi.w	8003da8 <_vfiprintf_r+0x44>
 8003f6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f6c:	e71e      	b.n	8003dac <_vfiprintf_r+0x48>
 8003f6e:	ab03      	add	r3, sp, #12
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	462a      	mov	r2, r5
 8003f74:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <_vfiprintf_r+0x228>)
 8003f76:	a904      	add	r1, sp, #16
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f000 f879 	bl	8004070 <_printf_i>
 8003f7e:	e7e4      	b.n	8003f4a <_vfiprintf_r+0x1e6>
 8003f80:	080046c4 	.word	0x080046c4
 8003f84:	080046ce 	.word	0x080046ce
 8003f88:	00000000 	.word	0x00000000
 8003f8c:	08003d3f 	.word	0x08003d3f
 8003f90:	080046ca 	.word	0x080046ca

08003f94 <_printf_common>:
 8003f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f98:	4616      	mov	r6, r2
 8003f9a:	4698      	mov	r8, r3
 8003f9c:	688a      	ldr	r2, [r1, #8]
 8003f9e:	690b      	ldr	r3, [r1, #16]
 8003fa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	bfb8      	it	lt
 8003fa8:	4613      	movlt	r3, r2
 8003faa:	6033      	str	r3, [r6, #0]
 8003fac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	b10a      	cbz	r2, 8003fba <_printf_common+0x26>
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	6033      	str	r3, [r6, #0]
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	0699      	lsls	r1, r3, #26
 8003fbe:	bf42      	ittt	mi
 8003fc0:	6833      	ldrmi	r3, [r6, #0]
 8003fc2:	3302      	addmi	r3, #2
 8003fc4:	6033      	strmi	r3, [r6, #0]
 8003fc6:	6825      	ldr	r5, [r4, #0]
 8003fc8:	f015 0506 	ands.w	r5, r5, #6
 8003fcc:	d106      	bne.n	8003fdc <_printf_common+0x48>
 8003fce:	f104 0a19 	add.w	sl, r4, #25
 8003fd2:	68e3      	ldr	r3, [r4, #12]
 8003fd4:	6832      	ldr	r2, [r6, #0]
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	42ab      	cmp	r3, r5
 8003fda:	dc26      	bgt.n	800402a <_printf_common+0x96>
 8003fdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fe0:	6822      	ldr	r2, [r4, #0]
 8003fe2:	3b00      	subs	r3, #0
 8003fe4:	bf18      	it	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	0692      	lsls	r2, r2, #26
 8003fea:	d42b      	bmi.n	8004044 <_printf_common+0xb0>
 8003fec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	47c8      	blx	r9
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d01e      	beq.n	8004038 <_printf_common+0xa4>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	6922      	ldr	r2, [r4, #16]
 8003ffe:	f003 0306 	and.w	r3, r3, #6
 8004002:	2b04      	cmp	r3, #4
 8004004:	bf02      	ittt	eq
 8004006:	68e5      	ldreq	r5, [r4, #12]
 8004008:	6833      	ldreq	r3, [r6, #0]
 800400a:	1aed      	subeq	r5, r5, r3
 800400c:	68a3      	ldr	r3, [r4, #8]
 800400e:	bf0c      	ite	eq
 8004010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004014:	2500      	movne	r5, #0
 8004016:	4293      	cmp	r3, r2
 8004018:	bfc4      	itt	gt
 800401a:	1a9b      	subgt	r3, r3, r2
 800401c:	18ed      	addgt	r5, r5, r3
 800401e:	2600      	movs	r6, #0
 8004020:	341a      	adds	r4, #26
 8004022:	42b5      	cmp	r5, r6
 8004024:	d11a      	bne.n	800405c <_printf_common+0xc8>
 8004026:	2000      	movs	r0, #0
 8004028:	e008      	b.n	800403c <_printf_common+0xa8>
 800402a:	2301      	movs	r3, #1
 800402c:	4652      	mov	r2, sl
 800402e:	4641      	mov	r1, r8
 8004030:	4638      	mov	r0, r7
 8004032:	47c8      	blx	r9
 8004034:	3001      	adds	r0, #1
 8004036:	d103      	bne.n	8004040 <_printf_common+0xac>
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
 800403c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004040:	3501      	adds	r5, #1
 8004042:	e7c6      	b.n	8003fd2 <_printf_common+0x3e>
 8004044:	18e1      	adds	r1, r4, r3
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	2030      	movs	r0, #48	@ 0x30
 800404a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800404e:	4422      	add	r2, r4
 8004050:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004054:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004058:	3302      	adds	r3, #2
 800405a:	e7c7      	b.n	8003fec <_printf_common+0x58>
 800405c:	2301      	movs	r3, #1
 800405e:	4622      	mov	r2, r4
 8004060:	4641      	mov	r1, r8
 8004062:	4638      	mov	r0, r7
 8004064:	47c8      	blx	r9
 8004066:	3001      	adds	r0, #1
 8004068:	d0e6      	beq.n	8004038 <_printf_common+0xa4>
 800406a:	3601      	adds	r6, #1
 800406c:	e7d9      	b.n	8004022 <_printf_common+0x8e>
	...

08004070 <_printf_i>:
 8004070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	7e0f      	ldrb	r7, [r1, #24]
 8004076:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004078:	2f78      	cmp	r7, #120	@ 0x78
 800407a:	4691      	mov	r9, r2
 800407c:	4680      	mov	r8, r0
 800407e:	460c      	mov	r4, r1
 8004080:	469a      	mov	sl, r3
 8004082:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004086:	d807      	bhi.n	8004098 <_printf_i+0x28>
 8004088:	2f62      	cmp	r7, #98	@ 0x62
 800408a:	d80a      	bhi.n	80040a2 <_printf_i+0x32>
 800408c:	2f00      	cmp	r7, #0
 800408e:	f000 80d2 	beq.w	8004236 <_printf_i+0x1c6>
 8004092:	2f58      	cmp	r7, #88	@ 0x58
 8004094:	f000 80b9 	beq.w	800420a <_printf_i+0x19a>
 8004098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800409c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040a0:	e03a      	b.n	8004118 <_printf_i+0xa8>
 80040a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040a6:	2b15      	cmp	r3, #21
 80040a8:	d8f6      	bhi.n	8004098 <_printf_i+0x28>
 80040aa:	a101      	add	r1, pc, #4	@ (adr r1, 80040b0 <_printf_i+0x40>)
 80040ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040b0:	08004109 	.word	0x08004109
 80040b4:	0800411d 	.word	0x0800411d
 80040b8:	08004099 	.word	0x08004099
 80040bc:	08004099 	.word	0x08004099
 80040c0:	08004099 	.word	0x08004099
 80040c4:	08004099 	.word	0x08004099
 80040c8:	0800411d 	.word	0x0800411d
 80040cc:	08004099 	.word	0x08004099
 80040d0:	08004099 	.word	0x08004099
 80040d4:	08004099 	.word	0x08004099
 80040d8:	08004099 	.word	0x08004099
 80040dc:	0800421d 	.word	0x0800421d
 80040e0:	08004147 	.word	0x08004147
 80040e4:	080041d7 	.word	0x080041d7
 80040e8:	08004099 	.word	0x08004099
 80040ec:	08004099 	.word	0x08004099
 80040f0:	0800423f 	.word	0x0800423f
 80040f4:	08004099 	.word	0x08004099
 80040f8:	08004147 	.word	0x08004147
 80040fc:	08004099 	.word	0x08004099
 8004100:	08004099 	.word	0x08004099
 8004104:	080041df 	.word	0x080041df
 8004108:	6833      	ldr	r3, [r6, #0]
 800410a:	1d1a      	adds	r2, r3, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6032      	str	r2, [r6, #0]
 8004110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004114:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004118:	2301      	movs	r3, #1
 800411a:	e09d      	b.n	8004258 <_printf_i+0x1e8>
 800411c:	6833      	ldr	r3, [r6, #0]
 800411e:	6820      	ldr	r0, [r4, #0]
 8004120:	1d19      	adds	r1, r3, #4
 8004122:	6031      	str	r1, [r6, #0]
 8004124:	0606      	lsls	r6, r0, #24
 8004126:	d501      	bpl.n	800412c <_printf_i+0xbc>
 8004128:	681d      	ldr	r5, [r3, #0]
 800412a:	e003      	b.n	8004134 <_printf_i+0xc4>
 800412c:	0645      	lsls	r5, r0, #25
 800412e:	d5fb      	bpl.n	8004128 <_printf_i+0xb8>
 8004130:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004134:	2d00      	cmp	r5, #0
 8004136:	da03      	bge.n	8004140 <_printf_i+0xd0>
 8004138:	232d      	movs	r3, #45	@ 0x2d
 800413a:	426d      	negs	r5, r5
 800413c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004140:	4859      	ldr	r0, [pc, #356]	@ (80042a8 <_printf_i+0x238>)
 8004142:	230a      	movs	r3, #10
 8004144:	e011      	b.n	800416a <_printf_i+0xfa>
 8004146:	6821      	ldr	r1, [r4, #0]
 8004148:	6833      	ldr	r3, [r6, #0]
 800414a:	0608      	lsls	r0, r1, #24
 800414c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004150:	d402      	bmi.n	8004158 <_printf_i+0xe8>
 8004152:	0649      	lsls	r1, r1, #25
 8004154:	bf48      	it	mi
 8004156:	b2ad      	uxthmi	r5, r5
 8004158:	2f6f      	cmp	r7, #111	@ 0x6f
 800415a:	4853      	ldr	r0, [pc, #332]	@ (80042a8 <_printf_i+0x238>)
 800415c:	6033      	str	r3, [r6, #0]
 800415e:	bf14      	ite	ne
 8004160:	230a      	movne	r3, #10
 8004162:	2308      	moveq	r3, #8
 8004164:	2100      	movs	r1, #0
 8004166:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800416a:	6866      	ldr	r6, [r4, #4]
 800416c:	60a6      	str	r6, [r4, #8]
 800416e:	2e00      	cmp	r6, #0
 8004170:	bfa2      	ittt	ge
 8004172:	6821      	ldrge	r1, [r4, #0]
 8004174:	f021 0104 	bicge.w	r1, r1, #4
 8004178:	6021      	strge	r1, [r4, #0]
 800417a:	b90d      	cbnz	r5, 8004180 <_printf_i+0x110>
 800417c:	2e00      	cmp	r6, #0
 800417e:	d04b      	beq.n	8004218 <_printf_i+0x1a8>
 8004180:	4616      	mov	r6, r2
 8004182:	fbb5 f1f3 	udiv	r1, r5, r3
 8004186:	fb03 5711 	mls	r7, r3, r1, r5
 800418a:	5dc7      	ldrb	r7, [r0, r7]
 800418c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004190:	462f      	mov	r7, r5
 8004192:	42bb      	cmp	r3, r7
 8004194:	460d      	mov	r5, r1
 8004196:	d9f4      	bls.n	8004182 <_printf_i+0x112>
 8004198:	2b08      	cmp	r3, #8
 800419a:	d10b      	bne.n	80041b4 <_printf_i+0x144>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	07df      	lsls	r7, r3, #31
 80041a0:	d508      	bpl.n	80041b4 <_printf_i+0x144>
 80041a2:	6923      	ldr	r3, [r4, #16]
 80041a4:	6861      	ldr	r1, [r4, #4]
 80041a6:	4299      	cmp	r1, r3
 80041a8:	bfde      	ittt	le
 80041aa:	2330      	movle	r3, #48	@ 0x30
 80041ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041b4:	1b92      	subs	r2, r2, r6
 80041b6:	6122      	str	r2, [r4, #16]
 80041b8:	f8cd a000 	str.w	sl, [sp]
 80041bc:	464b      	mov	r3, r9
 80041be:	aa03      	add	r2, sp, #12
 80041c0:	4621      	mov	r1, r4
 80041c2:	4640      	mov	r0, r8
 80041c4:	f7ff fee6 	bl	8003f94 <_printf_common>
 80041c8:	3001      	adds	r0, #1
 80041ca:	d14a      	bne.n	8004262 <_printf_i+0x1f2>
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	b004      	add	sp, #16
 80041d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	f043 0320 	orr.w	r3, r3, #32
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	4833      	ldr	r0, [pc, #204]	@ (80042ac <_printf_i+0x23c>)
 80041e0:	2778      	movs	r7, #120	@ 0x78
 80041e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	6831      	ldr	r1, [r6, #0]
 80041ea:	061f      	lsls	r7, r3, #24
 80041ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80041f0:	d402      	bmi.n	80041f8 <_printf_i+0x188>
 80041f2:	065f      	lsls	r7, r3, #25
 80041f4:	bf48      	it	mi
 80041f6:	b2ad      	uxthmi	r5, r5
 80041f8:	6031      	str	r1, [r6, #0]
 80041fa:	07d9      	lsls	r1, r3, #31
 80041fc:	bf44      	itt	mi
 80041fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004202:	6023      	strmi	r3, [r4, #0]
 8004204:	b11d      	cbz	r5, 800420e <_printf_i+0x19e>
 8004206:	2310      	movs	r3, #16
 8004208:	e7ac      	b.n	8004164 <_printf_i+0xf4>
 800420a:	4827      	ldr	r0, [pc, #156]	@ (80042a8 <_printf_i+0x238>)
 800420c:	e7e9      	b.n	80041e2 <_printf_i+0x172>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	f023 0320 	bic.w	r3, r3, #32
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	e7f6      	b.n	8004206 <_printf_i+0x196>
 8004218:	4616      	mov	r6, r2
 800421a:	e7bd      	b.n	8004198 <_printf_i+0x128>
 800421c:	6833      	ldr	r3, [r6, #0]
 800421e:	6825      	ldr	r5, [r4, #0]
 8004220:	6961      	ldr	r1, [r4, #20]
 8004222:	1d18      	adds	r0, r3, #4
 8004224:	6030      	str	r0, [r6, #0]
 8004226:	062e      	lsls	r6, r5, #24
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	d501      	bpl.n	8004230 <_printf_i+0x1c0>
 800422c:	6019      	str	r1, [r3, #0]
 800422e:	e002      	b.n	8004236 <_printf_i+0x1c6>
 8004230:	0668      	lsls	r0, r5, #25
 8004232:	d5fb      	bpl.n	800422c <_printf_i+0x1bc>
 8004234:	8019      	strh	r1, [r3, #0]
 8004236:	2300      	movs	r3, #0
 8004238:	6123      	str	r3, [r4, #16]
 800423a:	4616      	mov	r6, r2
 800423c:	e7bc      	b.n	80041b8 <_printf_i+0x148>
 800423e:	6833      	ldr	r3, [r6, #0]
 8004240:	1d1a      	adds	r2, r3, #4
 8004242:	6032      	str	r2, [r6, #0]
 8004244:	681e      	ldr	r6, [r3, #0]
 8004246:	6862      	ldr	r2, [r4, #4]
 8004248:	2100      	movs	r1, #0
 800424a:	4630      	mov	r0, r6
 800424c:	f7fb ffc0 	bl	80001d0 <memchr>
 8004250:	b108      	cbz	r0, 8004256 <_printf_i+0x1e6>
 8004252:	1b80      	subs	r0, r0, r6
 8004254:	6060      	str	r0, [r4, #4]
 8004256:	6863      	ldr	r3, [r4, #4]
 8004258:	6123      	str	r3, [r4, #16]
 800425a:	2300      	movs	r3, #0
 800425c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004260:	e7aa      	b.n	80041b8 <_printf_i+0x148>
 8004262:	6923      	ldr	r3, [r4, #16]
 8004264:	4632      	mov	r2, r6
 8004266:	4649      	mov	r1, r9
 8004268:	4640      	mov	r0, r8
 800426a:	47d0      	blx	sl
 800426c:	3001      	adds	r0, #1
 800426e:	d0ad      	beq.n	80041cc <_printf_i+0x15c>
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	079b      	lsls	r3, r3, #30
 8004274:	d413      	bmi.n	800429e <_printf_i+0x22e>
 8004276:	68e0      	ldr	r0, [r4, #12]
 8004278:	9b03      	ldr	r3, [sp, #12]
 800427a:	4298      	cmp	r0, r3
 800427c:	bfb8      	it	lt
 800427e:	4618      	movlt	r0, r3
 8004280:	e7a6      	b.n	80041d0 <_printf_i+0x160>
 8004282:	2301      	movs	r3, #1
 8004284:	4632      	mov	r2, r6
 8004286:	4649      	mov	r1, r9
 8004288:	4640      	mov	r0, r8
 800428a:	47d0      	blx	sl
 800428c:	3001      	adds	r0, #1
 800428e:	d09d      	beq.n	80041cc <_printf_i+0x15c>
 8004290:	3501      	adds	r5, #1
 8004292:	68e3      	ldr	r3, [r4, #12]
 8004294:	9903      	ldr	r1, [sp, #12]
 8004296:	1a5b      	subs	r3, r3, r1
 8004298:	42ab      	cmp	r3, r5
 800429a:	dcf2      	bgt.n	8004282 <_printf_i+0x212>
 800429c:	e7eb      	b.n	8004276 <_printf_i+0x206>
 800429e:	2500      	movs	r5, #0
 80042a0:	f104 0619 	add.w	r6, r4, #25
 80042a4:	e7f5      	b.n	8004292 <_printf_i+0x222>
 80042a6:	bf00      	nop
 80042a8:	080046d5 	.word	0x080046d5
 80042ac:	080046e6 	.word	0x080046e6

080042b0 <__sflush_r>:
 80042b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b8:	0716      	lsls	r6, r2, #28
 80042ba:	4605      	mov	r5, r0
 80042bc:	460c      	mov	r4, r1
 80042be:	d454      	bmi.n	800436a <__sflush_r+0xba>
 80042c0:	684b      	ldr	r3, [r1, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	dc02      	bgt.n	80042cc <__sflush_r+0x1c>
 80042c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	dd48      	ble.n	800435e <__sflush_r+0xae>
 80042cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042ce:	2e00      	cmp	r6, #0
 80042d0:	d045      	beq.n	800435e <__sflush_r+0xae>
 80042d2:	2300      	movs	r3, #0
 80042d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042d8:	682f      	ldr	r7, [r5, #0]
 80042da:	6a21      	ldr	r1, [r4, #32]
 80042dc:	602b      	str	r3, [r5, #0]
 80042de:	d030      	beq.n	8004342 <__sflush_r+0x92>
 80042e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	0759      	lsls	r1, r3, #29
 80042e6:	d505      	bpl.n	80042f4 <__sflush_r+0x44>
 80042e8:	6863      	ldr	r3, [r4, #4]
 80042ea:	1ad2      	subs	r2, r2, r3
 80042ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80042ee:	b10b      	cbz	r3, 80042f4 <__sflush_r+0x44>
 80042f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042f2:	1ad2      	subs	r2, r2, r3
 80042f4:	2300      	movs	r3, #0
 80042f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042f8:	6a21      	ldr	r1, [r4, #32]
 80042fa:	4628      	mov	r0, r5
 80042fc:	47b0      	blx	r6
 80042fe:	1c43      	adds	r3, r0, #1
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	d106      	bne.n	8004312 <__sflush_r+0x62>
 8004304:	6829      	ldr	r1, [r5, #0]
 8004306:	291d      	cmp	r1, #29
 8004308:	d82b      	bhi.n	8004362 <__sflush_r+0xb2>
 800430a:	4a2a      	ldr	r2, [pc, #168]	@ (80043b4 <__sflush_r+0x104>)
 800430c:	410a      	asrs	r2, r1
 800430e:	07d6      	lsls	r6, r2, #31
 8004310:	d427      	bmi.n	8004362 <__sflush_r+0xb2>
 8004312:	2200      	movs	r2, #0
 8004314:	6062      	str	r2, [r4, #4]
 8004316:	04d9      	lsls	r1, r3, #19
 8004318:	6922      	ldr	r2, [r4, #16]
 800431a:	6022      	str	r2, [r4, #0]
 800431c:	d504      	bpl.n	8004328 <__sflush_r+0x78>
 800431e:	1c42      	adds	r2, r0, #1
 8004320:	d101      	bne.n	8004326 <__sflush_r+0x76>
 8004322:	682b      	ldr	r3, [r5, #0]
 8004324:	b903      	cbnz	r3, 8004328 <__sflush_r+0x78>
 8004326:	6560      	str	r0, [r4, #84]	@ 0x54
 8004328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800432a:	602f      	str	r7, [r5, #0]
 800432c:	b1b9      	cbz	r1, 800435e <__sflush_r+0xae>
 800432e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004332:	4299      	cmp	r1, r3
 8004334:	d002      	beq.n	800433c <__sflush_r+0x8c>
 8004336:	4628      	mov	r0, r5
 8004338:	f7ff fbf2 	bl	8003b20 <_free_r>
 800433c:	2300      	movs	r3, #0
 800433e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004340:	e00d      	b.n	800435e <__sflush_r+0xae>
 8004342:	2301      	movs	r3, #1
 8004344:	4628      	mov	r0, r5
 8004346:	47b0      	blx	r6
 8004348:	4602      	mov	r2, r0
 800434a:	1c50      	adds	r0, r2, #1
 800434c:	d1c9      	bne.n	80042e2 <__sflush_r+0x32>
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0c6      	beq.n	80042e2 <__sflush_r+0x32>
 8004354:	2b1d      	cmp	r3, #29
 8004356:	d001      	beq.n	800435c <__sflush_r+0xac>
 8004358:	2b16      	cmp	r3, #22
 800435a:	d11e      	bne.n	800439a <__sflush_r+0xea>
 800435c:	602f      	str	r7, [r5, #0]
 800435e:	2000      	movs	r0, #0
 8004360:	e022      	b.n	80043a8 <__sflush_r+0xf8>
 8004362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004366:	b21b      	sxth	r3, r3
 8004368:	e01b      	b.n	80043a2 <__sflush_r+0xf2>
 800436a:	690f      	ldr	r7, [r1, #16]
 800436c:	2f00      	cmp	r7, #0
 800436e:	d0f6      	beq.n	800435e <__sflush_r+0xae>
 8004370:	0793      	lsls	r3, r2, #30
 8004372:	680e      	ldr	r6, [r1, #0]
 8004374:	bf08      	it	eq
 8004376:	694b      	ldreq	r3, [r1, #20]
 8004378:	600f      	str	r7, [r1, #0]
 800437a:	bf18      	it	ne
 800437c:	2300      	movne	r3, #0
 800437e:	eba6 0807 	sub.w	r8, r6, r7
 8004382:	608b      	str	r3, [r1, #8]
 8004384:	f1b8 0f00 	cmp.w	r8, #0
 8004388:	dde9      	ble.n	800435e <__sflush_r+0xae>
 800438a:	6a21      	ldr	r1, [r4, #32]
 800438c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800438e:	4643      	mov	r3, r8
 8004390:	463a      	mov	r2, r7
 8004392:	4628      	mov	r0, r5
 8004394:	47b0      	blx	r6
 8004396:	2800      	cmp	r0, #0
 8004398:	dc08      	bgt.n	80043ac <__sflush_r+0xfc>
 800439a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800439e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043a2:	81a3      	strh	r3, [r4, #12]
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043ac:	4407      	add	r7, r0
 80043ae:	eba8 0800 	sub.w	r8, r8, r0
 80043b2:	e7e7      	b.n	8004384 <__sflush_r+0xd4>
 80043b4:	dfbffffe 	.word	0xdfbffffe

080043b8 <_fflush_r>:
 80043b8:	b538      	push	{r3, r4, r5, lr}
 80043ba:	690b      	ldr	r3, [r1, #16]
 80043bc:	4605      	mov	r5, r0
 80043be:	460c      	mov	r4, r1
 80043c0:	b913      	cbnz	r3, 80043c8 <_fflush_r+0x10>
 80043c2:	2500      	movs	r5, #0
 80043c4:	4628      	mov	r0, r5
 80043c6:	bd38      	pop	{r3, r4, r5, pc}
 80043c8:	b118      	cbz	r0, 80043d2 <_fflush_r+0x1a>
 80043ca:	6a03      	ldr	r3, [r0, #32]
 80043cc:	b90b      	cbnz	r3, 80043d2 <_fflush_r+0x1a>
 80043ce:	f7ff fa9f 	bl	8003910 <__sinit>
 80043d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f3      	beq.n	80043c2 <_fflush_r+0xa>
 80043da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043dc:	07d0      	lsls	r0, r2, #31
 80043de:	d404      	bmi.n	80043ea <_fflush_r+0x32>
 80043e0:	0599      	lsls	r1, r3, #22
 80043e2:	d402      	bmi.n	80043ea <_fflush_r+0x32>
 80043e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043e6:	f7ff fb98 	bl	8003b1a <__retarget_lock_acquire_recursive>
 80043ea:	4628      	mov	r0, r5
 80043ec:	4621      	mov	r1, r4
 80043ee:	f7ff ff5f 	bl	80042b0 <__sflush_r>
 80043f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043f4:	07da      	lsls	r2, r3, #31
 80043f6:	4605      	mov	r5, r0
 80043f8:	d4e4      	bmi.n	80043c4 <_fflush_r+0xc>
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	059b      	lsls	r3, r3, #22
 80043fe:	d4e1      	bmi.n	80043c4 <_fflush_r+0xc>
 8004400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004402:	f7ff fb8b 	bl	8003b1c <__retarget_lock_release_recursive>
 8004406:	e7dd      	b.n	80043c4 <_fflush_r+0xc>

08004408 <__swbuf_r>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	460e      	mov	r6, r1
 800440c:	4614      	mov	r4, r2
 800440e:	4605      	mov	r5, r0
 8004410:	b118      	cbz	r0, 800441a <__swbuf_r+0x12>
 8004412:	6a03      	ldr	r3, [r0, #32]
 8004414:	b90b      	cbnz	r3, 800441a <__swbuf_r+0x12>
 8004416:	f7ff fa7b 	bl	8003910 <__sinit>
 800441a:	69a3      	ldr	r3, [r4, #24]
 800441c:	60a3      	str	r3, [r4, #8]
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	071a      	lsls	r2, r3, #28
 8004422:	d501      	bpl.n	8004428 <__swbuf_r+0x20>
 8004424:	6923      	ldr	r3, [r4, #16]
 8004426:	b943      	cbnz	r3, 800443a <__swbuf_r+0x32>
 8004428:	4621      	mov	r1, r4
 800442a:	4628      	mov	r0, r5
 800442c:	f000 f82a 	bl	8004484 <__swsetup_r>
 8004430:	b118      	cbz	r0, 800443a <__swbuf_r+0x32>
 8004432:	f04f 37ff 	mov.w	r7, #4294967295
 8004436:	4638      	mov	r0, r7
 8004438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	6922      	ldr	r2, [r4, #16]
 800443e:	1a98      	subs	r0, r3, r2
 8004440:	6963      	ldr	r3, [r4, #20]
 8004442:	b2f6      	uxtb	r6, r6
 8004444:	4283      	cmp	r3, r0
 8004446:	4637      	mov	r7, r6
 8004448:	dc05      	bgt.n	8004456 <__swbuf_r+0x4e>
 800444a:	4621      	mov	r1, r4
 800444c:	4628      	mov	r0, r5
 800444e:	f7ff ffb3 	bl	80043b8 <_fflush_r>
 8004452:	2800      	cmp	r0, #0
 8004454:	d1ed      	bne.n	8004432 <__swbuf_r+0x2a>
 8004456:	68a3      	ldr	r3, [r4, #8]
 8004458:	3b01      	subs	r3, #1
 800445a:	60a3      	str	r3, [r4, #8]
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	6022      	str	r2, [r4, #0]
 8004462:	701e      	strb	r6, [r3, #0]
 8004464:	6962      	ldr	r2, [r4, #20]
 8004466:	1c43      	adds	r3, r0, #1
 8004468:	429a      	cmp	r2, r3
 800446a:	d004      	beq.n	8004476 <__swbuf_r+0x6e>
 800446c:	89a3      	ldrh	r3, [r4, #12]
 800446e:	07db      	lsls	r3, r3, #31
 8004470:	d5e1      	bpl.n	8004436 <__swbuf_r+0x2e>
 8004472:	2e0a      	cmp	r6, #10
 8004474:	d1df      	bne.n	8004436 <__swbuf_r+0x2e>
 8004476:	4621      	mov	r1, r4
 8004478:	4628      	mov	r0, r5
 800447a:	f7ff ff9d 	bl	80043b8 <_fflush_r>
 800447e:	2800      	cmp	r0, #0
 8004480:	d0d9      	beq.n	8004436 <__swbuf_r+0x2e>
 8004482:	e7d6      	b.n	8004432 <__swbuf_r+0x2a>

08004484 <__swsetup_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	4b29      	ldr	r3, [pc, #164]	@ (800452c <__swsetup_r+0xa8>)
 8004488:	4605      	mov	r5, r0
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	460c      	mov	r4, r1
 800448e:	b118      	cbz	r0, 8004498 <__swsetup_r+0x14>
 8004490:	6a03      	ldr	r3, [r0, #32]
 8004492:	b90b      	cbnz	r3, 8004498 <__swsetup_r+0x14>
 8004494:	f7ff fa3c 	bl	8003910 <__sinit>
 8004498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800449c:	0719      	lsls	r1, r3, #28
 800449e:	d422      	bmi.n	80044e6 <__swsetup_r+0x62>
 80044a0:	06da      	lsls	r2, r3, #27
 80044a2:	d407      	bmi.n	80044b4 <__swsetup_r+0x30>
 80044a4:	2209      	movs	r2, #9
 80044a6:	602a      	str	r2, [r5, #0]
 80044a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044ac:	81a3      	strh	r3, [r4, #12]
 80044ae:	f04f 30ff 	mov.w	r0, #4294967295
 80044b2:	e033      	b.n	800451c <__swsetup_r+0x98>
 80044b4:	0758      	lsls	r0, r3, #29
 80044b6:	d512      	bpl.n	80044de <__swsetup_r+0x5a>
 80044b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044ba:	b141      	cbz	r1, 80044ce <__swsetup_r+0x4a>
 80044bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044c0:	4299      	cmp	r1, r3
 80044c2:	d002      	beq.n	80044ca <__swsetup_r+0x46>
 80044c4:	4628      	mov	r0, r5
 80044c6:	f7ff fb2b 	bl	8003b20 <_free_r>
 80044ca:	2300      	movs	r3, #0
 80044cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044d4:	81a3      	strh	r3, [r4, #12]
 80044d6:	2300      	movs	r3, #0
 80044d8:	6063      	str	r3, [r4, #4]
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	f043 0308 	orr.w	r3, r3, #8
 80044e4:	81a3      	strh	r3, [r4, #12]
 80044e6:	6923      	ldr	r3, [r4, #16]
 80044e8:	b94b      	cbnz	r3, 80044fe <__swsetup_r+0x7a>
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f4:	d003      	beq.n	80044fe <__swsetup_r+0x7a>
 80044f6:	4621      	mov	r1, r4
 80044f8:	4628      	mov	r0, r5
 80044fa:	f000 f84f 	bl	800459c <__smakebuf_r>
 80044fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004502:	f013 0201 	ands.w	r2, r3, #1
 8004506:	d00a      	beq.n	800451e <__swsetup_r+0x9a>
 8004508:	2200      	movs	r2, #0
 800450a:	60a2      	str	r2, [r4, #8]
 800450c:	6962      	ldr	r2, [r4, #20]
 800450e:	4252      	negs	r2, r2
 8004510:	61a2      	str	r2, [r4, #24]
 8004512:	6922      	ldr	r2, [r4, #16]
 8004514:	b942      	cbnz	r2, 8004528 <__swsetup_r+0xa4>
 8004516:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800451a:	d1c5      	bne.n	80044a8 <__swsetup_r+0x24>
 800451c:	bd38      	pop	{r3, r4, r5, pc}
 800451e:	0799      	lsls	r1, r3, #30
 8004520:	bf58      	it	pl
 8004522:	6962      	ldrpl	r2, [r4, #20]
 8004524:	60a2      	str	r2, [r4, #8]
 8004526:	e7f4      	b.n	8004512 <__swsetup_r+0x8e>
 8004528:	2000      	movs	r0, #0
 800452a:	e7f7      	b.n	800451c <__swsetup_r+0x98>
 800452c:	20000018 	.word	0x20000018

08004530 <_sbrk_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4d06      	ldr	r5, [pc, #24]	@ (800454c <_sbrk_r+0x1c>)
 8004534:	2300      	movs	r3, #0
 8004536:	4604      	mov	r4, r0
 8004538:	4608      	mov	r0, r1
 800453a:	602b      	str	r3, [r5, #0]
 800453c:	f7fc faa4 	bl	8000a88 <_sbrk>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d102      	bne.n	800454a <_sbrk_r+0x1a>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	b103      	cbz	r3, 800454a <_sbrk_r+0x1a>
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	2000029c 	.word	0x2000029c

08004550 <__swhatbuf_r>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	460c      	mov	r4, r1
 8004554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004558:	2900      	cmp	r1, #0
 800455a:	b096      	sub	sp, #88	@ 0x58
 800455c:	4615      	mov	r5, r2
 800455e:	461e      	mov	r6, r3
 8004560:	da0d      	bge.n	800457e <__swhatbuf_r+0x2e>
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004568:	f04f 0100 	mov.w	r1, #0
 800456c:	bf14      	ite	ne
 800456e:	2340      	movne	r3, #64	@ 0x40
 8004570:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004574:	2000      	movs	r0, #0
 8004576:	6031      	str	r1, [r6, #0]
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	b016      	add	sp, #88	@ 0x58
 800457c:	bd70      	pop	{r4, r5, r6, pc}
 800457e:	466a      	mov	r2, sp
 8004580:	f000 f848 	bl	8004614 <_fstat_r>
 8004584:	2800      	cmp	r0, #0
 8004586:	dbec      	blt.n	8004562 <__swhatbuf_r+0x12>
 8004588:	9901      	ldr	r1, [sp, #4]
 800458a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800458e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004592:	4259      	negs	r1, r3
 8004594:	4159      	adcs	r1, r3
 8004596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800459a:	e7eb      	b.n	8004574 <__swhatbuf_r+0x24>

0800459c <__smakebuf_r>:
 800459c:	898b      	ldrh	r3, [r1, #12]
 800459e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045a0:	079d      	lsls	r5, r3, #30
 80045a2:	4606      	mov	r6, r0
 80045a4:	460c      	mov	r4, r1
 80045a6:	d507      	bpl.n	80045b8 <__smakebuf_r+0x1c>
 80045a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	6123      	str	r3, [r4, #16]
 80045b0:	2301      	movs	r3, #1
 80045b2:	6163      	str	r3, [r4, #20]
 80045b4:	b003      	add	sp, #12
 80045b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b8:	ab01      	add	r3, sp, #4
 80045ba:	466a      	mov	r2, sp
 80045bc:	f7ff ffc8 	bl	8004550 <__swhatbuf_r>
 80045c0:	9f00      	ldr	r7, [sp, #0]
 80045c2:	4605      	mov	r5, r0
 80045c4:	4639      	mov	r1, r7
 80045c6:	4630      	mov	r0, r6
 80045c8:	f7ff fb16 	bl	8003bf8 <_malloc_r>
 80045cc:	b948      	cbnz	r0, 80045e2 <__smakebuf_r+0x46>
 80045ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d2:	059a      	lsls	r2, r3, #22
 80045d4:	d4ee      	bmi.n	80045b4 <__smakebuf_r+0x18>
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	f043 0302 	orr.w	r3, r3, #2
 80045de:	81a3      	strh	r3, [r4, #12]
 80045e0:	e7e2      	b.n	80045a8 <__smakebuf_r+0xc>
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	6020      	str	r0, [r4, #0]
 80045e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ea:	81a3      	strh	r3, [r4, #12]
 80045ec:	9b01      	ldr	r3, [sp, #4]
 80045ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80045f2:	b15b      	cbz	r3, 800460c <__smakebuf_r+0x70>
 80045f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045f8:	4630      	mov	r0, r6
 80045fa:	f000 f81d 	bl	8004638 <_isatty_r>
 80045fe:	b128      	cbz	r0, 800460c <__smakebuf_r+0x70>
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	81a3      	strh	r3, [r4, #12]
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	431d      	orrs	r5, r3
 8004610:	81a5      	strh	r5, [r4, #12]
 8004612:	e7cf      	b.n	80045b4 <__smakebuf_r+0x18>

08004614 <_fstat_r>:
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	4d07      	ldr	r5, [pc, #28]	@ (8004634 <_fstat_r+0x20>)
 8004618:	2300      	movs	r3, #0
 800461a:	4604      	mov	r4, r0
 800461c:	4608      	mov	r0, r1
 800461e:	4611      	mov	r1, r2
 8004620:	602b      	str	r3, [r5, #0]
 8004622:	f7fc fa09 	bl	8000a38 <_fstat>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d102      	bne.n	8004630 <_fstat_r+0x1c>
 800462a:	682b      	ldr	r3, [r5, #0]
 800462c:	b103      	cbz	r3, 8004630 <_fstat_r+0x1c>
 800462e:	6023      	str	r3, [r4, #0]
 8004630:	bd38      	pop	{r3, r4, r5, pc}
 8004632:	bf00      	nop
 8004634:	2000029c 	.word	0x2000029c

08004638 <_isatty_r>:
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	4d06      	ldr	r5, [pc, #24]	@ (8004654 <_isatty_r+0x1c>)
 800463c:	2300      	movs	r3, #0
 800463e:	4604      	mov	r4, r0
 8004640:	4608      	mov	r0, r1
 8004642:	602b      	str	r3, [r5, #0]
 8004644:	f7fc fa08 	bl	8000a58 <_isatty>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d102      	bne.n	8004652 <_isatty_r+0x1a>
 800464c:	682b      	ldr	r3, [r5, #0]
 800464e:	b103      	cbz	r3, 8004652 <_isatty_r+0x1a>
 8004650:	6023      	str	r3, [r4, #0]
 8004652:	bd38      	pop	{r3, r4, r5, pc}
 8004654:	2000029c 	.word	0x2000029c

08004658 <_init>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr

08004664 <_fini>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr
