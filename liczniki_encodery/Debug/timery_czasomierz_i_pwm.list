
timery_czasomierz_i_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006590  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08006718  08006718  00007718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006968  08006968  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006968  08006968  00007968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006970  08006970  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006970  08006970  00007970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006974  08006974  00007974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006978  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000005c  080069d4  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  080069d4  00008288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f491  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e13  00000000  00000000  0001751d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00019330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b24  00000000  00000000  0001a160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026698  00000000  00000000  0001ac84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001067f  00000000  00000000  0004131c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1f97  00000000  00000000  0005199b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000434c  00000000  00000000  00143978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00147cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006700 	.word	0x08006700

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08006700 	.word	0x08006700

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
  }
  */
	//TIM3
	  if (htim == &htim3) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a06      	ldr	r2, [pc, #24]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d104      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x1a>
	    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e64:	2120      	movs	r1, #32
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e6a:	f000 ff75 	bl	8001d58 <HAL_GPIO_TogglePin>

	    //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
	    //HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
	    //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
	  }
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000078 	.word	0x20000078
 8000e7c:	00000000 	.word	0x00000000

08000e80 <calc_pwm>:
  }
}
*/
// oczekiwana jasnośc świecenia diody RGB - funkcja logistyczna
float calc_pwm(float val)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	ed87 0a01 	vstr	s0, [r7, #4]
    const float k = 0.13f;
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <calc_pwm+0x80>)
 8000e8c:	60fb      	str	r3, [r7, #12]
    const float x0 = 70.0f;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <calc_pwm+0x84>)
 8000e90:	60bb      	str	r3, [r7, #8]
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
 8000e92:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e96:	eeb1 7a67 	vneg.f32	s14, s15
 8000e9a:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ea2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eaa:	ee17 0a90 	vmov	r0, s15
 8000eae:	f7ff faef 	bl	8000490 <__aeabi_f2d>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	ec43 2b10 	vmov	d0, r2, r3
 8000eba:	f004 f9e5 	bl	8005288 <exp>
 8000ebe:	ec51 0b10 	vmov	r0, r1, d0
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <calc_pwm+0x88>)
 8000ec8:	f7ff f984 	bl	80001d4 <__adddf3>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	a109      	add	r1, pc, #36	@ (adr r1, 8000ef8 <calc_pwm+0x78>)
 8000ed2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ed6:	f7ff fc5d 	bl	8000794 <__aeabi_ddiv>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f7ff fdef 	bl	8000ac4 <__aeabi_d2f>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	ee07 3a90 	vmov	s15, r3
}
 8000eec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	40c38800 	.word	0x40c38800
 8000f00:	3e051eb8 	.word	0x3e051eb8
 8000f04:	428c0000 	.word	0x428c0000
 8000f08:	3ff00000 	.word	0x3ff00000

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f000 fbb4 	bl	800167e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f8d5 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1a:	f000 f9e9 	bl	80012f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f1e:	f000 f9b7 	bl	8001290 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f22:	f000 f921 	bl	8001168 <MX_TIM3_Init>
  //Konfiguracja TIM6 to: preskaler 7999, period 9999 daje to okres T=praeskaler*period/f(80MHz procesora) = 1 sekunda
  // nie można ustawić preskalera od razu na 80 tyś bo TIM6 jest 16 bitowy
  //HAL_TIM_Base_Start_IT(&htim6);

  //TIM3 - takie same ustawienia co wyżej, podstawowa wersja działa jak TIM6
  HAL_TIM_Base_Start_IT(&htim3);
 8000f26:	4863      	ldr	r0, [pc, #396]	@ (80010b4 <main+0x1a8>)
 8000f28:	f002 faa8 	bl	800347c <HAL_TIM_Base_Start_IT>
   * HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
  */
  //przerwania pwm nie będą juz zgłaszane, wykorzystujemy sprzętowy pwm, czyli procesor nie musi obsługiwać aż tylu przerwań jednocześnie
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4861      	ldr	r0, [pc, #388]	@ (80010b4 <main+0x1a8>)
 8000f30:	f002 fb76 	bl	8003620 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f34:	2104      	movs	r1, #4
 8000f36:	485f      	ldr	r0, [pc, #380]	@ (80010b4 <main+0x1a8>)
 8000f38:	f002 fb72 	bl	8003620 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	485d      	ldr	r0, [pc, #372]	@ (80010b4 <main+0x1a8>)
 8000f40:	f002 fb6e 	bl	8003620 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	  float r = 50 * (1.0f + sin(counter / 100.0f));
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	ee07 3a90 	vmov	s15, r3
 8000f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f52:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80010b8 <main+0x1ac>
 8000f56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f5a:	ee16 0a90 	vmov	r0, s13
 8000f5e:	f7ff fa97 	bl	8000490 <__aeabi_f2d>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	ec43 2b10 	vmov	d0, r2, r3
 8000f6a:	f004 f9d5 	bl	8005318 <sin>
 8000f6e:	ec51 0b10 	vmov	r0, r1, d0
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4b51      	ldr	r3, [pc, #324]	@ (80010bc <main+0x1b0>)
 8000f78:	f7ff f92c 	bl	80001d4 <__adddf3>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4b4d      	ldr	r3, [pc, #308]	@ (80010c0 <main+0x1b4>)
 8000f8a:	f7ff fad9 	bl	8000540 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fd95 	bl	8000ac4 <__aeabi_d2f>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	60bb      	str	r3, [r7, #8]
	  float g = 50 * (1.0f + sin(1.5f * counter / 100.0f));
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb0:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80010b8 <main+0x1ac>
 8000fb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fb8:	ee16 0a90 	vmov	r0, s13
 8000fbc:	f7ff fa68 	bl	8000490 <__aeabi_f2d>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	ec43 2b10 	vmov	d0, r2, r3
 8000fc8:	f004 f9a6 	bl	8005318 <sin>
 8000fcc:	ec51 0b10 	vmov	r0, r1, d0
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	4b39      	ldr	r3, [pc, #228]	@ (80010bc <main+0x1b0>)
 8000fd6:	f7ff f8fd 	bl	80001d4 <__adddf3>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <main+0x1b4>)
 8000fe8:	f7ff faaa 	bl	8000540 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd66 	bl	8000ac4 <__aeabi_d2f>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	607b      	str	r3, [r7, #4]
	  float b = 50 * (1.0f + sin(2.0f * counter / 100.0f));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001006:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800100a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80010b8 <main+0x1ac>
 800100e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001012:	ee16 0a90 	vmov	r0, s13
 8001016:	f7ff fa3b 	bl	8000490 <__aeabi_f2d>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	ec43 2b10 	vmov	d0, r2, r3
 8001022:	f004 f979 	bl	8005318 <sin>
 8001026:	ec51 0b10 	vmov	r0, r1, d0
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <main+0x1b0>)
 8001030:	f7ff f8d0 	bl	80001d4 <__adddf3>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <main+0x1b4>)
 8001042:	f7ff fa7d 	bl	8000540 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fd39 	bl	8000ac4 <__aeabi_d2f>
 8001052:	4603      	mov	r3, r0
 8001054:	603b      	str	r3, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, calc_pwm(b));
 8001056:	ed97 0a00 	vldr	s0, [r7]
 800105a:	f7ff ff11 	bl	8000e80 <calc_pwm>
 800105e:	eef0 7a40 	vmov.f32	s15, s0
 8001062:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <main+0x1a8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800106a:	ee17 2a90 	vmov	r2, s15
 800106e:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, calc_pwm(g));
 8001070:	ed97 0a01 	vldr	s0, [r7, #4]
 8001074:	f7ff ff04 	bl	8000e80 <calc_pwm>
 8001078:	eef0 7a40 	vmov.f32	s15, s0
 800107c:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <main+0x1a8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001084:	ee17 2a90 	vmov	r2, s15
 8001088:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, calc_pwm(r));
 800108a:	ed97 0a02 	vldr	s0, [r7, #8]
 800108e:	f7ff fef7 	bl	8000e80 <calc_pwm>
 8001092:	eef0 7a40 	vmov.f32	s15, s0
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <main+0x1a8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800109e:	ee17 2a90 	vmov	r2, s15
 80010a2:	63da      	str	r2, [r3, #60]	@ 0x3c

	  HAL_Delay(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f000 fb5f 	bl	8001768 <HAL_Delay>
	  counter++;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
  {
 80010b0:	bf00      	nop
 80010b2:	e749      	b.n	8000f48 <main+0x3c>
 80010b4:	20000078 	.word	0x20000078
 80010b8:	42c80000 	.word	0x42c80000
 80010bc:	3ff00000 	.word	0x3ff00000
 80010c0:	40490000 	.word	0x40490000

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b096      	sub	sp, #88	@ 0x58
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	2244      	movs	r2, #68	@ 0x44
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 f8a3 	bl	800521e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	463b      	mov	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010ea:	f000 fe5d 	bl	8001da8 <HAL_PWREx_ControlVoltageScaling>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010f4:	f000 f94e 	bl	8001394 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010f8:	2310      	movs	r3, #16
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001104:	2360      	movs	r3, #96	@ 0x60
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001108:	2302      	movs	r3, #2
 800110a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800110c:	2301      	movs	r3, #1
 800110e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001110:	2301      	movs	r3, #1
 8001112:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001114:	2328      	movs	r3, #40	@ 0x28
 8001116:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001118:	2307      	movs	r3, #7
 800111a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fe93 	bl	8001e54 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001134:	f000 f92e 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	2303      	movs	r3, #3
 800113e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	2104      	movs	r1, #4
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fa5b 	bl	800260c <HAL_RCC_ClockConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800115c:	f000 f91a 	bl	8001394 <Error_Handler>
  }
}
 8001160:	bf00      	nop
 8001162:	3758      	adds	r7, #88	@ 0x58
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08e      	sub	sp, #56	@ 0x38
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
 8001196:	615a      	str	r2, [r3, #20]
 8001198:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119a:	4b3b      	ldr	r3, [pc, #236]	@ (8001288 <MX_TIM3_Init+0x120>)
 800119c:	4a3b      	ldr	r2, [pc, #236]	@ (800128c <MX_TIM3_Init+0x124>)
 800119e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80011a0:	4b39      	ldr	r3, [pc, #228]	@ (8001288 <MX_TIM3_Init+0x120>)
 80011a2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80011a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a8:	4b37      	ldr	r3, [pc, #220]	@ (8001288 <MX_TIM3_Init+0x120>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80011ae:	4b36      	ldr	r3, [pc, #216]	@ (8001288 <MX_TIM3_Init+0x120>)
 80011b0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b6:	4b34      	ldr	r3, [pc, #208]	@ (8001288 <MX_TIM3_Init+0x120>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b32      	ldr	r3, [pc, #200]	@ (8001288 <MX_TIM3_Init+0x120>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c2:	4831      	ldr	r0, [pc, #196]	@ (8001288 <MX_TIM3_Init+0x120>)
 80011c4:	f002 f902 	bl	80033cc <HAL_TIM_Base_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80011ce:	f000 f8e1 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011dc:	4619      	mov	r1, r3
 80011de:	482a      	ldr	r0, [pc, #168]	@ (8001288 <MX_TIM3_Init+0x120>)
 80011e0:	f002 fd3a 	bl	8003c58 <HAL_TIM_ConfigClockSource>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80011ea:	f000 f8d3 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011ee:	4826      	ldr	r0, [pc, #152]	@ (8001288 <MX_TIM3_Init+0x120>)
 80011f0:	f002 f9b4 	bl	800355c <HAL_TIM_PWM_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80011fa:	f000 f8cb 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	481e      	ldr	r0, [pc, #120]	@ (8001288 <MX_TIM3_Init+0x120>)
 800120e:	f003 fa45 	bl	800469c <HAL_TIMEx_MasterConfigSynchronization>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001218:	f000 f8bc 	bl	8001394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121c:	2360      	movs	r3, #96	@ 0x60
 800121e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001220:	2332      	movs	r3, #50	@ 0x32
 8001222:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001224:	2302      	movs	r3, #2
 8001226:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	4815      	ldr	r0, [pc, #84]	@ (8001288 <MX_TIM3_Init+0x120>)
 8001234:	f002 fbfc 	bl	8003a30 <HAL_TIM_PWM_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800123e:	f000 f8a9 	bl	8001394 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8001242:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001246:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	2204      	movs	r2, #4
 800124c:	4619      	mov	r1, r3
 800124e:	480e      	ldr	r0, [pc, #56]	@ (8001288 <MX_TIM3_Init+0x120>)
 8001250:	f002 fbee 	bl	8003a30 <HAL_TIM_PWM_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800125a:	f000 f89b 	bl	8001394 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 800125e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2208      	movs	r2, #8
 8001268:	4619      	mov	r1, r3
 800126a:	4807      	ldr	r0, [pc, #28]	@ (8001288 <MX_TIM3_Init+0x120>)
 800126c:	f002 fbe0 	bl	8003a30 <HAL_TIM_PWM_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8001276:	f000 f88d 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800127a:	4803      	ldr	r0, [pc, #12]	@ (8001288 <MX_TIM3_Init+0x120>)
 800127c:	f000 f8da 	bl	8001434 <HAL_TIM_MspPostInit>

}
 8001280:	bf00      	nop
 8001282:	3738      	adds	r7, #56	@ 0x38
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000078 	.word	0x20000078
 800128c:	40000400 	.word	0x40000400

08001290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_USART2_UART_Init+0x58>)
 8001296:	4a15      	ldr	r2, [pc, #84]	@ (80012ec <MX_USART2_UART_Init+0x5c>)
 8001298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800129a:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <MX_USART2_UART_Init+0x58>)
 800129c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_USART2_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_USART2_UART_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_USART2_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_USART2_UART_Init+0x58>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <MX_USART2_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_USART2_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MX_USART2_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_USART2_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_USART2_UART_Init+0x58>)
 80012d4:	f003 fa88 	bl	80047e8 <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012de:	f000 f859 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200000c4 	.word	0x200000c4
 80012ec:	40004400 	.word	0x40004400

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <MX_GPIO_Init+0x9c>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	4a20      	ldr	r2, [pc, #128]	@ (800138c <MX_GPIO_Init+0x9c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001312:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <MX_GPIO_Init+0x9c>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <MX_GPIO_Init+0x9c>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	4a1a      	ldr	r2, [pc, #104]	@ (800138c <MX_GPIO_Init+0x9c>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132a:	4b18      	ldr	r3, [pc, #96]	@ (800138c <MX_GPIO_Init+0x9c>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2120      	movs	r1, #32
 800133a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133e:	f000 fcf3 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001342:	2320      	movs	r3, #32
 8001344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135c:	f000 fb3a 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001360:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001372:	2301      	movs	r3, #1
 8001374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	4619      	mov	r1, r3
 800137c:	4804      	ldr	r0, [pc, #16]	@ (8001390 <MX_GPIO_Init+0xa0>)
 800137e:	f000 fb29 	bl	80019d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	48000400 	.word	0x48000400

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <Error_Handler+0x8>

080013a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <HAL_MspInit+0x44>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013aa:	4a0e      	ldr	r2, [pc, #56]	@ (80013e4 <HAL_MspInit+0x44>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013b2:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <HAL_MspInit+0x44>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <HAL_MspInit+0x44>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c2:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <HAL_MspInit+0x44>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_MspInit+0x44>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0d      	ldr	r2, [pc, #52]	@ (800142c <HAL_TIM_Base_MspInit+0x44>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d113      	bne.n	8001422 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <HAL_TIM_Base_MspInit+0x48>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001430 <HAL_TIM_Base_MspInit+0x48>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6593      	str	r3, [r2, #88]	@ 0x58
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <HAL_TIM_Base_MspInit+0x48>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	201d      	movs	r0, #29
 8001418:	f000 faa5 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800141c:	201d      	movs	r0, #29
 800141e:	f000 fabe 	bl	800199e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40000400 	.word	0x40000400
 8001430:	40021000 	.word	0x40021000

08001434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	@ 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a1f      	ldr	r2, [pc, #124]	@ (80014d0 <HAL_TIM_MspPostInit+0x9c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d138      	bne.n	80014c8 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <HAL_TIM_MspPostInit+0xa0>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	4a1e      	ldr	r2, [pc, #120]	@ (80014d4 <HAL_TIM_MspPostInit+0xa0>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <HAL_TIM_MspPostInit+0xa0>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_TIM_MspPostInit+0xa0>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <HAL_TIM_MspPostInit+0xa0>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <HAL_TIM_MspPostInit+0xa0>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001486:	23c0      	movs	r3, #192	@ 0xc0
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001496:	2302      	movs	r3, #2
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a4:	f000 fa96 	bl	80019d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a8:	2301      	movs	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014b8:	2302      	movs	r3, #2
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <HAL_TIM_MspPostInit+0xa4>)
 80014c4:	f000 fa86 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40000400 	.word	0x40000400
 80014d4:	40021000 	.word	0x40021000
 80014d8:	48000400 	.word	0x48000400

080014dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b0ac      	sub	sp, #176	@ 0xb0
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2288      	movs	r2, #136	@ 0x88
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 fe8e 	bl	800521e <memset>
  if(huart->Instance==USART2)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a21      	ldr	r2, [pc, #132]	@ (800158c <HAL_UART_MspInit+0xb0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d13b      	bne.n	8001584 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800150c:	2302      	movs	r3, #2
 800150e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001510:	2300      	movs	r3, #0
 8001512:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4618      	mov	r0, r3
 800151a:	f001 fa9b 	bl	8002a54 <HAL_RCCEx_PeriphCLKConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001524:	f7ff ff36 	bl	8001394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_UART_MspInit+0xb4>)
 800152a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152c:	4a18      	ldr	r2, [pc, #96]	@ (8001590 <HAL_UART_MspInit+0xb4>)
 800152e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001532:	6593      	str	r3, [r2, #88]	@ 0x58
 8001534:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <HAL_UART_MspInit+0xb4>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <HAL_UART_MspInit+0xb4>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001544:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <HAL_UART_MspInit+0xb4>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154c:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <HAL_UART_MspInit+0xb4>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001558:	230c      	movs	r3, #12
 800155a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001570:	2307      	movs	r3, #7
 8001572:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001580:	f000 fa28 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	37b0      	adds	r7, #176	@ 0xb0
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40004400 	.word	0x40004400
 8001590:	40021000 	.word	0x40021000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <NMI_Handler+0x4>

0800159c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <MemManage_Handler+0x4>

080015ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <UsageFault_Handler+0x4>

080015bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ea:	f000 f89d 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <TIM3_IRQHandler+0x10>)
 80015fa:	f002 f917 	bl	800382c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000078 	.word	0x20000078

08001608 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001664 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001630:	f7ff ffea 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480c      	ldr	r0, [pc, #48]	@ (8001668 <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490d      	ldr	r1, [pc, #52]	@ (800166c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0a      	ldr	r4, [pc, #40]	@ (8001678 <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165a:	f003 fdef 	bl	800523c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800165e:	f7ff fc55 	bl	8000f0c <main>

08001662 <LoopForever>:

LoopForever:
    b LoopForever
 8001662:	e7fe      	b.n	8001662 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001664:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001670:	08006978 	.word	0x08006978
  ldr r2, =_sbss
 8001674:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001678:	20000288 	.word	0x20000288

0800167c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_2_IRQHandler>

0800167e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f961 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f80e 	bl	80016b0 <HAL_InitTick>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	e001      	b.n	80016a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016a0:	f7ff fe7e 	bl	80013a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016a4:	79fb      	ldrb	r3, [r7, #7]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016bc:	4b17      	ldr	r3, [pc, #92]	@ (800171c <HAL_InitTick+0x6c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d023      	beq.n	800170c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016c4:	4b16      	ldr	r3, [pc, #88]	@ (8001720 <HAL_InitTick+0x70>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <HAL_InitTick+0x6c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f96d 	bl	80019ba <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d809      	bhi.n	8001700 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 f937 	bl	8001966 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <HAL_InitTick+0x74>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e007      	b.n	8001710 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e004      	b.n	8001710 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e001      	b.n	8001710 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000008 	.word	0x20000008
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	@ (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008
 800174c:	2000014c 	.word	0x2000014c

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	@ (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	2000014c 	.word	0x2000014c

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff ffee 	bl	8001750 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <HAL_Delay+0x44>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffde 	bl	8001750 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4907      	ldr	r1, [pc, #28]	@ (800184c <__NVIC_EnableIRQ+0x38>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	@ (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	@ (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	@ 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f7ff ff8e 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	@ (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff29 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff3e 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff8e 	bl	80018a4 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff31 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa2 	bl	800190c <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e2:	e17f      	b.n	8001ce4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8171 	beq.w	8001cde <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d005      	beq.n	8001a14 <HAL_GPIO_Init+0x40>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d130      	bne.n	8001a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 0201 	and.w	r2, r3, #1
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d118      	bne.n	8001ab4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	f003 0201 	and.w	r2, r3, #1
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d017      	beq.n	8001af0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d123      	bne.n	8001b44 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	6939      	ldr	r1, [r7, #16]
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80ac 	beq.w	8001cde <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	4b5f      	ldr	r3, [pc, #380]	@ (8001d04 <HAL_GPIO_Init+0x330>)
 8001b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b8a:	4a5e      	ldr	r2, [pc, #376]	@ (8001d04 <HAL_GPIO_Init+0x330>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b92:	4b5c      	ldr	r3, [pc, #368]	@ (8001d04 <HAL_GPIO_Init+0x330>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001d08 <HAL_GPIO_Init+0x334>)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bc8:	d025      	beq.n	8001c16 <HAL_GPIO_Init+0x242>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4f      	ldr	r2, [pc, #316]	@ (8001d0c <HAL_GPIO_Init+0x338>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d01f      	beq.n	8001c12 <HAL_GPIO_Init+0x23e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001d10 <HAL_GPIO_Init+0x33c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d019      	beq.n	8001c0e <HAL_GPIO_Init+0x23a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4d      	ldr	r2, [pc, #308]	@ (8001d14 <HAL_GPIO_Init+0x340>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_GPIO_Init+0x236>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4c      	ldr	r2, [pc, #304]	@ (8001d18 <HAL_GPIO_Init+0x344>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00d      	beq.n	8001c06 <HAL_GPIO_Init+0x232>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4b      	ldr	r2, [pc, #300]	@ (8001d1c <HAL_GPIO_Init+0x348>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <HAL_GPIO_Init+0x22e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4a      	ldr	r2, [pc, #296]	@ (8001d20 <HAL_GPIO_Init+0x34c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_GPIO_Init+0x22a>
 8001bfa:	2306      	movs	r3, #6
 8001bfc:	e00c      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001bfe:	2307      	movs	r3, #7
 8001c00:	e00a      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001c02:	2305      	movs	r3, #5
 8001c04:	e008      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001c06:	2304      	movs	r3, #4
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e004      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e002      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001c16:	2300      	movs	r3, #0
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	f002 0203 	and.w	r2, r2, #3
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	4093      	lsls	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c28:	4937      	ldr	r1, [pc, #220]	@ (8001d08 <HAL_GPIO_Init+0x334>)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c36:	4b3b      	ldr	r3, [pc, #236]	@ (8001d24 <HAL_GPIO_Init+0x350>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c5a:	4a32      	ldr	r2, [pc, #200]	@ (8001d24 <HAL_GPIO_Init+0x350>)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c60:	4b30      	ldr	r3, [pc, #192]	@ (8001d24 <HAL_GPIO_Init+0x350>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c84:	4a27      	ldr	r2, [pc, #156]	@ (8001d24 <HAL_GPIO_Init+0x350>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c8a:	4b26      	ldr	r3, [pc, #152]	@ (8001d24 <HAL_GPIO_Init+0x350>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cae:	4a1d      	ldr	r2, [pc, #116]	@ (8001d24 <HAL_GPIO_Init+0x350>)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <HAL_GPIO_Init+0x350>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cd8:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <HAL_GPIO_Init+0x350>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f47f ae78 	bne.w	80019e4 <HAL_GPIO_Init+0x10>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	48000400 	.word	0x48000400
 8001d10:	48000800 	.word	0x48000800
 8001d14:	48000c00 	.word	0x48000c00
 8001d18:	48001000 	.word	0x48001000
 8001d1c:	48001400 	.word	0x48001400
 8001d20:	48001800 	.word	0x48001800
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d38:	787b      	ldrb	r3, [r7, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43d9      	mvns	r1, r3
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	400b      	ands	r3, r1
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d90:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40007000 	.word	0x40007000

08001da8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001db6:	d130      	bne.n	8001e1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001db8:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dc4:	d038      	beq.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dce:	4a1e      	ldr	r2, [pc, #120]	@ (8001e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2232      	movs	r2, #50	@ 0x32
 8001ddc:	fb02 f303 	mul.w	r3, r2, r3
 8001de0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9b      	lsrs	r3, r3, #18
 8001de8:	3301      	adds	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dec:	e002      	b.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e00:	d102      	bne.n	8001e08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f2      	bne.n	8001dee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e08:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e14:	d110      	bne.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e00f      	b.n	8001e3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e26:	d007      	beq.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e28:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e30:	4a05      	ldr	r2, [pc, #20]	@ (8001e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	431bde83 	.word	0x431bde83

08001e54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e3ca      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e66:	4b97      	ldr	r3, [pc, #604]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e70:	4b94      	ldr	r3, [pc, #592]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80e4 	beq.w	8002050 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <HAL_RCC_OscConfig+0x4a>
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b0c      	cmp	r3, #12
 8001e92:	f040 808b 	bne.w	8001fac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	f040 8087 	bne.w	8001fac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e9e:	4b89      	ldr	r3, [pc, #548]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x62>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e3a2      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1a      	ldr	r2, [r3, #32]
 8001eba:	4b82      	ldr	r3, [pc, #520]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d004      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x7c>
 8001ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ece:	e005      	b.n	8001edc <HAL_RCC_OscConfig+0x88>
 8001ed0:	4b7c      	ldr	r3, [pc, #496]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d223      	bcs.n	8001f28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fd55 	bl	8002994 <RCC_SetFlashLatencyFromMSIRange>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e383      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ef4:	4b73      	ldr	r3, [pc, #460]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a72      	ldr	r2, [pc, #456]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b70      	ldr	r3, [pc, #448]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	496d      	ldr	r1, [pc, #436]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f12:	4b6c      	ldr	r3, [pc, #432]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	4968      	ldr	r1, [pc, #416]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
 8001f26:	e025      	b.n	8001f74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f28:	4b66      	ldr	r3, [pc, #408]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a65      	ldr	r2, [pc, #404]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b63      	ldr	r3, [pc, #396]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4960      	ldr	r1, [pc, #384]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f46:	4b5f      	ldr	r3, [pc, #380]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	495b      	ldr	r1, [pc, #364]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 fd15 	bl	8002994 <RCC_SetFlashLatencyFromMSIRange>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e343      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f74:	f000 fc4a 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b52      	ldr	r3, [pc, #328]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	4950      	ldr	r1, [pc, #320]	@ (80020c8 <HAL_RCC_OscConfig+0x274>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	4a4e      	ldr	r2, [pc, #312]	@ (80020cc <HAL_RCC_OscConfig+0x278>)
 8001f92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f94:	4b4e      	ldr	r3, [pc, #312]	@ (80020d0 <HAL_RCC_OscConfig+0x27c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fb89 	bl	80016b0 <HAL_InitTick>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d052      	beq.n	800204e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	e327      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d032      	beq.n	800201a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fb4:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a42      	ldr	r2, [pc, #264]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fbc6 	bl	8001750 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc8:	f7ff fbc2 	bl	8001750 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e310      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fda:	4b3a      	ldr	r3, [pc, #232]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe6:	4b37      	ldr	r3, [pc, #220]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a36      	ldr	r2, [pc, #216]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b34      	ldr	r3, [pc, #208]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4931      	ldr	r1, [pc, #196]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002004:	4b2f      	ldr	r3, [pc, #188]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	492c      	ldr	r1, [pc, #176]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
 8002018:	e01a      	b.n	8002050 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800201a:	4b2a      	ldr	r3, [pc, #168]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a29      	ldr	r2, [pc, #164]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002026:	f7ff fb93 	bl	8001750 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800202e:	f7ff fb8f 	bl	8001750 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e2dd      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002040:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f0      	bne.n	800202e <HAL_RCC_OscConfig+0x1da>
 800204c:	e000      	b.n	8002050 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800204e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d074      	beq.n	8002146 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b08      	cmp	r3, #8
 8002060:	d005      	beq.n	800206e <HAL_RCC_OscConfig+0x21a>
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d10e      	bne.n	8002086 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d10b      	bne.n	8002086 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206e:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d064      	beq.n	8002144 <HAL_RCC_OscConfig+0x2f0>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d160      	bne.n	8002144 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e2ba      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x24a>
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0b      	ldr	r2, [pc, #44]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e026      	b.n	80020ec <HAL_RCC_OscConfig+0x298>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020a6:	d115      	bne.n	80020d4 <HAL_RCC_OscConfig+0x280>
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 80020ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b03      	ldr	r3, [pc, #12]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a02      	ldr	r2, [pc, #8]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	e014      	b.n	80020ec <HAL_RCC_OscConfig+0x298>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08006718 	.word	0x08006718
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000004 	.word	0x20000004
 80020d4:	4ba0      	ldr	r3, [pc, #640]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a9f      	ldr	r2, [pc, #636]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b9d      	ldr	r3, [pc, #628]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a9c      	ldr	r2, [pc, #624]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff fb2c 	bl	8001750 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7ff fb28 	bl	8001750 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	@ 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e276      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800210e:	4b92      	ldr	r3, [pc, #584]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x2a8>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7ff fb18 	bl	8001750 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7ff fb14 	bl	8001750 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	@ 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e262      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002136:	4b88      	ldr	r3, [pc, #544]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x2d0>
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d060      	beq.n	8002214 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d005      	beq.n	8002164 <HAL_RCC_OscConfig+0x310>
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d119      	bne.n	8002192 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d116      	bne.n	8002192 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002164:	4b7c      	ldr	r3, [pc, #496]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_OscConfig+0x328>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e23f      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217c:	4b76      	ldr	r3, [pc, #472]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	061b      	lsls	r3, r3, #24
 800218a:	4973      	ldr	r1, [pc, #460]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002190:	e040      	b.n	8002214 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d023      	beq.n	80021e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219a:	4b6f      	ldr	r3, [pc, #444]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a6e      	ldr	r2, [pc, #440]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7ff fad3 	bl	8001750 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ae:	f7ff facf 	bl	8001750 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e21d      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c0:	4b65      	ldr	r3, [pc, #404]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	4b62      	ldr	r3, [pc, #392]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	061b      	lsls	r3, r3, #24
 80021da:	495f      	ldr	r1, [pc, #380]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
 80021e0:	e018      	b.n	8002214 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80021e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7ff faaf 	bl	8001750 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f6:	f7ff faab 	bl	8001750 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e1f9      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002208:	4b53      	ldr	r3, [pc, #332]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d03c      	beq.n	800229a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01c      	beq.n	8002262 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002228:	4b4b      	ldr	r3, [pc, #300]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800222e:	4a4a      	ldr	r2, [pc, #296]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002238:	f7ff fa8a 	bl	8001750 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002240:	f7ff fa86 	bl	8001750 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1d4      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002252:	4b41      	ldr	r3, [pc, #260]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 8002254:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ef      	beq.n	8002240 <HAL_RCC_OscConfig+0x3ec>
 8002260:	e01b      	b.n	800229a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002262:	4b3d      	ldr	r3, [pc, #244]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 8002264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002268:	4a3b      	ldr	r2, [pc, #236]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7ff fa6d 	bl	8001750 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227a:	f7ff fa69 	bl	8001750 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e1b7      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800228c:	4b32      	ldr	r3, [pc, #200]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 800228e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ef      	bne.n	800227a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80a6 	beq.w	80023f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a8:	2300      	movs	r3, #0
 80022aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10d      	bne.n	80022d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	4a26      	ldr	r2, [pc, #152]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80022be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c4:	4b24      	ldr	r3, [pc, #144]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d0:	2301      	movs	r3, #1
 80022d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_RCC_OscConfig+0x508>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d118      	bne.n	8002312 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e0:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_RCC_OscConfig+0x508>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1d      	ldr	r2, [pc, #116]	@ (800235c <HAL_RCC_OscConfig+0x508>)
 80022e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ec:	f7ff fa30 	bl	8001750 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f4:	f7ff fa2c 	bl	8001750 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e17a      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <HAL_RCC_OscConfig+0x508>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d108      	bne.n	800232c <HAL_RCC_OscConfig+0x4d8>
 800231a:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002320:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800232a:	e029      	b.n	8002380 <HAL_RCC_OscConfig+0x52c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b05      	cmp	r3, #5
 8002332:	d115      	bne.n	8002360 <HAL_RCC_OscConfig+0x50c>
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233a:	4a07      	ldr	r2, [pc, #28]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002344:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234a:	4a03      	ldr	r2, [pc, #12]	@ (8002358 <HAL_RCC_OscConfig+0x504>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002354:	e014      	b.n	8002380 <HAL_RCC_OscConfig+0x52c>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
 8002360:	4b9c      	ldr	r3, [pc, #624]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002366:	4a9b      	ldr	r2, [pc, #620]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002370:	4b98      	ldr	r3, [pc, #608]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002376:	4a97      	ldr	r2, [pc, #604]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d016      	beq.n	80023b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7ff f9e2 	bl	8001750 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7ff f9de 	bl	8001750 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e12a      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a6:	4b8b      	ldr	r3, [pc, #556]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ed      	beq.n	8002390 <HAL_RCC_OscConfig+0x53c>
 80023b4:	e015      	b.n	80023e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b6:	f7ff f9cb 	bl	8001750 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7ff f9c7 	bl	8001750 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e113      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d4:	4b7f      	ldr	r3, [pc, #508]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ed      	bne.n	80023be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e2:	7ffb      	ldrb	r3, [r7, #31]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e8:	4b7a      	ldr	r3, [pc, #488]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ec:	4a79      	ldr	r2, [pc, #484]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 80023ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80fe 	beq.w	80025fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002402:	2b02      	cmp	r3, #2
 8002404:	f040 80d0 	bne.w	80025a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002408:	4b72      	ldr	r3, [pc, #456]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0203 	and.w	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002418:	429a      	cmp	r2, r3
 800241a:	d130      	bne.n	800247e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	3b01      	subs	r3, #1
 8002428:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d127      	bne.n	800247e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002438:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d11f      	bne.n	800247e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002448:	2a07      	cmp	r2, #7
 800244a:	bf14      	ite	ne
 800244c:	2201      	movne	r2, #1
 800244e:	2200      	moveq	r2, #0
 8002450:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002452:	4293      	cmp	r3, r2
 8002454:	d113      	bne.n	800247e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	3b01      	subs	r3, #1
 8002464:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d109      	bne.n	800247e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	085b      	lsrs	r3, r3, #1
 8002476:	3b01      	subs	r3, #1
 8002478:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d06e      	beq.n	800255c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b0c      	cmp	r3, #12
 8002482:	d069      	beq.n	8002558 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002484:	4b53      	ldr	r3, [pc, #332]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002490:	4b50      	ldr	r3, [pc, #320]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0ad      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024a0:	4b4c      	ldr	r3, [pc, #304]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a4b      	ldr	r2, [pc, #300]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 80024a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024ac:	f7ff f950 	bl	8001750 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7ff f94c 	bl	8001750 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e09a      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c6:	4b43      	ldr	r3, [pc, #268]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d2:	4b40      	ldr	r3, [pc, #256]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	4b40      	ldr	r3, [pc, #256]	@ (80025d8 <HAL_RCC_OscConfig+0x784>)
 80024d8:	4013      	ands	r3, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024e2:	3a01      	subs	r2, #1
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	4311      	orrs	r1, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024ec:	0212      	lsls	r2, r2, #8
 80024ee:	4311      	orrs	r1, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024f4:	0852      	lsrs	r2, r2, #1
 80024f6:	3a01      	subs	r2, #1
 80024f8:	0552      	lsls	r2, r2, #21
 80024fa:	4311      	orrs	r1, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002500:	0852      	lsrs	r2, r2, #1
 8002502:	3a01      	subs	r2, #1
 8002504:	0652      	lsls	r2, r2, #25
 8002506:	4311      	orrs	r1, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800250c:	0912      	lsrs	r2, r2, #4
 800250e:	0452      	lsls	r2, r2, #17
 8002510:	430a      	orrs	r2, r1
 8002512:	4930      	ldr	r1, [pc, #192]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 8002514:	4313      	orrs	r3, r2
 8002516:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002518:	4b2e      	ldr	r3, [pc, #184]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2d      	ldr	r2, [pc, #180]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 800251e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002522:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002524:	4b2b      	ldr	r3, [pc, #172]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a2a      	ldr	r2, [pc, #168]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 800252a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800252e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002530:	f7ff f90e 	bl	8001750 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7ff f90a 	bl	8001750 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e058      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	4b22      	ldr	r3, [pc, #136]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002556:	e050      	b.n	80025fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e04f      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255c:	4b1d      	ldr	r3, [pc, #116]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d148      	bne.n	80025fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002568:	4b1a      	ldr	r3, [pc, #104]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a19      	ldr	r2, [pc, #100]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 800256e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002572:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002574:	4b17      	ldr	r3, [pc, #92]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a16      	ldr	r2, [pc, #88]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 800257a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800257e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002580:	f7ff f8e6 	bl	8001750 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7ff f8e2 	bl	8001750 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e030      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259a:	4b0e      	ldr	r3, [pc, #56]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x734>
 80025a6:	e028      	b.n	80025fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b0c      	cmp	r3, #12
 80025ac:	d023      	beq.n	80025f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ae:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a08      	ldr	r2, [pc, #32]	@ (80025d4 <HAL_RCC_OscConfig+0x780>)
 80025b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7ff f8c9 	bl	8001750 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c0:	e00c      	b.n	80025dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7ff f8c5 	bl	8001750 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d905      	bls.n	80025dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e013      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
 80025d4:	40021000 	.word	0x40021000
 80025d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025dc:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_RCC_OscConfig+0x7b0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1ec      	bne.n	80025c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025e8:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_RCC_OscConfig+0x7b0>)
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	4905      	ldr	r1, [pc, #20]	@ (8002604 <HAL_RCC_OscConfig+0x7b0>)
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_RCC_OscConfig+0x7b4>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
 80025f4:	e001      	b.n	80025fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000
 8002608:	feeefffc 	.word	0xfeeefffc

0800260c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0e7      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b75      	ldr	r3, [pc, #468]	@ (80027f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d910      	bls.n	8002650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b72      	ldr	r3, [pc, #456]	@ (80027f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 0207 	bic.w	r2, r3, #7
 8002636:	4970      	ldr	r1, [pc, #448]	@ (80027f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b6e      	ldr	r3, [pc, #440]	@ (80027f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0cf      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d010      	beq.n	800267e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	4b66      	ldr	r3, [pc, #408]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002668:	429a      	cmp	r2, r3
 800266a:	d908      	bls.n	800267e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266c:	4b63      	ldr	r3, [pc, #396]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4960      	ldr	r1, [pc, #384]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d04c      	beq.n	8002724 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	4b5a      	ldr	r3, [pc, #360]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d121      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0a6      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026aa:	4b54      	ldr	r3, [pc, #336]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d115      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e09a      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026c2:	4b4e      	ldr	r3, [pc, #312]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e08e      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d2:	4b4a      	ldr	r3, [pc, #296]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e086      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b46      	ldr	r3, [pc, #280]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4943      	ldr	r1, [pc, #268]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f4:	f7ff f82c 	bl	8001750 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7ff f828 	bl	8001750 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e06e      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b3a      	ldr	r3, [pc, #232]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d010      	beq.n	8002752 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	4b31      	ldr	r3, [pc, #196]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800273c:	429a      	cmp	r2, r3
 800273e:	d208      	bcs.n	8002752 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b2e      	ldr	r3, [pc, #184]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	492b      	ldr	r1, [pc, #172]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002752:	4b29      	ldr	r3, [pc, #164]	@ (80027f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d210      	bcs.n	8002782 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002760:	4b25      	ldr	r3, [pc, #148]	@ (80027f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 0207 	bic.w	r2, r3, #7
 8002768:	4923      	ldr	r1, [pc, #140]	@ (80027f8 <HAL_RCC_ClockConfig+0x1ec>)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002770:	4b21      	ldr	r3, [pc, #132]	@ (80027f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d001      	beq.n	8002782 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e036      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278e:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4918      	ldr	r1, [pc, #96]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d009      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ac:	4b13      	ldr	r3, [pc, #76]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4910      	ldr	r1, [pc, #64]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027c0:	f000 f824 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <HAL_RCC_ClockConfig+0x1f0>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	490b      	ldr	r1, [pc, #44]	@ (8002800 <HAL_RCC_ClockConfig+0x1f4>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
 80027dc:	4a09      	ldr	r2, [pc, #36]	@ (8002804 <HAL_RCC_ClockConfig+0x1f8>)
 80027de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027e0:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <HAL_RCC_ClockConfig+0x1fc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe ff63 	bl	80016b0 <HAL_InitTick>
 80027ea:	4603      	mov	r3, r0
 80027ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80027ee:	7afb      	ldrb	r3, [r7, #11]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40022000 	.word	0x40022000
 80027fc:	40021000 	.word	0x40021000
 8002800:	08006718 	.word	0x08006718
 8002804:	20000000 	.word	0x20000000
 8002808:	20000004 	.word	0x20000004

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	@ 0x24
 8002810:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281a:	4b3e      	ldr	r3, [pc, #248]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x108>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002824:	4b3b      	ldr	r3, [pc, #236]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x108>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x34>
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d121      	bne.n	800287e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d11e      	bne.n	800287e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002840:	4b34      	ldr	r3, [pc, #208]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x108>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d107      	bne.n	800285c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800284c:	4b31      	ldr	r3, [pc, #196]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x108>)
 800284e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	e005      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800285c:	4b2d      	ldr	r3, [pc, #180]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x108>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002868:	4a2b      	ldr	r2, [pc, #172]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x10c>)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002870:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d102      	bne.n	800288a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002884:	4b25      	ldr	r3, [pc, #148]	@ (800291c <HAL_RCC_GetSysClockFreq+0x110>)
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	e004      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d101      	bne.n	8002894 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002890:	4b23      	ldr	r3, [pc, #140]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x114>)
 8002892:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d134      	bne.n	8002904 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800289a:	4b1e      	ldr	r3, [pc, #120]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x108>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d003      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d003      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0xac>
 80028b0:	e005      	b.n	80028be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028b2:	4b1a      	ldr	r3, [pc, #104]	@ (800291c <HAL_RCC_GetSysClockFreq+0x110>)
 80028b4:	617b      	str	r3, [r7, #20]
      break;
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028b8:	4b19      	ldr	r3, [pc, #100]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x114>)
 80028ba:	617b      	str	r3, [r7, #20]
      break;
 80028bc:	e002      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	617b      	str	r3, [r7, #20]
      break;
 80028c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028c4:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	3301      	adds	r3, #1
 80028d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	fb03 f202 	mul.w	r2, r3, r2
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	0e5b      	lsrs	r3, r3, #25
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	3301      	adds	r3, #1
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002904:	69bb      	ldr	r3, [r7, #24]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3724      	adds	r7, #36	@ 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	08006730 	.word	0x08006730
 800291c:	00f42400 	.word	0x00f42400
 8002920:	007a1200 	.word	0x007a1200

08002924 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002928:	4b03      	ldr	r3, [pc, #12]	@ (8002938 <HAL_RCC_GetHCLKFreq+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000

0800293c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002940:	f7ff fff0 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4904      	ldr	r1, [pc, #16]	@ (8002964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	08006728 	.word	0x08006728

08002968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800296c:	f7ff ffda 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0adb      	lsrs	r3, r3, #11
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4904      	ldr	r1, [pc, #16]	@ (8002990 <HAL_RCC_GetPCLK2Freq+0x28>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	08006728 	.word	0x08006728

08002994 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029a0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029ac:	f7ff f9ee 	bl	8001d8c <HAL_PWREx_GetVoltageRange>
 80029b0:	6178      	str	r0, [r7, #20]
 80029b2:	e014      	b.n	80029de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b4:	4b25      	ldr	r3, [pc, #148]	@ (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b8:	4a24      	ldr	r2, [pc, #144]	@ (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029be:	6593      	str	r3, [r2, #88]	@ 0x58
 80029c0:	4b22      	ldr	r3, [pc, #136]	@ (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029cc:	f7ff f9de 	bl	8001d8c <HAL_PWREx_GetVoltageRange>
 80029d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029d2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029e4:	d10b      	bne.n	80029fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b80      	cmp	r3, #128	@ 0x80
 80029ea:	d919      	bls.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80029f0:	d902      	bls.n	80029f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029f2:	2302      	movs	r3, #2
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	e013      	b.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029f8:	2301      	movs	r3, #1
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	e010      	b.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b80      	cmp	r3, #128	@ 0x80
 8002a02:	d902      	bls.n	8002a0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a04:	2303      	movs	r3, #3
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	e00a      	b.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b80      	cmp	r3, #128	@ 0x80
 8002a0e:	d102      	bne.n	8002a16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a10:	2302      	movs	r3, #2
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	e004      	b.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b70      	cmp	r3, #112	@ 0x70
 8002a1a:	d101      	bne.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a20:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 0207 	bic.w	r2, r3, #7
 8002a28:	4909      	ldr	r1, [pc, #36]	@ (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a30:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40022000 	.word	0x40022000

08002a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a60:	2300      	movs	r3, #0
 8002a62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d041      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a78:	d02a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a7e:	d824      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a84:	d008      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a8a:	d81e      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a94:	d010      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a96:	e018      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a98:	4b86      	ldr	r3, [pc, #536]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a85      	ldr	r2, [pc, #532]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aa4:	e015      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fabb 	bl	8003028 <RCCEx_PLLSAI1_Config>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ab6:	e00c      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3320      	adds	r3, #32
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fba6 	bl	8003210 <RCCEx_PLLSAI2_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ac8:	e003      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ace:	e000      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10b      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ad8:	4b76      	ldr	r3, [pc, #472]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ade:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ae6:	4973      	ldr	r1, [pc, #460]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002aee:	e001      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d041      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b08:	d02a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b0e:	d824      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b14:	d008      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b1a:	d81e      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b24:	d010      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b26:	e018      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b28:	4b62      	ldr	r3, [pc, #392]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4a61      	ldr	r2, [pc, #388]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b34:	e015      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fa73 	bl	8003028 <RCCEx_PLLSAI1_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b46:	e00c      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3320      	adds	r3, #32
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fb5e 	bl	8003210 <RCCEx_PLLSAI2_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b58:	e003      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b5e:	e000      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b62:	7cfb      	ldrb	r3, [r7, #19]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10b      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b68:	4b52      	ldr	r3, [pc, #328]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b76:	494f      	ldr	r1, [pc, #316]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b7e:	e001      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b80:	7cfb      	ldrb	r3, [r7, #19]
 8002b82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80a0 	beq.w	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b92:	2300      	movs	r3, #0
 8002b94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b96:	4b47      	ldr	r3, [pc, #284]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00d      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bac:	4b41      	ldr	r3, [pc, #260]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	4a40      	ldr	r2, [pc, #256]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a3a      	ldr	r2, [pc, #232]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bd4:	f7fe fdbc 	bl	8001750 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bda:	e009      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bdc:	f7fe fdb8 	bl	8001750 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d902      	bls.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	74fb      	strb	r3, [r7, #19]
        break;
 8002bee:	e005      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bf0:	4b31      	ldr	r3, [pc, #196]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ef      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d15c      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c02:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01f      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d019      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c20:	4b24      	ldr	r3, [pc, #144]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c2c:	4b21      	ldr	r3, [pc, #132]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	4a20      	ldr	r2, [pc, #128]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c4c:	4a19      	ldr	r2, [pc, #100]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7fe fd77 	bl	8001750 <HAL_GetTick>
 8002c62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c64:	e00b      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fe fd73 	bl	8001750 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d902      	bls.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c7c:	e006      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ec      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10c      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c92:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ca2:	4904      	ldr	r1, [pc, #16]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002caa:	e009      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	74bb      	strb	r3, [r7, #18]
 8002cb0:	e006      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc0:	7c7b      	ldrb	r3, [r7, #17]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d105      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc6:	4b9e      	ldr	r3, [pc, #632]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cca:	4a9d      	ldr	r2, [pc, #628]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cde:	4b98      	ldr	r3, [pc, #608]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce4:	f023 0203 	bic.w	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cec:	4994      	ldr	r1, [pc, #592]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d00:	4b8f      	ldr	r3, [pc, #572]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	f023 020c 	bic.w	r2, r3, #12
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0e:	498c      	ldr	r1, [pc, #560]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d22:	4b87      	ldr	r3, [pc, #540]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	4983      	ldr	r1, [pc, #524]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d44:	4b7e      	ldr	r3, [pc, #504]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	497b      	ldr	r1, [pc, #492]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d66:	4b76      	ldr	r3, [pc, #472]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d74:	4972      	ldr	r1, [pc, #456]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d88:	4b6d      	ldr	r3, [pc, #436]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d96:	496a      	ldr	r1, [pc, #424]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002daa:	4b65      	ldr	r3, [pc, #404]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db8:	4961      	ldr	r1, [pc, #388]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dda:	4959      	ldr	r1, [pc, #356]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dee:	4b54      	ldr	r3, [pc, #336]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dfc:	4950      	ldr	r1, [pc, #320]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e10:	4b4b      	ldr	r3, [pc, #300]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1e:	4948      	ldr	r1, [pc, #288]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e32:	4b43      	ldr	r3, [pc, #268]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e40:	493f      	ldr	r1, [pc, #252]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d028      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e54:	4b3a      	ldr	r3, [pc, #232]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e62:	4937      	ldr	r1, [pc, #220]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e72:	d106      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e74:	4b32      	ldr	r3, [pc, #200]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a31      	ldr	r2, [pc, #196]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e7e:	60d3      	str	r3, [r2, #12]
 8002e80:	e011      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	2101      	movs	r1, #1
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f8c8 	bl	8003028 <RCCEx_PLLSAI1_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ea2:	7cfb      	ldrb	r3, [r7, #19]
 8002ea4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d028      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002eb2:	4b23      	ldr	r3, [pc, #140]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	491f      	ldr	r1, [pc, #124]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ecc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ed0:	d106      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002edc:	60d3      	str	r3, [r2, #12]
 8002ede:	e011      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2101      	movs	r1, #1
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f899 	bl	8003028 <RCCEx_PLLSAI1_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d02b      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1e:	4908      	ldr	r1, [pc, #32]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f2e:	d109      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f30:	4b03      	ldr	r3, [pc, #12]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a02      	ldr	r2, [pc, #8]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f3a:	60d3      	str	r3, [r2, #12]
 8002f3c:	e014      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2101      	movs	r1, #1
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 f867 	bl	8003028 <RCCEx_PLLSAI1_Config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f5e:	7cfb      	ldrb	r3, [r7, #19]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d02f      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f74:	4b2b      	ldr	r3, [pc, #172]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f82:	4928      	ldr	r1, [pc, #160]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f92:	d10d      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3304      	adds	r3, #4
 8002f98:	2102      	movs	r1, #2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f844 	bl	8003028 <RCCEx_PLLSAI1_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d014      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	74bb      	strb	r3, [r7, #18]
 8002fae:	e011      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3320      	adds	r3, #32
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f925 	bl	8003210 <RCCEx_PLLSAI2_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fca:	7cfb      	ldrb	r3, [r7, #19]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fe0:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fee:	490d      	ldr	r1, [pc, #52]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003002:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003008:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003012:	4904      	ldr	r1, [pc, #16]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800301a:	7cbb      	ldrb	r3, [r7, #18]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000

08003028 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003036:	4b75      	ldr	r3, [pc, #468]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d018      	beq.n	8003074 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003042:	4b72      	ldr	r3, [pc, #456]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0203 	and.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d10d      	bne.n	800306e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
       ||
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800305a:	4b6c      	ldr	r3, [pc, #432]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	091b      	lsrs	r3, r3, #4
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
       ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d047      	beq.n	80030fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
 8003072:	e044      	b.n	80030fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d018      	beq.n	80030ae <RCCEx_PLLSAI1_Config+0x86>
 800307c:	2b03      	cmp	r3, #3
 800307e:	d825      	bhi.n	80030cc <RCCEx_PLLSAI1_Config+0xa4>
 8003080:	2b01      	cmp	r3, #1
 8003082:	d002      	beq.n	800308a <RCCEx_PLLSAI1_Config+0x62>
 8003084:	2b02      	cmp	r3, #2
 8003086:	d009      	beq.n	800309c <RCCEx_PLLSAI1_Config+0x74>
 8003088:	e020      	b.n	80030cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800308a:	4b60      	ldr	r3, [pc, #384]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d11d      	bne.n	80030d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800309a:	e01a      	b.n	80030d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800309c:	4b5b      	ldr	r3, [pc, #364]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d116      	bne.n	80030d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ac:	e013      	b.n	80030d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ae:	4b57      	ldr	r3, [pc, #348]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ba:	4b54      	ldr	r3, [pc, #336]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ca:	e006      	b.n	80030da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
      break;
 80030d0:	e004      	b.n	80030dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030d2:	bf00      	nop
 80030d4:	e002      	b.n	80030dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030d6:	bf00      	nop
 80030d8:	e000      	b.n	80030dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030da:	bf00      	nop
    }

    if(status == HAL_OK)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10d      	bne.n	80030fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030e2:	4b4a      	ldr	r3, [pc, #296]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	430b      	orrs	r3, r1
 80030f8:	4944      	ldr	r1, [pc, #272]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d17d      	bne.n	8003200 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003104:	4b41      	ldr	r3, [pc, #260]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a40      	ldr	r2, [pc, #256]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 800310a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800310e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003110:	f7fe fb1e 	bl	8001750 <HAL_GetTick>
 8003114:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003116:	e009      	b.n	800312c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003118:	f7fe fb1a 	bl	8001750 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d902      	bls.n	800312c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	73fb      	strb	r3, [r7, #15]
        break;
 800312a:	e005      	b.n	8003138 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800312c:	4b37      	ldr	r3, [pc, #220]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ef      	bne.n	8003118 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d160      	bne.n	8003200 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d111      	bne.n	8003168 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003144:	4b31      	ldr	r3, [pc, #196]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800314c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6892      	ldr	r2, [r2, #8]
 8003154:	0211      	lsls	r1, r2, #8
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68d2      	ldr	r2, [r2, #12]
 800315a:	0912      	lsrs	r2, r2, #4
 800315c:	0452      	lsls	r2, r2, #17
 800315e:	430a      	orrs	r2, r1
 8003160:	492a      	ldr	r1, [pc, #168]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	610b      	str	r3, [r1, #16]
 8003166:	e027      	b.n	80031b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d112      	bne.n	8003194 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800316e:	4b27      	ldr	r3, [pc, #156]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003176:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6892      	ldr	r2, [r2, #8]
 800317e:	0211      	lsls	r1, r2, #8
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6912      	ldr	r2, [r2, #16]
 8003184:	0852      	lsrs	r2, r2, #1
 8003186:	3a01      	subs	r2, #1
 8003188:	0552      	lsls	r2, r2, #21
 800318a:	430a      	orrs	r2, r1
 800318c:	491f      	ldr	r1, [pc, #124]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 800318e:	4313      	orrs	r3, r2
 8003190:	610b      	str	r3, [r1, #16]
 8003192:	e011      	b.n	80031b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003194:	4b1d      	ldr	r3, [pc, #116]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800319c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6892      	ldr	r2, [r2, #8]
 80031a4:	0211      	lsls	r1, r2, #8
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6952      	ldr	r2, [r2, #20]
 80031aa:	0852      	lsrs	r2, r2, #1
 80031ac:	3a01      	subs	r2, #1
 80031ae:	0652      	lsls	r2, r2, #25
 80031b0:	430a      	orrs	r2, r1
 80031b2:	4916      	ldr	r1, [pc, #88]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031b8:	4b14      	ldr	r3, [pc, #80]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a13      	ldr	r2, [pc, #76]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fe fac4 	bl	8001750 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031ca:	e009      	b.n	80031e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031cc:	f7fe fac0 	bl	8001750 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d902      	bls.n	80031e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	73fb      	strb	r3, [r7, #15]
          break;
 80031de:	e005      	b.n	80031ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031e0:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ef      	beq.n	80031cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031f2:	4b06      	ldr	r3, [pc, #24]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	4904      	ldr	r1, [pc, #16]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000

08003210 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800321e:	4b6a      	ldr	r3, [pc, #424]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d018      	beq.n	800325c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800322a:	4b67      	ldr	r3, [pc, #412]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0203 	and.w	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d10d      	bne.n	8003256 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
       ||
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003242:	4b61      	ldr	r3, [pc, #388]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
       ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d047      	beq.n	80032e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	73fb      	strb	r3, [r7, #15]
 800325a:	e044      	b.n	80032e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d018      	beq.n	8003296 <RCCEx_PLLSAI2_Config+0x86>
 8003264:	2b03      	cmp	r3, #3
 8003266:	d825      	bhi.n	80032b4 <RCCEx_PLLSAI2_Config+0xa4>
 8003268:	2b01      	cmp	r3, #1
 800326a:	d002      	beq.n	8003272 <RCCEx_PLLSAI2_Config+0x62>
 800326c:	2b02      	cmp	r3, #2
 800326e:	d009      	beq.n	8003284 <RCCEx_PLLSAI2_Config+0x74>
 8003270:	e020      	b.n	80032b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003272:	4b55      	ldr	r3, [pc, #340]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11d      	bne.n	80032ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003282:	e01a      	b.n	80032ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003284:	4b50      	ldr	r3, [pc, #320]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d116      	bne.n	80032be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003294:	e013      	b.n	80032be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003296:	4b4c      	ldr	r3, [pc, #304]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10f      	bne.n	80032c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032a2:	4b49      	ldr	r3, [pc, #292]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032b2:	e006      	b.n	80032c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
      break;
 80032b8:	e004      	b.n	80032c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032ba:	bf00      	nop
 80032bc:	e002      	b.n	80032c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032be:	bf00      	nop
 80032c0:	e000      	b.n	80032c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10d      	bne.n	80032e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032ca:	4b3f      	ldr	r3, [pc, #252]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	430b      	orrs	r3, r1
 80032e0:	4939      	ldr	r1, [pc, #228]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d167      	bne.n	80033bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032ec:	4b36      	ldr	r3, [pc, #216]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a35      	ldr	r2, [pc, #212]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f8:	f7fe fa2a 	bl	8001750 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032fe:	e009      	b.n	8003314 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003300:	f7fe fa26 	bl	8001750 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d902      	bls.n	8003314 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	73fb      	strb	r3, [r7, #15]
        break;
 8003312:	e005      	b.n	8003320 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003314:	4b2c      	ldr	r3, [pc, #176]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ef      	bne.n	8003300 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d14a      	bne.n	80033bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d111      	bne.n	8003350 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800332c:	4b26      	ldr	r3, [pc, #152]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6892      	ldr	r2, [r2, #8]
 800333c:	0211      	lsls	r1, r2, #8
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68d2      	ldr	r2, [r2, #12]
 8003342:	0912      	lsrs	r2, r2, #4
 8003344:	0452      	lsls	r2, r2, #17
 8003346:	430a      	orrs	r2, r1
 8003348:	491f      	ldr	r1, [pc, #124]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800334a:	4313      	orrs	r3, r2
 800334c:	614b      	str	r3, [r1, #20]
 800334e:	e011      	b.n	8003374 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003350:	4b1d      	ldr	r3, [pc, #116]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003358:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6892      	ldr	r2, [r2, #8]
 8003360:	0211      	lsls	r1, r2, #8
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6912      	ldr	r2, [r2, #16]
 8003366:	0852      	lsrs	r2, r2, #1
 8003368:	3a01      	subs	r2, #1
 800336a:	0652      	lsls	r2, r2, #25
 800336c:	430a      	orrs	r2, r1
 800336e:	4916      	ldr	r1, [pc, #88]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003370:	4313      	orrs	r3, r2
 8003372:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003374:	4b14      	ldr	r3, [pc, #80]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a13      	ldr	r2, [pc, #76]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800337a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800337e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fe f9e6 	bl	8001750 <HAL_GetTick>
 8003384:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003386:	e009      	b.n	800339c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003388:	f7fe f9e2 	bl	8001750 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d902      	bls.n	800339c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	73fb      	strb	r3, [r7, #15]
          break;
 800339a:	e005      	b.n	80033a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800339c:	4b0a      	ldr	r3, [pc, #40]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ef      	beq.n	8003388 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033ae:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000

080033cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e049      	b.n	8003472 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd fff8 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f000 fd16 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d001      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e04f      	b.n	8003534 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a23      	ldr	r2, [pc, #140]	@ (8003540 <HAL_TIM_Base_Start_IT+0xc4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01d      	beq.n	80034f2 <HAL_TIM_Base_Start_IT+0x76>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034be:	d018      	beq.n	80034f2 <HAL_TIM_Base_Start_IT+0x76>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003544 <HAL_TIM_Base_Start_IT+0xc8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_TIM_Base_Start_IT+0x76>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003548 <HAL_TIM_Base_Start_IT+0xcc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_TIM_Base_Start_IT+0x76>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1c      	ldr	r2, [pc, #112]	@ (800354c <HAL_TIM_Base_Start_IT+0xd0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_TIM_Base_Start_IT+0x76>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003550 <HAL_TIM_Base_Start_IT+0xd4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_TIM_Base_Start_IT+0x76>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a19      	ldr	r2, [pc, #100]	@ (8003554 <HAL_TIM_Base_Start_IT+0xd8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d115      	bne.n	800351e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	4b17      	ldr	r3, [pc, #92]	@ (8003558 <HAL_TIM_Base_Start_IT+0xdc>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b06      	cmp	r3, #6
 8003502:	d015      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0xb4>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800350a:	d011      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351c:	e008      	b.n	8003530 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e000      	b.n	8003532 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003530:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40013400 	.word	0x40013400
 8003554:	40014000 	.word	0x40014000
 8003558:	00010007 	.word	0x00010007

0800355c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e049      	b.n	8003602 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f841 	bl	800360a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f000 fc4e 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <HAL_TIM_PWM_Start+0x24>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e03c      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b04      	cmp	r3, #4
 8003648:	d109      	bne.n	800365e <HAL_TIM_PWM_Start+0x3e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e02f      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d109      	bne.n	8003678 <HAL_TIM_PWM_Start+0x58>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	e022      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d109      	bne.n	8003692 <HAL_TIM_PWM_Start+0x72>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e015      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b10      	cmp	r3, #16
 8003696:	d109      	bne.n	80036ac <HAL_TIM_PWM_Start+0x8c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e008      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e09c      	b.n	8003800 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <HAL_TIM_PWM_Start+0xb6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036d4:	e023      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d104      	bne.n	80036e6 <HAL_TIM_PWM_Start+0xc6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036e4:	e01b      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_PWM_Start+0xd6>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036f4:	e013      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Start+0xe6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003704:	e00b      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b10      	cmp	r3, #16
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0xf6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003714:	e003      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2201      	movs	r2, #1
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 ff92 	bl	8004650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a35      	ldr	r2, [pc, #212]	@ (8003808 <HAL_TIM_PWM_Start+0x1e8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_TIM_PWM_Start+0x13e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a34      	ldr	r2, [pc, #208]	@ (800380c <HAL_TIM_PWM_Start+0x1ec>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00e      	beq.n	800375e <HAL_TIM_PWM_Start+0x13e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a32      	ldr	r2, [pc, #200]	@ (8003810 <HAL_TIM_PWM_Start+0x1f0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d009      	beq.n	800375e <HAL_TIM_PWM_Start+0x13e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a31      	ldr	r2, [pc, #196]	@ (8003814 <HAL_TIM_PWM_Start+0x1f4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_TIM_PWM_Start+0x13e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2f      	ldr	r2, [pc, #188]	@ (8003818 <HAL_TIM_PWM_Start+0x1f8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_TIM_PWM_Start+0x142>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_TIM_PWM_Start+0x144>
 8003762:	2300      	movs	r3, #0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003776:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a22      	ldr	r2, [pc, #136]	@ (8003808 <HAL_TIM_PWM_Start+0x1e8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01d      	beq.n	80037be <HAL_TIM_PWM_Start+0x19e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800378a:	d018      	beq.n	80037be <HAL_TIM_PWM_Start+0x19e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a22      	ldr	r2, [pc, #136]	@ (800381c <HAL_TIM_PWM_Start+0x1fc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <HAL_TIM_PWM_Start+0x19e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a21      	ldr	r2, [pc, #132]	@ (8003820 <HAL_TIM_PWM_Start+0x200>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00e      	beq.n	80037be <HAL_TIM_PWM_Start+0x19e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003824 <HAL_TIM_PWM_Start+0x204>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d009      	beq.n	80037be <HAL_TIM_PWM_Start+0x19e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a17      	ldr	r2, [pc, #92]	@ (800380c <HAL_TIM_PWM_Start+0x1ec>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d004      	beq.n	80037be <HAL_TIM_PWM_Start+0x19e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a15      	ldr	r2, [pc, #84]	@ (8003810 <HAL_TIM_PWM_Start+0x1f0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d115      	bne.n	80037ea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	4b18      	ldr	r3, [pc, #96]	@ (8003828 <HAL_TIM_PWM_Start+0x208>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b06      	cmp	r3, #6
 80037ce:	d015      	beq.n	80037fc <HAL_TIM_PWM_Start+0x1dc>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d6:	d011      	beq.n	80037fc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e8:	e008      	b.n	80037fc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0201 	orr.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e000      	b.n	80037fe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40013400 	.word	0x40013400
 8003810:	40014000 	.word	0x40014000
 8003814:	40014400 	.word	0x40014400
 8003818:	40014800 	.word	0x40014800
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40000c00 	.word	0x40000c00
 8003828:	00010007 	.word	0x00010007

0800382c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d020      	beq.n	8003890 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01b      	beq.n	8003890 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0202 	mvn.w	r2, #2
 8003860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fac1 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fab3 	bl	8003dea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fac4 	bl	8003e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d020      	beq.n	80038dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01b      	beq.n	80038dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0204 	mvn.w	r2, #4
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fa9b 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa8d 	bl	8003dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fa9e 	bl	8003e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d020      	beq.n	8003928 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01b      	beq.n	8003928 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0208 	mvn.w	r2, #8
 80038f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2204      	movs	r2, #4
 80038fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fa75 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa67 	bl	8003dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fa78 	bl	8003e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d020      	beq.n	8003974 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01b      	beq.n	8003974 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0210 	mvn.w	r2, #16
 8003944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2208      	movs	r2, #8
 800394a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa4f 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 8003960:	e005      	b.n	800396e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fa41 	bl	8003dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fa52 	bl	8003e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00c      	beq.n	8003998 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0201 	mvn.w	r2, #1
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd fa5e 	bl	8000e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 ff02 	bl	80047c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80039d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fefa 	bl	80047d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00c      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa11 	bl	8003e26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00c      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0220 	mvn.w	r2, #32
 8003a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fec2 	bl	80047ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e0ff      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b14      	cmp	r3, #20
 8003a5a:	f200 80f0 	bhi.w	8003c3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003ab9 	.word	0x08003ab9
 8003a68:	08003c3f 	.word	0x08003c3f
 8003a6c:	08003c3f 	.word	0x08003c3f
 8003a70:	08003c3f 	.word	0x08003c3f
 8003a74:	08003af9 	.word	0x08003af9
 8003a78:	08003c3f 	.word	0x08003c3f
 8003a7c:	08003c3f 	.word	0x08003c3f
 8003a80:	08003c3f 	.word	0x08003c3f
 8003a84:	08003b3b 	.word	0x08003b3b
 8003a88:	08003c3f 	.word	0x08003c3f
 8003a8c:	08003c3f 	.word	0x08003c3f
 8003a90:	08003c3f 	.word	0x08003c3f
 8003a94:	08003b7b 	.word	0x08003b7b
 8003a98:	08003c3f 	.word	0x08003c3f
 8003a9c:	08003c3f 	.word	0x08003c3f
 8003aa0:	08003c3f 	.word	0x08003c3f
 8003aa4:	08003bbd 	.word	0x08003bbd
 8003aa8:	08003c3f 	.word	0x08003c3f
 8003aac:	08003c3f 	.word	0x08003c3f
 8003ab0:	08003c3f 	.word	0x08003c3f
 8003ab4:	08003bfd 	.word	0x08003bfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fa56 	bl	8003f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0208 	orr.w	r2, r2, #8
 8003ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0204 	bic.w	r2, r2, #4
 8003ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6999      	ldr	r1, [r3, #24]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	619a      	str	r2, [r3, #24]
      break;
 8003af6:	e0a5      	b.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fac6 	bl	8004090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6999      	ldr	r1, [r3, #24]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	021a      	lsls	r2, r3, #8
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	619a      	str	r2, [r3, #24]
      break;
 8003b38:	e084      	b.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fb2f 	bl	80041a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0208 	orr.w	r2, r2, #8
 8003b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0204 	bic.w	r2, r2, #4
 8003b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69d9      	ldr	r1, [r3, #28]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	61da      	str	r2, [r3, #28]
      break;
 8003b78:	e064      	b.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fb97 	bl	80042b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69d9      	ldr	r1, [r3, #28]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	021a      	lsls	r2, r3, #8
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	61da      	str	r2, [r3, #28]
      break;
 8003bba:	e043      	b.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fbe0 	bl	8004388 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0208 	orr.w	r2, r2, #8
 8003bd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0204 	bic.w	r2, r2, #4
 8003be6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bfa:	e023      	b.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fc24 	bl	8004450 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	021a      	lsls	r2, r3, #8
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c3c:	e002      	b.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	75fb      	strb	r3, [r7, #23]
      break;
 8003c42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop

08003c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_TIM_ConfigClockSource+0x1c>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e0b6      	b.n	8003de2 <HAL_TIM_ConfigClockSource+0x18a>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb0:	d03e      	beq.n	8003d30 <HAL_TIM_ConfigClockSource+0xd8>
 8003cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb6:	f200 8087 	bhi.w	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cbe:	f000 8086 	beq.w	8003dce <HAL_TIM_ConfigClockSource+0x176>
 8003cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc6:	d87f      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003cc8:	2b70      	cmp	r3, #112	@ 0x70
 8003cca:	d01a      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0xaa>
 8003ccc:	2b70      	cmp	r3, #112	@ 0x70
 8003cce:	d87b      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003cd0:	2b60      	cmp	r3, #96	@ 0x60
 8003cd2:	d050      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x11e>
 8003cd4:	2b60      	cmp	r3, #96	@ 0x60
 8003cd6:	d877      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003cd8:	2b50      	cmp	r3, #80	@ 0x50
 8003cda:	d03c      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0xfe>
 8003cdc:	2b50      	cmp	r3, #80	@ 0x50
 8003cde:	d873      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003ce0:	2b40      	cmp	r3, #64	@ 0x40
 8003ce2:	d058      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x13e>
 8003ce4:	2b40      	cmp	r3, #64	@ 0x40
 8003ce6:	d86f      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003ce8:	2b30      	cmp	r3, #48	@ 0x30
 8003cea:	d064      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x15e>
 8003cec:	2b30      	cmp	r3, #48	@ 0x30
 8003cee:	d86b      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d060      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x15e>
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d867      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d05c      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x15e>
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d05a      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x15e>
 8003d00:	e062      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d12:	f000 fc7d 	bl	8004610 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	609a      	str	r2, [r3, #8]
      break;
 8003d2e:	e04f      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d40:	f000 fc66 	bl	8004610 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d52:	609a      	str	r2, [r3, #8]
      break;
 8003d54:	e03c      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 fbda 	bl	800451c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2150      	movs	r1, #80	@ 0x50
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fc33 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 8003d74:	e02c      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d82:	461a      	mov	r2, r3
 8003d84:	f000 fbf9 	bl	800457a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2160      	movs	r1, #96	@ 0x60
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fc23 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 8003d94:	e01c      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da2:	461a      	mov	r2, r3
 8003da4:	f000 fbba 	bl	800451c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2140      	movs	r1, #64	@ 0x40
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fc13 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 8003db4:	e00c      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f000 fc0a 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 8003dc6:	e003      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a40      	ldr	r2, [pc, #256]	@ (8003f50 <TIM_Base_SetConfig+0x114>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d013      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5a:	d00f      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f54 <TIM_Base_SetConfig+0x118>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00b      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3c      	ldr	r2, [pc, #240]	@ (8003f58 <TIM_Base_SetConfig+0x11c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f5c <TIM_Base_SetConfig+0x120>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3a      	ldr	r2, [pc, #232]	@ (8003f60 <TIM_Base_SetConfig+0x124>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d108      	bne.n	8003e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2f      	ldr	r2, [pc, #188]	@ (8003f50 <TIM_Base_SetConfig+0x114>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01f      	beq.n	8003ed6 <TIM_Base_SetConfig+0x9a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9c:	d01b      	beq.n	8003ed6 <TIM_Base_SetConfig+0x9a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a2c      	ldr	r2, [pc, #176]	@ (8003f54 <TIM_Base_SetConfig+0x118>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d017      	beq.n	8003ed6 <TIM_Base_SetConfig+0x9a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f58 <TIM_Base_SetConfig+0x11c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <TIM_Base_SetConfig+0x9a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8003f5c <TIM_Base_SetConfig+0x120>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00f      	beq.n	8003ed6 <TIM_Base_SetConfig+0x9a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a29      	ldr	r2, [pc, #164]	@ (8003f60 <TIM_Base_SetConfig+0x124>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00b      	beq.n	8003ed6 <TIM_Base_SetConfig+0x9a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a28      	ldr	r2, [pc, #160]	@ (8003f64 <TIM_Base_SetConfig+0x128>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d007      	beq.n	8003ed6 <TIM_Base_SetConfig+0x9a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a27      	ldr	r2, [pc, #156]	@ (8003f68 <TIM_Base_SetConfig+0x12c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <TIM_Base_SetConfig+0x9a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a26      	ldr	r2, [pc, #152]	@ (8003f6c <TIM_Base_SetConfig+0x130>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d108      	bne.n	8003ee8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a10      	ldr	r2, [pc, #64]	@ (8003f50 <TIM_Base_SetConfig+0x114>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00f      	beq.n	8003f34 <TIM_Base_SetConfig+0xf8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a12      	ldr	r2, [pc, #72]	@ (8003f60 <TIM_Base_SetConfig+0x124>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00b      	beq.n	8003f34 <TIM_Base_SetConfig+0xf8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a11      	ldr	r2, [pc, #68]	@ (8003f64 <TIM_Base_SetConfig+0x128>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d007      	beq.n	8003f34 <TIM_Base_SetConfig+0xf8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a10      	ldr	r2, [pc, #64]	@ (8003f68 <TIM_Base_SetConfig+0x12c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_Base_SetConfig+0xf8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8003f6c <TIM_Base_SetConfig+0x130>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d103      	bne.n	8003f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	615a      	str	r2, [r3, #20]
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800
 8003f5c:	40000c00 	.word	0x40000c00
 8003f60:	40013400 	.word	0x40013400
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40014400 	.word	0x40014400
 8003f6c:	40014800 	.word	0x40014800

08003f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f023 0201 	bic.w	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 0302 	bic.w	r3, r3, #2
 8003fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a2c      	ldr	r2, [pc, #176]	@ (800407c <TIM_OC1_SetConfig+0x10c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00f      	beq.n	8003ff0 <TIM_OC1_SetConfig+0x80>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a2b      	ldr	r2, [pc, #172]	@ (8004080 <TIM_OC1_SetConfig+0x110>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00b      	beq.n	8003ff0 <TIM_OC1_SetConfig+0x80>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a2a      	ldr	r2, [pc, #168]	@ (8004084 <TIM_OC1_SetConfig+0x114>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <TIM_OC1_SetConfig+0x80>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a29      	ldr	r2, [pc, #164]	@ (8004088 <TIM_OC1_SetConfig+0x118>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC1_SetConfig+0x80>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a28      	ldr	r2, [pc, #160]	@ (800408c <TIM_OC1_SetConfig+0x11c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10c      	bne.n	800400a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0308 	bic.w	r3, r3, #8
 8003ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a1b      	ldr	r2, [pc, #108]	@ (800407c <TIM_OC1_SetConfig+0x10c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00f      	beq.n	8004032 <TIM_OC1_SetConfig+0xc2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1a      	ldr	r2, [pc, #104]	@ (8004080 <TIM_OC1_SetConfig+0x110>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <TIM_OC1_SetConfig+0xc2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a19      	ldr	r2, [pc, #100]	@ (8004084 <TIM_OC1_SetConfig+0x114>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <TIM_OC1_SetConfig+0xc2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a18      	ldr	r2, [pc, #96]	@ (8004088 <TIM_OC1_SetConfig+0x118>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_OC1_SetConfig+0xc2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a17      	ldr	r2, [pc, #92]	@ (800408c <TIM_OC1_SetConfig+0x11c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d111      	bne.n	8004056 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	621a      	str	r2, [r3, #32]
}
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40013400 	.word	0x40013400
 8004084:	40014000 	.word	0x40014000
 8004088:	40014400 	.word	0x40014400
 800408c:	40014800 	.word	0x40014800

08004090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f023 0210 	bic.w	r2, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0320 	bic.w	r3, r3, #32
 80040de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a28      	ldr	r2, [pc, #160]	@ (8004190 <TIM_OC2_SetConfig+0x100>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_OC2_SetConfig+0x6c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a27      	ldr	r2, [pc, #156]	@ (8004194 <TIM_OC2_SetConfig+0x104>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10d      	bne.n	8004118 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a1d      	ldr	r2, [pc, #116]	@ (8004190 <TIM_OC2_SetConfig+0x100>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00f      	beq.n	8004140 <TIM_OC2_SetConfig+0xb0>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a1c      	ldr	r2, [pc, #112]	@ (8004194 <TIM_OC2_SetConfig+0x104>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00b      	beq.n	8004140 <TIM_OC2_SetConfig+0xb0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a1b      	ldr	r2, [pc, #108]	@ (8004198 <TIM_OC2_SetConfig+0x108>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_OC2_SetConfig+0xb0>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a1a      	ldr	r2, [pc, #104]	@ (800419c <TIM_OC2_SetConfig+0x10c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC2_SetConfig+0xb0>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a19      	ldr	r2, [pc, #100]	@ (80041a0 <TIM_OC2_SetConfig+0x110>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d113      	bne.n	8004168 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800414e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40012c00 	.word	0x40012c00
 8004194:	40013400 	.word	0x40013400
 8004198:	40014000 	.word	0x40014000
 800419c:	40014400 	.word	0x40014400
 80041a0:	40014800 	.word	0x40014800

080041a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a27      	ldr	r2, [pc, #156]	@ (80042a0 <TIM_OC3_SetConfig+0xfc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <TIM_OC3_SetConfig+0x6a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a26      	ldr	r2, [pc, #152]	@ (80042a4 <TIM_OC3_SetConfig+0x100>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d10d      	bne.n	800422a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a1c      	ldr	r2, [pc, #112]	@ (80042a0 <TIM_OC3_SetConfig+0xfc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00f      	beq.n	8004252 <TIM_OC3_SetConfig+0xae>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1b      	ldr	r2, [pc, #108]	@ (80042a4 <TIM_OC3_SetConfig+0x100>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00b      	beq.n	8004252 <TIM_OC3_SetConfig+0xae>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a1a      	ldr	r2, [pc, #104]	@ (80042a8 <TIM_OC3_SetConfig+0x104>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <TIM_OC3_SetConfig+0xae>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a19      	ldr	r2, [pc, #100]	@ (80042ac <TIM_OC3_SetConfig+0x108>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <TIM_OC3_SetConfig+0xae>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a18      	ldr	r2, [pc, #96]	@ (80042b0 <TIM_OC3_SetConfig+0x10c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d113      	bne.n	800427a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	621a      	str	r2, [r3, #32]
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40013400 	.word	0x40013400
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40014400 	.word	0x40014400
 80042b0:	40014800 	.word	0x40014800

080042b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	031b      	lsls	r3, r3, #12
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a18      	ldr	r2, [pc, #96]	@ (8004374 <TIM_OC4_SetConfig+0xc0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00f      	beq.n	8004338 <TIM_OC4_SetConfig+0x84>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a17      	ldr	r2, [pc, #92]	@ (8004378 <TIM_OC4_SetConfig+0xc4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00b      	beq.n	8004338 <TIM_OC4_SetConfig+0x84>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a16      	ldr	r2, [pc, #88]	@ (800437c <TIM_OC4_SetConfig+0xc8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d007      	beq.n	8004338 <TIM_OC4_SetConfig+0x84>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a15      	ldr	r2, [pc, #84]	@ (8004380 <TIM_OC4_SetConfig+0xcc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d003      	beq.n	8004338 <TIM_OC4_SetConfig+0x84>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a14      	ldr	r2, [pc, #80]	@ (8004384 <TIM_OC4_SetConfig+0xd0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d109      	bne.n	800434c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800433e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	019b      	lsls	r3, r3, #6
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	621a      	str	r2, [r3, #32]
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40013400 	.word	0x40013400
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800

08004388 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80043cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a17      	ldr	r2, [pc, #92]	@ (800443c <TIM_OC5_SetConfig+0xb4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00f      	beq.n	8004402 <TIM_OC5_SetConfig+0x7a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a16      	ldr	r2, [pc, #88]	@ (8004440 <TIM_OC5_SetConfig+0xb8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00b      	beq.n	8004402 <TIM_OC5_SetConfig+0x7a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a15      	ldr	r2, [pc, #84]	@ (8004444 <TIM_OC5_SetConfig+0xbc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d007      	beq.n	8004402 <TIM_OC5_SetConfig+0x7a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a14      	ldr	r2, [pc, #80]	@ (8004448 <TIM_OC5_SetConfig+0xc0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <TIM_OC5_SetConfig+0x7a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a13      	ldr	r2, [pc, #76]	@ (800444c <TIM_OC5_SetConfig+0xc4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d109      	bne.n	8004416 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004408:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40013400 	.word	0x40013400
 8004444:	40014000 	.word	0x40014000
 8004448:	40014400 	.word	0x40014400
 800444c:	40014800 	.word	0x40014800

08004450 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800447e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	051b      	lsls	r3, r3, #20
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a18      	ldr	r2, [pc, #96]	@ (8004508 <TIM_OC6_SetConfig+0xb8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00f      	beq.n	80044cc <TIM_OC6_SetConfig+0x7c>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a17      	ldr	r2, [pc, #92]	@ (800450c <TIM_OC6_SetConfig+0xbc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00b      	beq.n	80044cc <TIM_OC6_SetConfig+0x7c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a16      	ldr	r2, [pc, #88]	@ (8004510 <TIM_OC6_SetConfig+0xc0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d007      	beq.n	80044cc <TIM_OC6_SetConfig+0x7c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a15      	ldr	r2, [pc, #84]	@ (8004514 <TIM_OC6_SetConfig+0xc4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_OC6_SetConfig+0x7c>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a14      	ldr	r2, [pc, #80]	@ (8004518 <TIM_OC6_SetConfig+0xc8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d109      	bne.n	80044e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	029b      	lsls	r3, r3, #10
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40013400 	.word	0x40013400
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800

0800451c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f023 0201 	bic.w	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f023 030a 	bic.w	r3, r3, #10
 8004558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800457a:	b480      	push	{r7}
 800457c:	b087      	sub	sp, #28
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f023 0210 	bic.w	r2, r3, #16
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	031b      	lsls	r3, r3, #12
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f043 0307 	orr.w	r3, r3, #7
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800462a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	021a      	lsls	r2, r3, #8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	431a      	orrs	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	2201      	movs	r2, #1
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a1a      	ldr	r2, [r3, #32]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	43db      	mvns	r3, r3
 8004672:	401a      	ands	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1a      	ldr	r2, [r3, #32]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	fa01 f303 	lsl.w	r3, r1, r3
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e068      	b.n	8004786 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d108      	bne.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004700:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1e      	ldr	r2, [pc, #120]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01d      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004726:	d018      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1b      	ldr	r2, [pc, #108]	@ (800479c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1a      	ldr	r2, [pc, #104]	@ (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00e      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a18      	ldr	r2, [pc, #96]	@ (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a13      	ldr	r2, [pc, #76]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a14      	ldr	r2, [pc, #80]	@ (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d10c      	bne.n	8004774 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	4313      	orrs	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40013400 	.word	0x40013400
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40014000 	.word	0x40014000

080047ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e040      	b.n	800487c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc fe66 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2224      	movs	r2, #36	@ 0x24
 8004814:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fae0 	bl	8004df4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f825 	bl	8004884 <UART_SetConfig>
 800483a:	4603      	mov	r3, r0
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e01b      	b.n	800487c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fb5f 	bl	8004f38 <UART_CheckIdleState>
 800487a:	4603      	mov	r3, r0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004888:	b08a      	sub	sp, #40	@ 0x28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4ba4      	ldr	r3, [pc, #656]	@ (8004b44 <UART_SetConfig+0x2c0>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048bc:	430b      	orrs	r3, r1
 80048be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a99      	ldr	r2, [pc, #612]	@ (8004b48 <UART_SetConfig+0x2c4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ec:	4313      	orrs	r3, r2
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004900:	430a      	orrs	r2, r1
 8004902:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a90      	ldr	r2, [pc, #576]	@ (8004b4c <UART_SetConfig+0x2c8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d126      	bne.n	800495c <UART_SetConfig+0xd8>
 800490e:	4b90      	ldr	r3, [pc, #576]	@ (8004b50 <UART_SetConfig+0x2cc>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	2b03      	cmp	r3, #3
 800491a:	d81b      	bhi.n	8004954 <UART_SetConfig+0xd0>
 800491c:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <UART_SetConfig+0xa0>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004935 	.word	0x08004935
 8004928:	08004945 	.word	0x08004945
 800492c:	0800493d 	.word	0x0800493d
 8004930:	0800494d 	.word	0x0800494d
 8004934:	2301      	movs	r3, #1
 8004936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493a:	e116      	b.n	8004b6a <UART_SetConfig+0x2e6>
 800493c:	2302      	movs	r3, #2
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004942:	e112      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004944:	2304      	movs	r3, #4
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494a:	e10e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 800494c:	2308      	movs	r3, #8
 800494e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004952:	e10a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004954:	2310      	movs	r3, #16
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800495a:	e106      	b.n	8004b6a <UART_SetConfig+0x2e6>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a7c      	ldr	r2, [pc, #496]	@ (8004b54 <UART_SetConfig+0x2d0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d138      	bne.n	80049d8 <UART_SetConfig+0x154>
 8004966:	4b7a      	ldr	r3, [pc, #488]	@ (8004b50 <UART_SetConfig+0x2cc>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b0c      	cmp	r3, #12
 8004972:	d82d      	bhi.n	80049d0 <UART_SetConfig+0x14c>
 8004974:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <UART_SetConfig+0xf8>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049b1 	.word	0x080049b1
 8004980:	080049d1 	.word	0x080049d1
 8004984:	080049d1 	.word	0x080049d1
 8004988:	080049d1 	.word	0x080049d1
 800498c:	080049c1 	.word	0x080049c1
 8004990:	080049d1 	.word	0x080049d1
 8004994:	080049d1 	.word	0x080049d1
 8004998:	080049d1 	.word	0x080049d1
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049d1 	.word	0x080049d1
 80049a4:	080049d1 	.word	0x080049d1
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049c9 	.word	0x080049c9
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b6:	e0d8      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049b8:	2302      	movs	r3, #2
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049be:	e0d4      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049c0:	2304      	movs	r3, #4
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049c6:	e0d0      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049c8:	2308      	movs	r3, #8
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ce:	e0cc      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049d0:	2310      	movs	r3, #16
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d6:	e0c8      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004b58 <UART_SetConfig+0x2d4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d125      	bne.n	8004a2e <UART_SetConfig+0x1aa>
 80049e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004b50 <UART_SetConfig+0x2cc>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049ec:	2b30      	cmp	r3, #48	@ 0x30
 80049ee:	d016      	beq.n	8004a1e <UART_SetConfig+0x19a>
 80049f0:	2b30      	cmp	r3, #48	@ 0x30
 80049f2:	d818      	bhi.n	8004a26 <UART_SetConfig+0x1a2>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d00a      	beq.n	8004a0e <UART_SetConfig+0x18a>
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d814      	bhi.n	8004a26 <UART_SetConfig+0x1a2>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <UART_SetConfig+0x182>
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d008      	beq.n	8004a16 <UART_SetConfig+0x192>
 8004a04:	e00f      	b.n	8004a26 <UART_SetConfig+0x1a2>
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0c:	e0ad      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a14:	e0a9      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a16:	2304      	movs	r3, #4
 8004a18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1c:	e0a5      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a24:	e0a1      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a26:	2310      	movs	r3, #16
 8004a28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a2c:	e09d      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a4a      	ldr	r2, [pc, #296]	@ (8004b5c <UART_SetConfig+0x2d8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d125      	bne.n	8004a84 <UART_SetConfig+0x200>
 8004a38:	4b45      	ldr	r3, [pc, #276]	@ (8004b50 <UART_SetConfig+0x2cc>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a42:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a44:	d016      	beq.n	8004a74 <UART_SetConfig+0x1f0>
 8004a46:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a48:	d818      	bhi.n	8004a7c <UART_SetConfig+0x1f8>
 8004a4a:	2b80      	cmp	r3, #128	@ 0x80
 8004a4c:	d00a      	beq.n	8004a64 <UART_SetConfig+0x1e0>
 8004a4e:	2b80      	cmp	r3, #128	@ 0x80
 8004a50:	d814      	bhi.n	8004a7c <UART_SetConfig+0x1f8>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <UART_SetConfig+0x1d8>
 8004a56:	2b40      	cmp	r3, #64	@ 0x40
 8004a58:	d008      	beq.n	8004a6c <UART_SetConfig+0x1e8>
 8004a5a:	e00f      	b.n	8004a7c <UART_SetConfig+0x1f8>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a62:	e082      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a64:	2302      	movs	r3, #2
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6a:	e07e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a72:	e07a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a74:	2308      	movs	r3, #8
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7a:	e076      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a82:	e072      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a35      	ldr	r2, [pc, #212]	@ (8004b60 <UART_SetConfig+0x2dc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d12a      	bne.n	8004ae4 <UART_SetConfig+0x260>
 8004a8e:	4b30      	ldr	r3, [pc, #192]	@ (8004b50 <UART_SetConfig+0x2cc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a9c:	d01a      	beq.n	8004ad4 <UART_SetConfig+0x250>
 8004a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aa2:	d81b      	bhi.n	8004adc <UART_SetConfig+0x258>
 8004aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aa8:	d00c      	beq.n	8004ac4 <UART_SetConfig+0x240>
 8004aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aae:	d815      	bhi.n	8004adc <UART_SetConfig+0x258>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <UART_SetConfig+0x238>
 8004ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ab8:	d008      	beq.n	8004acc <UART_SetConfig+0x248>
 8004aba:	e00f      	b.n	8004adc <UART_SetConfig+0x258>
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac2:	e052      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aca:	e04e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004acc:	2304      	movs	r3, #4
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad2:	e04a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ada:	e046      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004adc:	2310      	movs	r3, #16
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae2:	e042      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a17      	ldr	r2, [pc, #92]	@ (8004b48 <UART_SetConfig+0x2c4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d13a      	bne.n	8004b64 <UART_SetConfig+0x2e0>
 8004aee:	4b18      	ldr	r3, [pc, #96]	@ (8004b50 <UART_SetConfig+0x2cc>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004af8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004afc:	d01a      	beq.n	8004b34 <UART_SetConfig+0x2b0>
 8004afe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b02:	d81b      	bhi.n	8004b3c <UART_SetConfig+0x2b8>
 8004b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b08:	d00c      	beq.n	8004b24 <UART_SetConfig+0x2a0>
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b0e:	d815      	bhi.n	8004b3c <UART_SetConfig+0x2b8>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <UART_SetConfig+0x298>
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b18:	d008      	beq.n	8004b2c <UART_SetConfig+0x2a8>
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x2b8>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b22:	e022      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b24:	2302      	movs	r3, #2
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2a:	e01e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b32:	e01a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b34:	2308      	movs	r3, #8
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3a:	e016      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b42:	e012      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b44:	efff69f3 	.word	0xefff69f3
 8004b48:	40008000 	.word	0x40008000
 8004b4c:	40013800 	.word	0x40013800
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40004400 	.word	0x40004400
 8004b58:	40004800 	.word	0x40004800
 8004b5c:	40004c00 	.word	0x40004c00
 8004b60:	40005000 	.word	0x40005000
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a9f      	ldr	r2, [pc, #636]	@ (8004dec <UART_SetConfig+0x568>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d17a      	bne.n	8004c6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d824      	bhi.n	8004bc6 <UART_SetConfig+0x342>
 8004b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b84 <UART_SetConfig+0x300>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bb7 	.word	0x08004bb7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bc7 	.word	0x08004bc7
 8004ba0:	08004bc7 	.word	0x08004bc7
 8004ba4:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba8:	f7fd fec8 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8004bac:	61f8      	str	r0, [r7, #28]
        break;
 8004bae:	e010      	b.n	8004bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b8f      	ldr	r3, [pc, #572]	@ (8004df0 <UART_SetConfig+0x56c>)
 8004bb2:	61fb      	str	r3, [r7, #28]
        break;
 8004bb4:	e00d      	b.n	8004bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fd fe29 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8004bba:	61f8      	str	r0, [r7, #28]
        break;
 8004bbc:	e009      	b.n	8004bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bc2:	61fb      	str	r3, [r7, #28]
        break;
 8004bc4:	e005      	b.n	8004bd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004bd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80fb 	beq.w	8004dd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	4413      	add	r3, r2
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d305      	bcc.n	8004bf6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d903      	bls.n	8004bfe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bfc:	e0e8      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2200      	movs	r2, #0
 8004c02:	461c      	mov	r4, r3
 8004c04:	4615      	mov	r5, r2
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	022b      	lsls	r3, r5, #8
 8004c10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c14:	0222      	lsls	r2, r4, #8
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	6849      	ldr	r1, [r1, #4]
 8004c1a:	0849      	lsrs	r1, r1, #1
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	4688      	mov	r8, r1
 8004c20:	4681      	mov	r9, r0
 8004c22:	eb12 0a08 	adds.w	sl, r2, r8
 8004c26:	eb43 0b09 	adc.w	fp, r3, r9
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	603b      	str	r3, [r7, #0]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c38:	4650      	mov	r0, sl
 8004c3a:	4659      	mov	r1, fp
 8004c3c:	f7fb ff92 	bl	8000b64 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c4e:	d308      	bcc.n	8004c62 <UART_SetConfig+0x3de>
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c56:	d204      	bcs.n	8004c62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	60da      	str	r2, [r3, #12]
 8004c60:	e0b6      	b.n	8004dd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c68:	e0b2      	b.n	8004dd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c72:	d15e      	bne.n	8004d32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d828      	bhi.n	8004cce <UART_SetConfig+0x44a>
 8004c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c84 <UART_SetConfig+0x400>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08004ccf 	.word	0x08004ccf
 8004c94:	08004cbf 	.word	0x08004cbf
 8004c98:	08004ccf 	.word	0x08004ccf
 8004c9c:	08004ccf 	.word	0x08004ccf
 8004ca0:	08004ccf 	.word	0x08004ccf
 8004ca4:	08004cc7 	.word	0x08004cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fd fe48 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8004cac:	61f8      	str	r0, [r7, #28]
        break;
 8004cae:	e014      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb0:	f7fd fe5a 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8004cb4:	61f8      	str	r0, [r7, #28]
        break;
 8004cb6:	e010      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8004df0 <UART_SetConfig+0x56c>)
 8004cba:	61fb      	str	r3, [r7, #28]
        break;
 8004cbc:	e00d      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cbe:	f7fd fda5 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8004cc2:	61f8      	str	r0, [r7, #28]
        break;
 8004cc4:	e009      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cca:	61fb      	str	r3, [r7, #28]
        break;
 8004ccc:	e005      	b.n	8004cda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d077      	beq.n	8004dd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	005a      	lsls	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	441a      	add	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b0f      	cmp	r3, #15
 8004cfa:	d916      	bls.n	8004d2a <UART_SetConfig+0x4a6>
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d02:	d212      	bcs.n	8004d2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f023 030f 	bic.w	r3, r3, #15
 8004d0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	8afb      	ldrh	r3, [r7, #22]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	8afa      	ldrh	r2, [r7, #22]
 8004d26:	60da      	str	r2, [r3, #12]
 8004d28:	e052      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d30:	e04e      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d827      	bhi.n	8004d8a <UART_SetConfig+0x506>
 8004d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d40 <UART_SetConfig+0x4bc>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d6d 	.word	0x08004d6d
 8004d48:	08004d75 	.word	0x08004d75
 8004d4c:	08004d8b 	.word	0x08004d8b
 8004d50:	08004d7b 	.word	0x08004d7b
 8004d54:	08004d8b 	.word	0x08004d8b
 8004d58:	08004d8b 	.word	0x08004d8b
 8004d5c:	08004d8b 	.word	0x08004d8b
 8004d60:	08004d83 	.word	0x08004d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d64:	f7fd fdea 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8004d68:	61f8      	str	r0, [r7, #28]
        break;
 8004d6a:	e014      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7fd fdfc 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8004d70:	61f8      	str	r0, [r7, #28]
        break;
 8004d72:	e010      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d74:	4b1e      	ldr	r3, [pc, #120]	@ (8004df0 <UART_SetConfig+0x56c>)
 8004d76:	61fb      	str	r3, [r7, #28]
        break;
 8004d78:	e00d      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7a:	f7fd fd47 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8004d7e:	61f8      	str	r0, [r7, #28]
        break;
 8004d80:	e009      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d86:	61fb      	str	r3, [r7, #28]
        break;
 8004d88:	e005      	b.n	8004d96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d94:	bf00      	nop
    }

    if (pclk != 0U)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d019      	beq.n	8004dd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	085a      	lsrs	r2, r3, #1
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	d909      	bls.n	8004dca <UART_SetConfig+0x546>
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dbc:	d205      	bcs.n	8004dca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60da      	str	r2, [r3, #12]
 8004dc8:	e002      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ddc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3728      	adds	r7, #40	@ 0x28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dea:	bf00      	nop
 8004dec:	40008000 	.word	0x40008000
 8004df0:	00f42400 	.word	0x00f42400

08004df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01a      	beq.n	8004f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ef2:	d10a      	bne.n	8004f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  }
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b098      	sub	sp, #96	@ 0x60
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f48:	f7fc fc02 	bl	8001750 <HAL_GetTick>
 8004f4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d12e      	bne.n	8004fba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f64:	2200      	movs	r2, #0
 8004f66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f88c 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d021      	beq.n	8004fba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e6      	bne.n	8004f76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e062      	b.n	8005080 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d149      	bne.n	800505c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f856 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d03c      	beq.n	800505c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005000:	633b      	str	r3, [r7, #48]	@ 0x30
 8005002:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800500e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e6      	bne.n	8004fe2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	60fb      	str	r3, [r7, #12]
   return(result);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3308      	adds	r3, #8
 8005032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005034:	61fa      	str	r2, [r7, #28]
 8005036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	617b      	str	r3, [r7, #20]
   return(result);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e5      	bne.n	8005014 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e011      	b.n	8005080 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3758      	adds	r7, #88	@ 0x58
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	4613      	mov	r3, r2
 8005096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005098:	e049      	b.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d045      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a2:	f7fc fb55 	bl	8001750 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d302      	bcc.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e048      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d031      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d110      	bne.n	80050fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2208      	movs	r2, #8
 80050de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f838 	bl	8005156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2208      	movs	r2, #8
 80050ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e029      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005108:	d111      	bne.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f81e 	bl	8005156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e00f      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	429a      	cmp	r2, r3
 800514a:	d0a6      	beq.n	800509a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005156:	b480      	push	{r7}
 8005158:	b095      	sub	sp, #84	@ 0x54
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800516c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800517c:	643b      	str	r3, [r7, #64]	@ 0x40
 800517e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005182:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005184:	e841 2300 	strex	r3, r2, [r1]
 8005188:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e6      	bne.n	800515e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3308      	adds	r3, #8
 8005196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	61fb      	str	r3, [r7, #28]
   return(result);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3308      	adds	r3, #8
 80051ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e5      	bne.n	8005190 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d118      	bne.n	80051fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f023 0310 	bic.w	r3, r3, #16
 80051e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6979      	ldr	r1, [r7, #20]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	613b      	str	r3, [r7, #16]
   return(result);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e6      	bne.n	80051cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005212:	bf00      	nop
 8005214:	3754      	adds	r7, #84	@ 0x54
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <memset>:
 800521e:	4402      	add	r2, r0
 8005220:	4603      	mov	r3, r0
 8005222:	4293      	cmp	r3, r2
 8005224:	d100      	bne.n	8005228 <memset+0xa>
 8005226:	4770      	bx	lr
 8005228:	f803 1b01 	strb.w	r1, [r3], #1
 800522c:	e7f9      	b.n	8005222 <memset+0x4>
	...

08005230 <__errno>:
 8005230:	4b01      	ldr	r3, [pc, #4]	@ (8005238 <__errno+0x8>)
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	2000000c 	.word	0x2000000c

0800523c <__libc_init_array>:
 800523c:	b570      	push	{r4, r5, r6, lr}
 800523e:	4d0d      	ldr	r5, [pc, #52]	@ (8005274 <__libc_init_array+0x38>)
 8005240:	4c0d      	ldr	r4, [pc, #52]	@ (8005278 <__libc_init_array+0x3c>)
 8005242:	1b64      	subs	r4, r4, r5
 8005244:	10a4      	asrs	r4, r4, #2
 8005246:	2600      	movs	r6, #0
 8005248:	42a6      	cmp	r6, r4
 800524a:	d109      	bne.n	8005260 <__libc_init_array+0x24>
 800524c:	4d0b      	ldr	r5, [pc, #44]	@ (800527c <__libc_init_array+0x40>)
 800524e:	4c0c      	ldr	r4, [pc, #48]	@ (8005280 <__libc_init_array+0x44>)
 8005250:	f001 fa56 	bl	8006700 <_init>
 8005254:	1b64      	subs	r4, r4, r5
 8005256:	10a4      	asrs	r4, r4, #2
 8005258:	2600      	movs	r6, #0
 800525a:	42a6      	cmp	r6, r4
 800525c:	d105      	bne.n	800526a <__libc_init_array+0x2e>
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	f855 3b04 	ldr.w	r3, [r5], #4
 8005264:	4798      	blx	r3
 8005266:	3601      	adds	r6, #1
 8005268:	e7ee      	b.n	8005248 <__libc_init_array+0xc>
 800526a:	f855 3b04 	ldr.w	r3, [r5], #4
 800526e:	4798      	blx	r3
 8005270:	3601      	adds	r6, #1
 8005272:	e7f2      	b.n	800525a <__libc_init_array+0x1e>
 8005274:	08006970 	.word	0x08006970
 8005278:	08006970 	.word	0x08006970
 800527c:	08006970 	.word	0x08006970
 8005280:	08006974 	.word	0x08006974
 8005284:	00000000 	.word	0x00000000

08005288 <exp>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	ed2d 8b02 	vpush	{d8}
 800528e:	ec55 4b10 	vmov	r4, r5, d0
 8005292:	f000 fa25 	bl	80056e0 <__ieee754_exp>
 8005296:	eeb0 8a40 	vmov.f32	s16, s0
 800529a:	eef0 8a60 	vmov.f32	s17, s1
 800529e:	ec45 4b10 	vmov	d0, r4, r5
 80052a2:	f000 f88d 	bl	80053c0 <finite>
 80052a6:	b168      	cbz	r0, 80052c4 <exp+0x3c>
 80052a8:	a317      	add	r3, pc, #92	@ (adr r3, 8005308 <exp+0x80>)
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	4620      	mov	r0, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	f7fb fbd5 	bl	8000a60 <__aeabi_dcmpgt>
 80052b6:	b160      	cbz	r0, 80052d2 <exp+0x4a>
 80052b8:	f7ff ffba 	bl	8005230 <__errno>
 80052bc:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 80052f8 <exp+0x70>
 80052c0:	2322      	movs	r3, #34	@ 0x22
 80052c2:	6003      	str	r3, [r0, #0]
 80052c4:	eeb0 0a48 	vmov.f32	s0, s16
 80052c8:	eef0 0a68 	vmov.f32	s1, s17
 80052cc:	ecbd 8b02 	vpop	{d8}
 80052d0:	bd38      	pop	{r3, r4, r5, pc}
 80052d2:	a30f      	add	r3, pc, #60	@ (adr r3, 8005310 <exp+0x88>)
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	4620      	mov	r0, r4
 80052da:	4629      	mov	r1, r5
 80052dc:	f7fb fba2 	bl	8000a24 <__aeabi_dcmplt>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d0ef      	beq.n	80052c4 <exp+0x3c>
 80052e4:	f7ff ffa4 	bl	8005230 <__errno>
 80052e8:	2322      	movs	r3, #34	@ 0x22
 80052ea:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8005300 <exp+0x78>
 80052ee:	6003      	str	r3, [r0, #0]
 80052f0:	e7e8      	b.n	80052c4 <exp+0x3c>
 80052f2:	bf00      	nop
 80052f4:	f3af 8000 	nop.w
 80052f8:	00000000 	.word	0x00000000
 80052fc:	7ff00000 	.word	0x7ff00000
	...
 8005308:	fefa39ef 	.word	0xfefa39ef
 800530c:	40862e42 	.word	0x40862e42
 8005310:	d52d3051 	.word	0xd52d3051
 8005314:	c0874910 	.word	0xc0874910

08005318 <sin>:
 8005318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800531a:	ec53 2b10 	vmov	r2, r3, d0
 800531e:	4826      	ldr	r0, [pc, #152]	@ (80053b8 <sin+0xa0>)
 8005320:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005324:	4281      	cmp	r1, r0
 8005326:	d807      	bhi.n	8005338 <sin+0x20>
 8005328:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80053b0 <sin+0x98>
 800532c:	2000      	movs	r0, #0
 800532e:	b005      	add	sp, #20
 8005330:	f85d eb04 	ldr.w	lr, [sp], #4
 8005334:	f000 b918 	b.w	8005568 <__kernel_sin>
 8005338:	4820      	ldr	r0, [pc, #128]	@ (80053bc <sin+0xa4>)
 800533a:	4281      	cmp	r1, r0
 800533c:	d908      	bls.n	8005350 <sin+0x38>
 800533e:	4610      	mov	r0, r2
 8005340:	4619      	mov	r1, r3
 8005342:	f7fa ff45 	bl	80001d0 <__aeabi_dsub>
 8005346:	ec41 0b10 	vmov	d0, r0, r1
 800534a:	b005      	add	sp, #20
 800534c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005350:	4668      	mov	r0, sp
 8005352:	f000 fb41 	bl	80059d8 <__ieee754_rem_pio2>
 8005356:	f000 0003 	and.w	r0, r0, #3
 800535a:	2801      	cmp	r0, #1
 800535c:	d00c      	beq.n	8005378 <sin+0x60>
 800535e:	2802      	cmp	r0, #2
 8005360:	d011      	beq.n	8005386 <sin+0x6e>
 8005362:	b9e8      	cbnz	r0, 80053a0 <sin+0x88>
 8005364:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005368:	ed9d 0b00 	vldr	d0, [sp]
 800536c:	2001      	movs	r0, #1
 800536e:	f000 f8fb 	bl	8005568 <__kernel_sin>
 8005372:	ec51 0b10 	vmov	r0, r1, d0
 8005376:	e7e6      	b.n	8005346 <sin+0x2e>
 8005378:	ed9d 1b02 	vldr	d1, [sp, #8]
 800537c:	ed9d 0b00 	vldr	d0, [sp]
 8005380:	f000 f82a 	bl	80053d8 <__kernel_cos>
 8005384:	e7f5      	b.n	8005372 <sin+0x5a>
 8005386:	ed9d 1b02 	vldr	d1, [sp, #8]
 800538a:	ed9d 0b00 	vldr	d0, [sp]
 800538e:	2001      	movs	r0, #1
 8005390:	f000 f8ea 	bl	8005568 <__kernel_sin>
 8005394:	ec53 2b10 	vmov	r2, r3, d0
 8005398:	4610      	mov	r0, r2
 800539a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800539e:	e7d2      	b.n	8005346 <sin+0x2e>
 80053a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80053a4:	ed9d 0b00 	vldr	d0, [sp]
 80053a8:	f000 f816 	bl	80053d8 <__kernel_cos>
 80053ac:	e7f2      	b.n	8005394 <sin+0x7c>
 80053ae:	bf00      	nop
	...
 80053b8:	3fe921fb 	.word	0x3fe921fb
 80053bc:	7fefffff 	.word	0x7fefffff

080053c0 <finite>:
 80053c0:	b082      	sub	sp, #8
 80053c2:	ed8d 0b00 	vstr	d0, [sp]
 80053c6:	9801      	ldr	r0, [sp, #4]
 80053c8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80053cc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80053d0:	0fc0      	lsrs	r0, r0, #31
 80053d2:	b002      	add	sp, #8
 80053d4:	4770      	bx	lr
	...

080053d8 <__kernel_cos>:
 80053d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	ec57 6b10 	vmov	r6, r7, d0
 80053e0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80053e4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80053e8:	ed8d 1b00 	vstr	d1, [sp]
 80053ec:	d206      	bcs.n	80053fc <__kernel_cos+0x24>
 80053ee:	4630      	mov	r0, r6
 80053f0:	4639      	mov	r1, r7
 80053f2:	f7fb fb3f 	bl	8000a74 <__aeabi_d2iz>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f000 8088 	beq.w	800550c <__kernel_cos+0x134>
 80053fc:	4632      	mov	r2, r6
 80053fe:	463b      	mov	r3, r7
 8005400:	4630      	mov	r0, r6
 8005402:	4639      	mov	r1, r7
 8005404:	f7fb f89c 	bl	8000540 <__aeabi_dmul>
 8005408:	4b51      	ldr	r3, [pc, #324]	@ (8005550 <__kernel_cos+0x178>)
 800540a:	2200      	movs	r2, #0
 800540c:	4604      	mov	r4, r0
 800540e:	460d      	mov	r5, r1
 8005410:	f7fb f896 	bl	8000540 <__aeabi_dmul>
 8005414:	a340      	add	r3, pc, #256	@ (adr r3, 8005518 <__kernel_cos+0x140>)
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	4682      	mov	sl, r0
 800541c:	468b      	mov	fp, r1
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f7fb f88d 	bl	8000540 <__aeabi_dmul>
 8005426:	a33e      	add	r3, pc, #248	@ (adr r3, 8005520 <__kernel_cos+0x148>)
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f7fa fed2 	bl	80001d4 <__adddf3>
 8005430:	4622      	mov	r2, r4
 8005432:	462b      	mov	r3, r5
 8005434:	f7fb f884 	bl	8000540 <__aeabi_dmul>
 8005438:	a33b      	add	r3, pc, #236	@ (adr r3, 8005528 <__kernel_cos+0x150>)
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f7fa fec7 	bl	80001d0 <__aeabi_dsub>
 8005442:	4622      	mov	r2, r4
 8005444:	462b      	mov	r3, r5
 8005446:	f7fb f87b 	bl	8000540 <__aeabi_dmul>
 800544a:	a339      	add	r3, pc, #228	@ (adr r3, 8005530 <__kernel_cos+0x158>)
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	f7fa fec0 	bl	80001d4 <__adddf3>
 8005454:	4622      	mov	r2, r4
 8005456:	462b      	mov	r3, r5
 8005458:	f7fb f872 	bl	8000540 <__aeabi_dmul>
 800545c:	a336      	add	r3, pc, #216	@ (adr r3, 8005538 <__kernel_cos+0x160>)
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	f7fa feb5 	bl	80001d0 <__aeabi_dsub>
 8005466:	4622      	mov	r2, r4
 8005468:	462b      	mov	r3, r5
 800546a:	f7fb f869 	bl	8000540 <__aeabi_dmul>
 800546e:	a334      	add	r3, pc, #208	@ (adr r3, 8005540 <__kernel_cos+0x168>)
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	f7fa feae 	bl	80001d4 <__adddf3>
 8005478:	4622      	mov	r2, r4
 800547a:	462b      	mov	r3, r5
 800547c:	f7fb f860 	bl	8000540 <__aeabi_dmul>
 8005480:	4622      	mov	r2, r4
 8005482:	462b      	mov	r3, r5
 8005484:	f7fb f85c 	bl	8000540 <__aeabi_dmul>
 8005488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800548c:	4604      	mov	r4, r0
 800548e:	460d      	mov	r5, r1
 8005490:	4630      	mov	r0, r6
 8005492:	4639      	mov	r1, r7
 8005494:	f7fb f854 	bl	8000540 <__aeabi_dmul>
 8005498:	460b      	mov	r3, r1
 800549a:	4602      	mov	r2, r0
 800549c:	4629      	mov	r1, r5
 800549e:	4620      	mov	r0, r4
 80054a0:	f7fa fe96 	bl	80001d0 <__aeabi_dsub>
 80054a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005554 <__kernel_cos+0x17c>)
 80054a6:	4598      	cmp	r8, r3
 80054a8:	4606      	mov	r6, r0
 80054aa:	460f      	mov	r7, r1
 80054ac:	d810      	bhi.n	80054d0 <__kernel_cos+0xf8>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4650      	mov	r0, sl
 80054b4:	4659      	mov	r1, fp
 80054b6:	f7fa fe8b 	bl	80001d0 <__aeabi_dsub>
 80054ba:	460b      	mov	r3, r1
 80054bc:	4926      	ldr	r1, [pc, #152]	@ (8005558 <__kernel_cos+0x180>)
 80054be:	4602      	mov	r2, r0
 80054c0:	2000      	movs	r0, #0
 80054c2:	f7fa fe85 	bl	80001d0 <__aeabi_dsub>
 80054c6:	ec41 0b10 	vmov	d0, r0, r1
 80054ca:	b003      	add	sp, #12
 80054cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d0:	4b22      	ldr	r3, [pc, #136]	@ (800555c <__kernel_cos+0x184>)
 80054d2:	4921      	ldr	r1, [pc, #132]	@ (8005558 <__kernel_cos+0x180>)
 80054d4:	4598      	cmp	r8, r3
 80054d6:	bf8c      	ite	hi
 80054d8:	4d21      	ldrhi	r5, [pc, #132]	@ (8005560 <__kernel_cos+0x188>)
 80054da:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80054de:	2400      	movs	r4, #0
 80054e0:	4622      	mov	r2, r4
 80054e2:	462b      	mov	r3, r5
 80054e4:	2000      	movs	r0, #0
 80054e6:	f7fa fe73 	bl	80001d0 <__aeabi_dsub>
 80054ea:	4622      	mov	r2, r4
 80054ec:	4680      	mov	r8, r0
 80054ee:	4689      	mov	r9, r1
 80054f0:	462b      	mov	r3, r5
 80054f2:	4650      	mov	r0, sl
 80054f4:	4659      	mov	r1, fp
 80054f6:	f7fa fe6b 	bl	80001d0 <__aeabi_dsub>
 80054fa:	4632      	mov	r2, r6
 80054fc:	463b      	mov	r3, r7
 80054fe:	f7fa fe67 	bl	80001d0 <__aeabi_dsub>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4640      	mov	r0, r8
 8005508:	4649      	mov	r1, r9
 800550a:	e7da      	b.n	80054c2 <__kernel_cos+0xea>
 800550c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005548 <__kernel_cos+0x170>
 8005510:	e7db      	b.n	80054ca <__kernel_cos+0xf2>
 8005512:	bf00      	nop
 8005514:	f3af 8000 	nop.w
 8005518:	be8838d4 	.word	0xbe8838d4
 800551c:	bda8fae9 	.word	0xbda8fae9
 8005520:	bdb4b1c4 	.word	0xbdb4b1c4
 8005524:	3e21ee9e 	.word	0x3e21ee9e
 8005528:	809c52ad 	.word	0x809c52ad
 800552c:	3e927e4f 	.word	0x3e927e4f
 8005530:	19cb1590 	.word	0x19cb1590
 8005534:	3efa01a0 	.word	0x3efa01a0
 8005538:	16c15177 	.word	0x16c15177
 800553c:	3f56c16c 	.word	0x3f56c16c
 8005540:	5555554c 	.word	0x5555554c
 8005544:	3fa55555 	.word	0x3fa55555
 8005548:	00000000 	.word	0x00000000
 800554c:	3ff00000 	.word	0x3ff00000
 8005550:	3fe00000 	.word	0x3fe00000
 8005554:	3fd33332 	.word	0x3fd33332
 8005558:	3ff00000 	.word	0x3ff00000
 800555c:	3fe90000 	.word	0x3fe90000
 8005560:	3fd20000 	.word	0x3fd20000
 8005564:	00000000 	.word	0x00000000

08005568 <__kernel_sin>:
 8005568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556c:	ec55 4b10 	vmov	r4, r5, d0
 8005570:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005574:	b085      	sub	sp, #20
 8005576:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800557a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800557e:	4680      	mov	r8, r0
 8005580:	d205      	bcs.n	800558e <__kernel_sin+0x26>
 8005582:	4620      	mov	r0, r4
 8005584:	4629      	mov	r1, r5
 8005586:	f7fb fa75 	bl	8000a74 <__aeabi_d2iz>
 800558a:	2800      	cmp	r0, #0
 800558c:	d052      	beq.n	8005634 <__kernel_sin+0xcc>
 800558e:	4622      	mov	r2, r4
 8005590:	462b      	mov	r3, r5
 8005592:	4620      	mov	r0, r4
 8005594:	4629      	mov	r1, r5
 8005596:	f7fa ffd3 	bl	8000540 <__aeabi_dmul>
 800559a:	4682      	mov	sl, r0
 800559c:	468b      	mov	fp, r1
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4620      	mov	r0, r4
 80055a4:	4629      	mov	r1, r5
 80055a6:	f7fa ffcb 	bl	8000540 <__aeabi_dmul>
 80055aa:	a342      	add	r3, pc, #264	@ (adr r3, 80056b4 <__kernel_sin+0x14c>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	e9cd 0100 	strd	r0, r1, [sp]
 80055b4:	4650      	mov	r0, sl
 80055b6:	4659      	mov	r1, fp
 80055b8:	f7fa ffc2 	bl	8000540 <__aeabi_dmul>
 80055bc:	a33f      	add	r3, pc, #252	@ (adr r3, 80056bc <__kernel_sin+0x154>)
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	f7fa fe05 	bl	80001d0 <__aeabi_dsub>
 80055c6:	4652      	mov	r2, sl
 80055c8:	465b      	mov	r3, fp
 80055ca:	f7fa ffb9 	bl	8000540 <__aeabi_dmul>
 80055ce:	a33d      	add	r3, pc, #244	@ (adr r3, 80056c4 <__kernel_sin+0x15c>)
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f7fa fdfe 	bl	80001d4 <__adddf3>
 80055d8:	4652      	mov	r2, sl
 80055da:	465b      	mov	r3, fp
 80055dc:	f7fa ffb0 	bl	8000540 <__aeabi_dmul>
 80055e0:	a33a      	add	r3, pc, #232	@ (adr r3, 80056cc <__kernel_sin+0x164>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f7fa fdf3 	bl	80001d0 <__aeabi_dsub>
 80055ea:	4652      	mov	r2, sl
 80055ec:	465b      	mov	r3, fp
 80055ee:	f7fa ffa7 	bl	8000540 <__aeabi_dmul>
 80055f2:	a338      	add	r3, pc, #224	@ (adr r3, 80056d4 <__kernel_sin+0x16c>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f7fa fdec 	bl	80001d4 <__adddf3>
 80055fc:	4606      	mov	r6, r0
 80055fe:	460f      	mov	r7, r1
 8005600:	f1b8 0f00 	cmp.w	r8, #0
 8005604:	d11b      	bne.n	800563e <__kernel_sin+0xd6>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4650      	mov	r0, sl
 800560c:	4659      	mov	r1, fp
 800560e:	f7fa ff97 	bl	8000540 <__aeabi_dmul>
 8005612:	a325      	add	r3, pc, #148	@ (adr r3, 80056a8 <__kernel_sin+0x140>)
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	f7fa fdda 	bl	80001d0 <__aeabi_dsub>
 800561c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005620:	f7fa ff8e 	bl	8000540 <__aeabi_dmul>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4620      	mov	r0, r4
 800562a:	4629      	mov	r1, r5
 800562c:	f7fa fdd2 	bl	80001d4 <__adddf3>
 8005630:	4604      	mov	r4, r0
 8005632:	460d      	mov	r5, r1
 8005634:	ec45 4b10 	vmov	d0, r4, r5
 8005638:	b005      	add	sp, #20
 800563a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005642:	4b1b      	ldr	r3, [pc, #108]	@ (80056b0 <__kernel_sin+0x148>)
 8005644:	2200      	movs	r2, #0
 8005646:	f7fa ff7b 	bl	8000540 <__aeabi_dmul>
 800564a:	4632      	mov	r2, r6
 800564c:	4680      	mov	r8, r0
 800564e:	4689      	mov	r9, r1
 8005650:	463b      	mov	r3, r7
 8005652:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005656:	f7fa ff73 	bl	8000540 <__aeabi_dmul>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4640      	mov	r0, r8
 8005660:	4649      	mov	r1, r9
 8005662:	f7fa fdb5 	bl	80001d0 <__aeabi_dsub>
 8005666:	4652      	mov	r2, sl
 8005668:	465b      	mov	r3, fp
 800566a:	f7fa ff69 	bl	8000540 <__aeabi_dmul>
 800566e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005672:	f7fa fdad 	bl	80001d0 <__aeabi_dsub>
 8005676:	a30c      	add	r3, pc, #48	@ (adr r3, 80056a8 <__kernel_sin+0x140>)
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	4606      	mov	r6, r0
 800567e:	460f      	mov	r7, r1
 8005680:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005684:	f7fa ff5c 	bl	8000540 <__aeabi_dmul>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4630      	mov	r0, r6
 800568e:	4639      	mov	r1, r7
 8005690:	f7fa fda0 	bl	80001d4 <__adddf3>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4620      	mov	r0, r4
 800569a:	4629      	mov	r1, r5
 800569c:	f7fa fd98 	bl	80001d0 <__aeabi_dsub>
 80056a0:	e7c6      	b.n	8005630 <__kernel_sin+0xc8>
 80056a2:	bf00      	nop
 80056a4:	f3af 8000 	nop.w
 80056a8:	55555549 	.word	0x55555549
 80056ac:	3fc55555 	.word	0x3fc55555
 80056b0:	3fe00000 	.word	0x3fe00000
 80056b4:	5acfd57c 	.word	0x5acfd57c
 80056b8:	3de5d93a 	.word	0x3de5d93a
 80056bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80056c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80056c4:	57b1fe7d 	.word	0x57b1fe7d
 80056c8:	3ec71de3 	.word	0x3ec71de3
 80056cc:	19c161d5 	.word	0x19c161d5
 80056d0:	3f2a01a0 	.word	0x3f2a01a0
 80056d4:	1110f8a6 	.word	0x1110f8a6
 80056d8:	3f811111 	.word	0x3f811111
 80056dc:	00000000 	.word	0x00000000

080056e0 <__ieee754_exp>:
 80056e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056e4:	ec55 4b10 	vmov	r4, r5, d0
 80056e8:	49b1      	ldr	r1, [pc, #708]	@ (80059b0 <__ieee754_exp+0x2d0>)
 80056ea:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80056ee:	428a      	cmp	r2, r1
 80056f0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80056f4:	d936      	bls.n	8005764 <__ieee754_exp+0x84>
 80056f6:	49af      	ldr	r1, [pc, #700]	@ (80059b4 <__ieee754_exp+0x2d4>)
 80056f8:	428a      	cmp	r2, r1
 80056fa:	d914      	bls.n	8005726 <__ieee754_exp+0x46>
 80056fc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005700:	4323      	orrs	r3, r4
 8005702:	4622      	mov	r2, r4
 8005704:	d007      	beq.n	8005716 <__ieee754_exp+0x36>
 8005706:	462b      	mov	r3, r5
 8005708:	4620      	mov	r0, r4
 800570a:	4629      	mov	r1, r5
 800570c:	f7fa fd62 	bl	80001d4 <__adddf3>
 8005710:	4604      	mov	r4, r0
 8005712:	460d      	mov	r5, r1
 8005714:	e002      	b.n	800571c <__ieee754_exp+0x3c>
 8005716:	2e00      	cmp	r6, #0
 8005718:	f040 8118 	bne.w	800594c <__ieee754_exp+0x26c>
 800571c:	ec45 4b10 	vmov	d0, r4, r5
 8005720:	b004      	add	sp, #16
 8005722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005726:	a38c      	add	r3, pc, #560	@ (adr r3, 8005958 <__ieee754_exp+0x278>)
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	4620      	mov	r0, r4
 800572e:	4629      	mov	r1, r5
 8005730:	f7fb f996 	bl	8000a60 <__aeabi_dcmpgt>
 8005734:	4607      	mov	r7, r0
 8005736:	b128      	cbz	r0, 8005744 <__ieee754_exp+0x64>
 8005738:	2000      	movs	r0, #0
 800573a:	b004      	add	sp, #16
 800573c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005740:	f000 bb82 	b.w	8005e48 <__math_oflow>
 8005744:	a386      	add	r3, pc, #536	@ (adr r3, 8005960 <__ieee754_exp+0x280>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	4620      	mov	r0, r4
 800574c:	4629      	mov	r1, r5
 800574e:	f7fb f969 	bl	8000a24 <__aeabi_dcmplt>
 8005752:	2800      	cmp	r0, #0
 8005754:	f000 8087 	beq.w	8005866 <__ieee754_exp+0x186>
 8005758:	4638      	mov	r0, r7
 800575a:	b004      	add	sp, #16
 800575c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	f000 bb6a 	b.w	8005e38 <__math_uflow>
 8005764:	4b94      	ldr	r3, [pc, #592]	@ (80059b8 <__ieee754_exp+0x2d8>)
 8005766:	429a      	cmp	r2, r3
 8005768:	f240 80a9 	bls.w	80058be <__ieee754_exp+0x1de>
 800576c:	4b93      	ldr	r3, [pc, #588]	@ (80059bc <__ieee754_exp+0x2dc>)
 800576e:	429a      	cmp	r2, r3
 8005770:	d879      	bhi.n	8005866 <__ieee754_exp+0x186>
 8005772:	4b93      	ldr	r3, [pc, #588]	@ (80059c0 <__ieee754_exp+0x2e0>)
 8005774:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	4620      	mov	r0, r4
 800577e:	4629      	mov	r1, r5
 8005780:	f7fa fd26 	bl	80001d0 <__aeabi_dsub>
 8005784:	4b8f      	ldr	r3, [pc, #572]	@ (80059c4 <__ieee754_exp+0x2e4>)
 8005786:	00f7      	lsls	r7, r6, #3
 8005788:	443b      	add	r3, r7
 800578a:	ed93 7b00 	vldr	d7, [r3]
 800578e:	ed8d 7b00 	vstr	d7, [sp]
 8005792:	f1c6 0a01 	rsb	sl, r6, #1
 8005796:	4680      	mov	r8, r0
 8005798:	4689      	mov	r9, r1
 800579a:	ebaa 0a06 	sub.w	sl, sl, r6
 800579e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057a2:	4640      	mov	r0, r8
 80057a4:	4649      	mov	r1, r9
 80057a6:	f7fa fd13 	bl	80001d0 <__aeabi_dsub>
 80057aa:	4604      	mov	r4, r0
 80057ac:	460d      	mov	r5, r1
 80057ae:	4622      	mov	r2, r4
 80057b0:	462b      	mov	r3, r5
 80057b2:	4620      	mov	r0, r4
 80057b4:	4629      	mov	r1, r5
 80057b6:	f7fa fec3 	bl	8000540 <__aeabi_dmul>
 80057ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8005968 <__ieee754_exp+0x288>)
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	4606      	mov	r6, r0
 80057c2:	460f      	mov	r7, r1
 80057c4:	f7fa febc 	bl	8000540 <__aeabi_dmul>
 80057c8:	a369      	add	r3, pc, #420	@ (adr r3, 8005970 <__ieee754_exp+0x290>)
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f7fa fcff 	bl	80001d0 <__aeabi_dsub>
 80057d2:	4632      	mov	r2, r6
 80057d4:	463b      	mov	r3, r7
 80057d6:	f7fa feb3 	bl	8000540 <__aeabi_dmul>
 80057da:	a367      	add	r3, pc, #412	@ (adr r3, 8005978 <__ieee754_exp+0x298>)
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f7fa fcf8 	bl	80001d4 <__adddf3>
 80057e4:	4632      	mov	r2, r6
 80057e6:	463b      	mov	r3, r7
 80057e8:	f7fa feaa 	bl	8000540 <__aeabi_dmul>
 80057ec:	a364      	add	r3, pc, #400	@ (adr r3, 8005980 <__ieee754_exp+0x2a0>)
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	f7fa fced 	bl	80001d0 <__aeabi_dsub>
 80057f6:	4632      	mov	r2, r6
 80057f8:	463b      	mov	r3, r7
 80057fa:	f7fa fea1 	bl	8000540 <__aeabi_dmul>
 80057fe:	a362      	add	r3, pc, #392	@ (adr r3, 8005988 <__ieee754_exp+0x2a8>)
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f7fa fce6 	bl	80001d4 <__adddf3>
 8005808:	4632      	mov	r2, r6
 800580a:	463b      	mov	r3, r7
 800580c:	f7fa fe98 	bl	8000540 <__aeabi_dmul>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4620      	mov	r0, r4
 8005816:	4629      	mov	r1, r5
 8005818:	f7fa fcda 	bl	80001d0 <__aeabi_dsub>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4606      	mov	r6, r0
 8005822:	460f      	mov	r7, r1
 8005824:	4620      	mov	r0, r4
 8005826:	4629      	mov	r1, r5
 8005828:	f7fa fe8a 	bl	8000540 <__aeabi_dmul>
 800582c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005830:	f1ba 0f00 	cmp.w	sl, #0
 8005834:	d15c      	bne.n	80058f0 <__ieee754_exp+0x210>
 8005836:	2200      	movs	r2, #0
 8005838:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800583c:	4630      	mov	r0, r6
 800583e:	4639      	mov	r1, r7
 8005840:	f7fa fcc6 	bl	80001d0 <__aeabi_dsub>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800584c:	f7fa ffa2 	bl	8000794 <__aeabi_ddiv>
 8005850:	4622      	mov	r2, r4
 8005852:	462b      	mov	r3, r5
 8005854:	f7fa fcbc 	bl	80001d0 <__aeabi_dsub>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	2000      	movs	r0, #0
 800585e:	495a      	ldr	r1, [pc, #360]	@ (80059c8 <__ieee754_exp+0x2e8>)
 8005860:	f7fa fcb6 	bl	80001d0 <__aeabi_dsub>
 8005864:	e754      	b.n	8005710 <__ieee754_exp+0x30>
 8005866:	4b59      	ldr	r3, [pc, #356]	@ (80059cc <__ieee754_exp+0x2ec>)
 8005868:	4620      	mov	r0, r4
 800586a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800586e:	4629      	mov	r1, r5
 8005870:	a347      	add	r3, pc, #284	@ (adr r3, 8005990 <__ieee754_exp+0x2b0>)
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f7fa fe63 	bl	8000540 <__aeabi_dmul>
 800587a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800587e:	f7fa fca9 	bl	80001d4 <__adddf3>
 8005882:	f7fb f8f7 	bl	8000a74 <__aeabi_d2iz>
 8005886:	4682      	mov	sl, r0
 8005888:	f7fa fdf0 	bl	800046c <__aeabi_i2d>
 800588c:	a342      	add	r3, pc, #264	@ (adr r3, 8005998 <__ieee754_exp+0x2b8>)
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	4606      	mov	r6, r0
 8005894:	460f      	mov	r7, r1
 8005896:	f7fa fe53 	bl	8000540 <__aeabi_dmul>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4620      	mov	r0, r4
 80058a0:	4629      	mov	r1, r5
 80058a2:	f7fa fc95 	bl	80001d0 <__aeabi_dsub>
 80058a6:	a33e      	add	r3, pc, #248	@ (adr r3, 80059a0 <__ieee754_exp+0x2c0>)
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	4680      	mov	r8, r0
 80058ae:	4689      	mov	r9, r1
 80058b0:	4630      	mov	r0, r6
 80058b2:	4639      	mov	r1, r7
 80058b4:	f7fa fe44 	bl	8000540 <__aeabi_dmul>
 80058b8:	e9cd 0100 	strd	r0, r1, [sp]
 80058bc:	e76f      	b.n	800579e <__ieee754_exp+0xbe>
 80058be:	4b44      	ldr	r3, [pc, #272]	@ (80059d0 <__ieee754_exp+0x2f0>)
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d810      	bhi.n	80058e6 <__ieee754_exp+0x206>
 80058c4:	a338      	add	r3, pc, #224	@ (adr r3, 80059a8 <__ieee754_exp+0x2c8>)
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	4620      	mov	r0, r4
 80058cc:	4629      	mov	r1, r5
 80058ce:	f7fa fc81 	bl	80001d4 <__adddf3>
 80058d2:	4b3d      	ldr	r3, [pc, #244]	@ (80059c8 <__ieee754_exp+0x2e8>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	f7fb f8c3 	bl	8000a60 <__aeabi_dcmpgt>
 80058da:	b138      	cbz	r0, 80058ec <__ieee754_exp+0x20c>
 80058dc:	4b3a      	ldr	r3, [pc, #232]	@ (80059c8 <__ieee754_exp+0x2e8>)
 80058de:	2200      	movs	r2, #0
 80058e0:	4620      	mov	r0, r4
 80058e2:	4629      	mov	r1, r5
 80058e4:	e712      	b.n	800570c <__ieee754_exp+0x2c>
 80058e6:	f04f 0a00 	mov.w	sl, #0
 80058ea:	e760      	b.n	80057ae <__ieee754_exp+0xce>
 80058ec:	4682      	mov	sl, r0
 80058ee:	e75e      	b.n	80057ae <__ieee754_exp+0xce>
 80058f0:	4632      	mov	r2, r6
 80058f2:	463b      	mov	r3, r7
 80058f4:	2000      	movs	r0, #0
 80058f6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80058fa:	f7fa fc69 	bl	80001d0 <__aeabi_dsub>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005906:	f7fa ff45 	bl	8000794 <__aeabi_ddiv>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005912:	f7fa fc5d 	bl	80001d0 <__aeabi_dsub>
 8005916:	4642      	mov	r2, r8
 8005918:	464b      	mov	r3, r9
 800591a:	f7fa fc59 	bl	80001d0 <__aeabi_dsub>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	2000      	movs	r0, #0
 8005924:	4928      	ldr	r1, [pc, #160]	@ (80059c8 <__ieee754_exp+0x2e8>)
 8005926:	f7fa fc53 	bl	80001d0 <__aeabi_dsub>
 800592a:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800592e:	4592      	cmp	sl, r2
 8005930:	db02      	blt.n	8005938 <__ieee754_exp+0x258>
 8005932:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005936:	e6eb      	b.n	8005710 <__ieee754_exp+0x30>
 8005938:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800593c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005940:	2200      	movs	r2, #0
 8005942:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8005946:	f7fa fdfb 	bl	8000540 <__aeabi_dmul>
 800594a:	e6e1      	b.n	8005710 <__ieee754_exp+0x30>
 800594c:	2400      	movs	r4, #0
 800594e:	2500      	movs	r5, #0
 8005950:	e6e4      	b.n	800571c <__ieee754_exp+0x3c>
 8005952:	bf00      	nop
 8005954:	f3af 8000 	nop.w
 8005958:	fefa39ef 	.word	0xfefa39ef
 800595c:	40862e42 	.word	0x40862e42
 8005960:	d52d3051 	.word	0xd52d3051
 8005964:	c0874910 	.word	0xc0874910
 8005968:	72bea4d0 	.word	0x72bea4d0
 800596c:	3e663769 	.word	0x3e663769
 8005970:	c5d26bf1 	.word	0xc5d26bf1
 8005974:	3ebbbd41 	.word	0x3ebbbd41
 8005978:	af25de2c 	.word	0xaf25de2c
 800597c:	3f11566a 	.word	0x3f11566a
 8005980:	16bebd93 	.word	0x16bebd93
 8005984:	3f66c16c 	.word	0x3f66c16c
 8005988:	5555553e 	.word	0x5555553e
 800598c:	3fc55555 	.word	0x3fc55555
 8005990:	652b82fe 	.word	0x652b82fe
 8005994:	3ff71547 	.word	0x3ff71547
 8005998:	fee00000 	.word	0xfee00000
 800599c:	3fe62e42 	.word	0x3fe62e42
 80059a0:	35793c76 	.word	0x35793c76
 80059a4:	3dea39ef 	.word	0x3dea39ef
 80059a8:	8800759c 	.word	0x8800759c
 80059ac:	7e37e43c 	.word	0x7e37e43c
 80059b0:	40862e41 	.word	0x40862e41
 80059b4:	7fefffff 	.word	0x7fefffff
 80059b8:	3fd62e42 	.word	0x3fd62e42
 80059bc:	3ff0a2b1 	.word	0x3ff0a2b1
 80059c0:	08006770 	.word	0x08006770
 80059c4:	08006760 	.word	0x08006760
 80059c8:	3ff00000 	.word	0x3ff00000
 80059cc:	08006780 	.word	0x08006780
 80059d0:	3defffff 	.word	0x3defffff
 80059d4:	00000000 	.word	0x00000000

080059d8 <__ieee754_rem_pio2>:
 80059d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059dc:	ec57 6b10 	vmov	r6, r7, d0
 80059e0:	4bc5      	ldr	r3, [pc, #788]	@ (8005cf8 <__ieee754_rem_pio2+0x320>)
 80059e2:	b08d      	sub	sp, #52	@ 0x34
 80059e4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80059e8:	4598      	cmp	r8, r3
 80059ea:	4604      	mov	r4, r0
 80059ec:	9704      	str	r7, [sp, #16]
 80059ee:	d807      	bhi.n	8005a00 <__ieee754_rem_pio2+0x28>
 80059f0:	2200      	movs	r2, #0
 80059f2:	2300      	movs	r3, #0
 80059f4:	ed80 0b00 	vstr	d0, [r0]
 80059f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80059fc:	2500      	movs	r5, #0
 80059fe:	e028      	b.n	8005a52 <__ieee754_rem_pio2+0x7a>
 8005a00:	4bbe      	ldr	r3, [pc, #760]	@ (8005cfc <__ieee754_rem_pio2+0x324>)
 8005a02:	4598      	cmp	r8, r3
 8005a04:	d878      	bhi.n	8005af8 <__ieee754_rem_pio2+0x120>
 8005a06:	9b04      	ldr	r3, [sp, #16]
 8005a08:	4dbd      	ldr	r5, [pc, #756]	@ (8005d00 <__ieee754_rem_pio2+0x328>)
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005cc0 <__ieee754_rem_pio2+0x2e8>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	4639      	mov	r1, r7
 8005a16:	dd38      	ble.n	8005a8a <__ieee754_rem_pio2+0xb2>
 8005a18:	f7fa fbda 	bl	80001d0 <__aeabi_dsub>
 8005a1c:	45a8      	cmp	r8, r5
 8005a1e:	4606      	mov	r6, r0
 8005a20:	460f      	mov	r7, r1
 8005a22:	d01a      	beq.n	8005a5a <__ieee754_rem_pio2+0x82>
 8005a24:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005cc8 <__ieee754_rem_pio2+0x2f0>)
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	f7fa fbd1 	bl	80001d0 <__aeabi_dsub>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4680      	mov	r8, r0
 8005a34:	4689      	mov	r9, r1
 8005a36:	4630      	mov	r0, r6
 8005a38:	4639      	mov	r1, r7
 8005a3a:	f7fa fbc9 	bl	80001d0 <__aeabi_dsub>
 8005a3e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005cc8 <__ieee754_rem_pio2+0x2f0>)
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f7fa fbc4 	bl	80001d0 <__aeabi_dsub>
 8005a48:	e9c4 8900 	strd	r8, r9, [r4]
 8005a4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005a50:	2501      	movs	r5, #1
 8005a52:	4628      	mov	r0, r5
 8005a54:	b00d      	add	sp, #52	@ 0x34
 8005a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a5a:	a39d      	add	r3, pc, #628	@ (adr r3, 8005cd0 <__ieee754_rem_pio2+0x2f8>)
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f7fa fbb6 	bl	80001d0 <__aeabi_dsub>
 8005a64:	a39c      	add	r3, pc, #624	@ (adr r3, 8005cd8 <__ieee754_rem_pio2+0x300>)
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	460f      	mov	r7, r1
 8005a6e:	f7fa fbaf 	bl	80001d0 <__aeabi_dsub>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4680      	mov	r8, r0
 8005a78:	4689      	mov	r9, r1
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	4639      	mov	r1, r7
 8005a7e:	f7fa fba7 	bl	80001d0 <__aeabi_dsub>
 8005a82:	a395      	add	r3, pc, #596	@ (adr r3, 8005cd8 <__ieee754_rem_pio2+0x300>)
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	e7dc      	b.n	8005a44 <__ieee754_rem_pio2+0x6c>
 8005a8a:	f7fa fba3 	bl	80001d4 <__adddf3>
 8005a8e:	45a8      	cmp	r8, r5
 8005a90:	4606      	mov	r6, r0
 8005a92:	460f      	mov	r7, r1
 8005a94:	d018      	beq.n	8005ac8 <__ieee754_rem_pio2+0xf0>
 8005a96:	a38c      	add	r3, pc, #560	@ (adr r3, 8005cc8 <__ieee754_rem_pio2+0x2f0>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f7fa fb9a 	bl	80001d4 <__adddf3>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4689      	mov	r9, r1
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	4639      	mov	r1, r7
 8005aac:	f7fa fb90 	bl	80001d0 <__aeabi_dsub>
 8005ab0:	a385      	add	r3, pc, #532	@ (adr r3, 8005cc8 <__ieee754_rem_pio2+0x2f0>)
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f7fa fb8d 	bl	80001d4 <__adddf3>
 8005aba:	f04f 35ff 	mov.w	r5, #4294967295
 8005abe:	e9c4 8900 	strd	r8, r9, [r4]
 8005ac2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ac6:	e7c4      	b.n	8005a52 <__ieee754_rem_pio2+0x7a>
 8005ac8:	a381      	add	r3, pc, #516	@ (adr r3, 8005cd0 <__ieee754_rem_pio2+0x2f8>)
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f7fa fb81 	bl	80001d4 <__adddf3>
 8005ad2:	a381      	add	r3, pc, #516	@ (adr r3, 8005cd8 <__ieee754_rem_pio2+0x300>)
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	4606      	mov	r6, r0
 8005ada:	460f      	mov	r7, r1
 8005adc:	f7fa fb7a 	bl	80001d4 <__adddf3>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4680      	mov	r8, r0
 8005ae6:	4689      	mov	r9, r1
 8005ae8:	4630      	mov	r0, r6
 8005aea:	4639      	mov	r1, r7
 8005aec:	f7fa fb70 	bl	80001d0 <__aeabi_dsub>
 8005af0:	a379      	add	r3, pc, #484	@ (adr r3, 8005cd8 <__ieee754_rem_pio2+0x300>)
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	e7de      	b.n	8005ab6 <__ieee754_rem_pio2+0xde>
 8005af8:	4b82      	ldr	r3, [pc, #520]	@ (8005d04 <__ieee754_rem_pio2+0x32c>)
 8005afa:	4598      	cmp	r8, r3
 8005afc:	f200 80d1 	bhi.w	8005ca2 <__ieee754_rem_pio2+0x2ca>
 8005b00:	f000 f966 	bl	8005dd0 <fabs>
 8005b04:	ec57 6b10 	vmov	r6, r7, d0
 8005b08:	a375      	add	r3, pc, #468	@ (adr r3, 8005ce0 <__ieee754_rem_pio2+0x308>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	4630      	mov	r0, r6
 8005b10:	4639      	mov	r1, r7
 8005b12:	f7fa fd15 	bl	8000540 <__aeabi_dmul>
 8005b16:	4b7c      	ldr	r3, [pc, #496]	@ (8005d08 <__ieee754_rem_pio2+0x330>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f7fa fb5b 	bl	80001d4 <__adddf3>
 8005b1e:	f7fa ffa9 	bl	8000a74 <__aeabi_d2iz>
 8005b22:	4605      	mov	r5, r0
 8005b24:	f7fa fca2 	bl	800046c <__aeabi_i2d>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b30:	a363      	add	r3, pc, #396	@ (adr r3, 8005cc0 <__ieee754_rem_pio2+0x2e8>)
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f7fa fd03 	bl	8000540 <__aeabi_dmul>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4630      	mov	r0, r6
 8005b40:	4639      	mov	r1, r7
 8005b42:	f7fa fb45 	bl	80001d0 <__aeabi_dsub>
 8005b46:	a360      	add	r3, pc, #384	@ (adr r3, 8005cc8 <__ieee754_rem_pio2+0x2f0>)
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	4682      	mov	sl, r0
 8005b4e:	468b      	mov	fp, r1
 8005b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b54:	f7fa fcf4 	bl	8000540 <__aeabi_dmul>
 8005b58:	2d1f      	cmp	r5, #31
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	460f      	mov	r7, r1
 8005b5e:	dc0c      	bgt.n	8005b7a <__ieee754_rem_pio2+0x1a2>
 8005b60:	4b6a      	ldr	r3, [pc, #424]	@ (8005d0c <__ieee754_rem_pio2+0x334>)
 8005b62:	1e6a      	subs	r2, r5, #1
 8005b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b68:	4543      	cmp	r3, r8
 8005b6a:	d006      	beq.n	8005b7a <__ieee754_rem_pio2+0x1a2>
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	463b      	mov	r3, r7
 8005b70:	4650      	mov	r0, sl
 8005b72:	4659      	mov	r1, fp
 8005b74:	f7fa fb2c 	bl	80001d0 <__aeabi_dsub>
 8005b78:	e00e      	b.n	8005b98 <__ieee754_rem_pio2+0x1c0>
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	4632      	mov	r2, r6
 8005b7e:	4650      	mov	r0, sl
 8005b80:	4659      	mov	r1, fp
 8005b82:	f7fa fb25 	bl	80001d0 <__aeabi_dsub>
 8005b86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005b8a:	9305      	str	r3, [sp, #20]
 8005b8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b90:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005b94:	2b10      	cmp	r3, #16
 8005b96:	dc02      	bgt.n	8005b9e <__ieee754_rem_pio2+0x1c6>
 8005b98:	e9c4 0100 	strd	r0, r1, [r4]
 8005b9c:	e039      	b.n	8005c12 <__ieee754_rem_pio2+0x23a>
 8005b9e:	a34c      	add	r3, pc, #304	@ (adr r3, 8005cd0 <__ieee754_rem_pio2+0x2f8>)
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ba8:	f7fa fcca 	bl	8000540 <__aeabi_dmul>
 8005bac:	4606      	mov	r6, r0
 8005bae:	460f      	mov	r7, r1
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4650      	mov	r0, sl
 8005bb6:	4659      	mov	r1, fp
 8005bb8:	f7fa fb0a 	bl	80001d0 <__aeabi_dsub>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4680      	mov	r8, r0
 8005bc2:	4689      	mov	r9, r1
 8005bc4:	4650      	mov	r0, sl
 8005bc6:	4659      	mov	r1, fp
 8005bc8:	f7fa fb02 	bl	80001d0 <__aeabi_dsub>
 8005bcc:	4632      	mov	r2, r6
 8005bce:	463b      	mov	r3, r7
 8005bd0:	f7fa fafe 	bl	80001d0 <__aeabi_dsub>
 8005bd4:	a340      	add	r3, pc, #256	@ (adr r3, 8005cd8 <__ieee754_rem_pio2+0x300>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460f      	mov	r7, r1
 8005bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be2:	f7fa fcad 	bl	8000540 <__aeabi_dmul>
 8005be6:	4632      	mov	r2, r6
 8005be8:	463b      	mov	r3, r7
 8005bea:	f7fa faf1 	bl	80001d0 <__aeabi_dsub>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	460f      	mov	r7, r1
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	f7fa fae9 	bl	80001d0 <__aeabi_dsub>
 8005bfe:	9a05      	ldr	r2, [sp, #20]
 8005c00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b31      	cmp	r3, #49	@ 0x31
 8005c08:	dc20      	bgt.n	8005c4c <__ieee754_rem_pio2+0x274>
 8005c0a:	e9c4 0100 	strd	r0, r1, [r4]
 8005c0e:	46c2      	mov	sl, r8
 8005c10:	46cb      	mov	fp, r9
 8005c12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005c16:	4650      	mov	r0, sl
 8005c18:	4642      	mov	r2, r8
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	f7fa fad7 	bl	80001d0 <__aeabi_dsub>
 8005c22:	463b      	mov	r3, r7
 8005c24:	4632      	mov	r2, r6
 8005c26:	f7fa fad3 	bl	80001d0 <__aeabi_dsub>
 8005c2a:	9b04      	ldr	r3, [sp, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005c32:	f6bf af0e 	bge.w	8005a52 <__ieee754_rem_pio2+0x7a>
 8005c36:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005c3a:	6063      	str	r3, [r4, #4]
 8005c3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c40:	f8c4 8000 	str.w	r8, [r4]
 8005c44:	60a0      	str	r0, [r4, #8]
 8005c46:	60e3      	str	r3, [r4, #12]
 8005c48:	426d      	negs	r5, r5
 8005c4a:	e702      	b.n	8005a52 <__ieee754_rem_pio2+0x7a>
 8005c4c:	a326      	add	r3, pc, #152	@ (adr r3, 8005ce8 <__ieee754_rem_pio2+0x310>)
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c56:	f7fa fc73 	bl	8000540 <__aeabi_dmul>
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	460f      	mov	r7, r1
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4640      	mov	r0, r8
 8005c64:	4649      	mov	r1, r9
 8005c66:	f7fa fab3 	bl	80001d0 <__aeabi_dsub>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4682      	mov	sl, r0
 8005c70:	468b      	mov	fp, r1
 8005c72:	4640      	mov	r0, r8
 8005c74:	4649      	mov	r1, r9
 8005c76:	f7fa faab 	bl	80001d0 <__aeabi_dsub>
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	f7fa faa7 	bl	80001d0 <__aeabi_dsub>
 8005c82:	a31b      	add	r3, pc, #108	@ (adr r3, 8005cf0 <__ieee754_rem_pio2+0x318>)
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	4606      	mov	r6, r0
 8005c8a:	460f      	mov	r7, r1
 8005c8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c90:	f7fa fc56 	bl	8000540 <__aeabi_dmul>
 8005c94:	4632      	mov	r2, r6
 8005c96:	463b      	mov	r3, r7
 8005c98:	f7fa fa9a 	bl	80001d0 <__aeabi_dsub>
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	460f      	mov	r7, r1
 8005ca0:	e764      	b.n	8005b6c <__ieee754_rem_pio2+0x194>
 8005ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d10 <__ieee754_rem_pio2+0x338>)
 8005ca4:	4598      	cmp	r8, r3
 8005ca6:	d935      	bls.n	8005d14 <__ieee754_rem_pio2+0x33c>
 8005ca8:	4632      	mov	r2, r6
 8005caa:	463b      	mov	r3, r7
 8005cac:	4630      	mov	r0, r6
 8005cae:	4639      	mov	r1, r7
 8005cb0:	f7fa fa8e 	bl	80001d0 <__aeabi_dsub>
 8005cb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005cb8:	e9c4 0100 	strd	r0, r1, [r4]
 8005cbc:	e69e      	b.n	80059fc <__ieee754_rem_pio2+0x24>
 8005cbe:	bf00      	nop
 8005cc0:	54400000 	.word	0x54400000
 8005cc4:	3ff921fb 	.word	0x3ff921fb
 8005cc8:	1a626331 	.word	0x1a626331
 8005ccc:	3dd0b461 	.word	0x3dd0b461
 8005cd0:	1a600000 	.word	0x1a600000
 8005cd4:	3dd0b461 	.word	0x3dd0b461
 8005cd8:	2e037073 	.word	0x2e037073
 8005cdc:	3ba3198a 	.word	0x3ba3198a
 8005ce0:	6dc9c883 	.word	0x6dc9c883
 8005ce4:	3fe45f30 	.word	0x3fe45f30
 8005ce8:	2e000000 	.word	0x2e000000
 8005cec:	3ba3198a 	.word	0x3ba3198a
 8005cf0:	252049c1 	.word	0x252049c1
 8005cf4:	397b839a 	.word	0x397b839a
 8005cf8:	3fe921fb 	.word	0x3fe921fb
 8005cfc:	4002d97b 	.word	0x4002d97b
 8005d00:	3ff921fb 	.word	0x3ff921fb
 8005d04:	413921fb 	.word	0x413921fb
 8005d08:	3fe00000 	.word	0x3fe00000
 8005d0c:	08006790 	.word	0x08006790
 8005d10:	7fefffff 	.word	0x7fefffff
 8005d14:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005d18:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005d1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005d20:	4630      	mov	r0, r6
 8005d22:	460f      	mov	r7, r1
 8005d24:	f7fa fea6 	bl	8000a74 <__aeabi_d2iz>
 8005d28:	f7fa fba0 	bl	800046c <__aeabi_i2d>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4630      	mov	r0, r6
 8005d32:	4639      	mov	r1, r7
 8005d34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d38:	f7fa fa4a 	bl	80001d0 <__aeabi_dsub>
 8005d3c:	4b22      	ldr	r3, [pc, #136]	@ (8005dc8 <__ieee754_rem_pio2+0x3f0>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f7fa fbfe 	bl	8000540 <__aeabi_dmul>
 8005d44:	460f      	mov	r7, r1
 8005d46:	4606      	mov	r6, r0
 8005d48:	f7fa fe94 	bl	8000a74 <__aeabi_d2iz>
 8005d4c:	f7fa fb8e 	bl	800046c <__aeabi_i2d>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4630      	mov	r0, r6
 8005d56:	4639      	mov	r1, r7
 8005d58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005d5c:	f7fa fa38 	bl	80001d0 <__aeabi_dsub>
 8005d60:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <__ieee754_rem_pio2+0x3f0>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	f7fa fbec 	bl	8000540 <__aeabi_dmul>
 8005d68:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005d6c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005d70:	f04f 0803 	mov.w	r8, #3
 8005d74:	2600      	movs	r6, #0
 8005d76:	2700      	movs	r7, #0
 8005d78:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005d7c:	4632      	mov	r2, r6
 8005d7e:	463b      	mov	r3, r7
 8005d80:	46c2      	mov	sl, r8
 8005d82:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d86:	f7fa fe43 	bl	8000a10 <__aeabi_dcmpeq>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d1f4      	bne.n	8005d78 <__ieee754_rem_pio2+0x3a0>
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005dcc <__ieee754_rem_pio2+0x3f4>)
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	2302      	movs	r3, #2
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	462a      	mov	r2, r5
 8005d98:	4653      	mov	r3, sl
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	a806      	add	r0, sp, #24
 8005d9e:	f000 f85b 	bl	8005e58 <__kernel_rem_pio2>
 8005da2:	9b04      	ldr	r3, [sp, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	4605      	mov	r5, r0
 8005da8:	f6bf ae53 	bge.w	8005a52 <__ieee754_rem_pio2+0x7a>
 8005dac:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005db0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005db4:	e9c4 2300 	strd	r2, r3, [r4]
 8005db8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005dbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005dc0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005dc4:	e740      	b.n	8005c48 <__ieee754_rem_pio2+0x270>
 8005dc6:	bf00      	nop
 8005dc8:	41700000 	.word	0x41700000
 8005dcc:	08006810 	.word	0x08006810

08005dd0 <fabs>:
 8005dd0:	ec51 0b10 	vmov	r0, r1, d0
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005dda:	ec43 2b10 	vmov	d0, r2, r3
 8005dde:	4770      	bx	lr

08005de0 <with_errno>:
 8005de0:	b510      	push	{r4, lr}
 8005de2:	ed2d 8b02 	vpush	{d8}
 8005de6:	eeb0 8a40 	vmov.f32	s16, s0
 8005dea:	eef0 8a60 	vmov.f32	s17, s1
 8005dee:	4604      	mov	r4, r0
 8005df0:	f7ff fa1e 	bl	8005230 <__errno>
 8005df4:	eeb0 0a48 	vmov.f32	s0, s16
 8005df8:	eef0 0a68 	vmov.f32	s1, s17
 8005dfc:	ecbd 8b02 	vpop	{d8}
 8005e00:	6004      	str	r4, [r0, #0]
 8005e02:	bd10      	pop	{r4, pc}

08005e04 <xflow>:
 8005e04:	4603      	mov	r3, r0
 8005e06:	b507      	push	{r0, r1, r2, lr}
 8005e08:	ec51 0b10 	vmov	r0, r1, d0
 8005e0c:	b183      	cbz	r3, 8005e30 <xflow+0x2c>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e14:	e9cd 2300 	strd	r2, r3, [sp]
 8005e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e1c:	f7fa fb90 	bl	8000540 <__aeabi_dmul>
 8005e20:	ec41 0b10 	vmov	d0, r0, r1
 8005e24:	2022      	movs	r0, #34	@ 0x22
 8005e26:	b003      	add	sp, #12
 8005e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e2c:	f7ff bfd8 	b.w	8005de0 <with_errno>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	e7ee      	b.n	8005e14 <xflow+0x10>
	...

08005e38 <__math_uflow>:
 8005e38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005e40 <__math_uflow+0x8>
 8005e3c:	f7ff bfe2 	b.w	8005e04 <xflow>
 8005e40:	00000000 	.word	0x00000000
 8005e44:	10000000 	.word	0x10000000

08005e48 <__math_oflow>:
 8005e48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005e50 <__math_oflow+0x8>
 8005e4c:	f7ff bfda 	b.w	8005e04 <xflow>
 8005e50:	00000000 	.word	0x00000000
 8005e54:	70000000 	.word	0x70000000

08005e58 <__kernel_rem_pio2>:
 8005e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5c:	ed2d 8b02 	vpush	{d8}
 8005e60:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005e64:	f112 0f14 	cmn.w	r2, #20
 8005e68:	9306      	str	r3, [sp, #24]
 8005e6a:	9104      	str	r1, [sp, #16]
 8005e6c:	4bbe      	ldr	r3, [pc, #760]	@ (8006168 <__kernel_rem_pio2+0x310>)
 8005e6e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005e70:	9008      	str	r0, [sp, #32]
 8005e72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	9b06      	ldr	r3, [sp, #24]
 8005e7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e7e:	bfa8      	it	ge
 8005e80:	1ed4      	subge	r4, r2, #3
 8005e82:	9305      	str	r3, [sp, #20]
 8005e84:	bfb2      	itee	lt
 8005e86:	2400      	movlt	r4, #0
 8005e88:	2318      	movge	r3, #24
 8005e8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8005e8e:	f06f 0317 	mvn.w	r3, #23
 8005e92:	fb04 3303 	mla	r3, r4, r3, r3
 8005e96:	eb03 0b02 	add.w	fp, r3, r2
 8005e9a:	9b00      	ldr	r3, [sp, #0]
 8005e9c:	9a05      	ldr	r2, [sp, #20]
 8005e9e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006158 <__kernel_rem_pio2+0x300>
 8005ea2:	eb03 0802 	add.w	r8, r3, r2
 8005ea6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005ea8:	1aa7      	subs	r7, r4, r2
 8005eaa:	ae20      	add	r6, sp, #128	@ 0x80
 8005eac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005eb0:	2500      	movs	r5, #0
 8005eb2:	4545      	cmp	r5, r8
 8005eb4:	dd13      	ble.n	8005ede <__kernel_rem_pio2+0x86>
 8005eb6:	9b06      	ldr	r3, [sp, #24]
 8005eb8:	aa20      	add	r2, sp, #128	@ 0x80
 8005eba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005ebe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005ec2:	f04f 0800 	mov.w	r8, #0
 8005ec6:	9b00      	ldr	r3, [sp, #0]
 8005ec8:	4598      	cmp	r8, r3
 8005eca:	dc31      	bgt.n	8005f30 <__kernel_rem_pio2+0xd8>
 8005ecc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006158 <__kernel_rem_pio2+0x300>
 8005ed0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ed4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ed8:	462f      	mov	r7, r5
 8005eda:	2600      	movs	r6, #0
 8005edc:	e01b      	b.n	8005f16 <__kernel_rem_pio2+0xbe>
 8005ede:	42ef      	cmn	r7, r5
 8005ee0:	d407      	bmi.n	8005ef2 <__kernel_rem_pio2+0x9a>
 8005ee2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005ee6:	f7fa fac1 	bl	800046c <__aeabi_i2d>
 8005eea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005eee:	3501      	adds	r5, #1
 8005ef0:	e7df      	b.n	8005eb2 <__kernel_rem_pio2+0x5a>
 8005ef2:	ec51 0b18 	vmov	r0, r1, d8
 8005ef6:	e7f8      	b.n	8005eea <__kernel_rem_pio2+0x92>
 8005ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005efc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005f00:	f7fa fb1e 	bl	8000540 <__aeabi_dmul>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f0c:	f7fa f962 	bl	80001d4 <__adddf3>
 8005f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f14:	3601      	adds	r6, #1
 8005f16:	9b05      	ldr	r3, [sp, #20]
 8005f18:	429e      	cmp	r6, r3
 8005f1a:	f1a7 0708 	sub.w	r7, r7, #8
 8005f1e:	ddeb      	ble.n	8005ef8 <__kernel_rem_pio2+0xa0>
 8005f20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f24:	f108 0801 	add.w	r8, r8, #1
 8005f28:	ecaa 7b02 	vstmia	sl!, {d7}
 8005f2c:	3508      	adds	r5, #8
 8005f2e:	e7ca      	b.n	8005ec6 <__kernel_rem_pio2+0x6e>
 8005f30:	9b00      	ldr	r3, [sp, #0]
 8005f32:	f8dd 8000 	ldr.w	r8, [sp]
 8005f36:	aa0c      	add	r2, sp, #48	@ 0x30
 8005f38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005f40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f46:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005f4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f4c:	ab98      	add	r3, sp, #608	@ 0x260
 8005f4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005f52:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005f56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005f5a:	ac0c      	add	r4, sp, #48	@ 0x30
 8005f5c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005f5e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005f62:	46a1      	mov	r9, r4
 8005f64:	46c2      	mov	sl, r8
 8005f66:	f1ba 0f00 	cmp.w	sl, #0
 8005f6a:	f1a5 0508 	sub.w	r5, r5, #8
 8005f6e:	dc77      	bgt.n	8006060 <__kernel_rem_pio2+0x208>
 8005f70:	4658      	mov	r0, fp
 8005f72:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005f76:	f000 fac7 	bl	8006508 <scalbn>
 8005f7a:	ec57 6b10 	vmov	r6, r7, d0
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005f84:	4630      	mov	r0, r6
 8005f86:	4639      	mov	r1, r7
 8005f88:	f7fa fada 	bl	8000540 <__aeabi_dmul>
 8005f8c:	ec41 0b10 	vmov	d0, r0, r1
 8005f90:	f000 fb3a 	bl	8006608 <floor>
 8005f94:	4b75      	ldr	r3, [pc, #468]	@ (800616c <__kernel_rem_pio2+0x314>)
 8005f96:	ec51 0b10 	vmov	r0, r1, d0
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f7fa fad0 	bl	8000540 <__aeabi_dmul>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	f7fa f912 	bl	80001d0 <__aeabi_dsub>
 8005fac:	460f      	mov	r7, r1
 8005fae:	4606      	mov	r6, r0
 8005fb0:	f7fa fd60 	bl	8000a74 <__aeabi_d2iz>
 8005fb4:	9002      	str	r0, [sp, #8]
 8005fb6:	f7fa fa59 	bl	800046c <__aeabi_i2d>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	f7fa f905 	bl	80001d0 <__aeabi_dsub>
 8005fc6:	f1bb 0f00 	cmp.w	fp, #0
 8005fca:	4606      	mov	r6, r0
 8005fcc:	460f      	mov	r7, r1
 8005fce:	dd6c      	ble.n	80060aa <__kernel_rem_pio2+0x252>
 8005fd0:	f108 31ff 	add.w	r1, r8, #4294967295
 8005fd4:	ab0c      	add	r3, sp, #48	@ 0x30
 8005fd6:	9d02      	ldr	r5, [sp, #8]
 8005fd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005fdc:	f1cb 0018 	rsb	r0, fp, #24
 8005fe0:	fa43 f200 	asr.w	r2, r3, r0
 8005fe4:	4415      	add	r5, r2
 8005fe6:	4082      	lsls	r2, r0
 8005fe8:	1a9b      	subs	r3, r3, r2
 8005fea:	aa0c      	add	r2, sp, #48	@ 0x30
 8005fec:	9502      	str	r5, [sp, #8]
 8005fee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005ff2:	f1cb 0217 	rsb	r2, fp, #23
 8005ff6:	fa43 f902 	asr.w	r9, r3, r2
 8005ffa:	f1b9 0f00 	cmp.w	r9, #0
 8005ffe:	dd64      	ble.n	80060ca <__kernel_rem_pio2+0x272>
 8006000:	9b02      	ldr	r3, [sp, #8]
 8006002:	2200      	movs	r2, #0
 8006004:	3301      	adds	r3, #1
 8006006:	9302      	str	r3, [sp, #8]
 8006008:	4615      	mov	r5, r2
 800600a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800600e:	4590      	cmp	r8, r2
 8006010:	f300 80b8 	bgt.w	8006184 <__kernel_rem_pio2+0x32c>
 8006014:	f1bb 0f00 	cmp.w	fp, #0
 8006018:	dd07      	ble.n	800602a <__kernel_rem_pio2+0x1d2>
 800601a:	f1bb 0f01 	cmp.w	fp, #1
 800601e:	f000 80bf 	beq.w	80061a0 <__kernel_rem_pio2+0x348>
 8006022:	f1bb 0f02 	cmp.w	fp, #2
 8006026:	f000 80c6 	beq.w	80061b6 <__kernel_rem_pio2+0x35e>
 800602a:	f1b9 0f02 	cmp.w	r9, #2
 800602e:	d14c      	bne.n	80060ca <__kernel_rem_pio2+0x272>
 8006030:	4632      	mov	r2, r6
 8006032:	463b      	mov	r3, r7
 8006034:	494e      	ldr	r1, [pc, #312]	@ (8006170 <__kernel_rem_pio2+0x318>)
 8006036:	2000      	movs	r0, #0
 8006038:	f7fa f8ca 	bl	80001d0 <__aeabi_dsub>
 800603c:	4606      	mov	r6, r0
 800603e:	460f      	mov	r7, r1
 8006040:	2d00      	cmp	r5, #0
 8006042:	d042      	beq.n	80060ca <__kernel_rem_pio2+0x272>
 8006044:	4658      	mov	r0, fp
 8006046:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006160 <__kernel_rem_pio2+0x308>
 800604a:	f000 fa5d 	bl	8006508 <scalbn>
 800604e:	4630      	mov	r0, r6
 8006050:	4639      	mov	r1, r7
 8006052:	ec53 2b10 	vmov	r2, r3, d0
 8006056:	f7fa f8bb 	bl	80001d0 <__aeabi_dsub>
 800605a:	4606      	mov	r6, r0
 800605c:	460f      	mov	r7, r1
 800605e:	e034      	b.n	80060ca <__kernel_rem_pio2+0x272>
 8006060:	4b44      	ldr	r3, [pc, #272]	@ (8006174 <__kernel_rem_pio2+0x31c>)
 8006062:	2200      	movs	r2, #0
 8006064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006068:	f7fa fa6a 	bl	8000540 <__aeabi_dmul>
 800606c:	f7fa fd02 	bl	8000a74 <__aeabi_d2iz>
 8006070:	f7fa f9fc 	bl	800046c <__aeabi_i2d>
 8006074:	4b40      	ldr	r3, [pc, #256]	@ (8006178 <__kernel_rem_pio2+0x320>)
 8006076:	2200      	movs	r2, #0
 8006078:	4606      	mov	r6, r0
 800607a:	460f      	mov	r7, r1
 800607c:	f7fa fa60 	bl	8000540 <__aeabi_dmul>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006088:	f7fa f8a2 	bl	80001d0 <__aeabi_dsub>
 800608c:	f7fa fcf2 	bl	8000a74 <__aeabi_d2iz>
 8006090:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006094:	f849 0b04 	str.w	r0, [r9], #4
 8006098:	4639      	mov	r1, r7
 800609a:	4630      	mov	r0, r6
 800609c:	f7fa f89a 	bl	80001d4 <__adddf3>
 80060a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060a8:	e75d      	b.n	8005f66 <__kernel_rem_pio2+0x10e>
 80060aa:	d107      	bne.n	80060bc <__kernel_rem_pio2+0x264>
 80060ac:	f108 33ff 	add.w	r3, r8, #4294967295
 80060b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80060b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80060ba:	e79e      	b.n	8005ffa <__kernel_rem_pio2+0x1a2>
 80060bc:	4b2f      	ldr	r3, [pc, #188]	@ (800617c <__kernel_rem_pio2+0x324>)
 80060be:	2200      	movs	r2, #0
 80060c0:	f7fa fcc4 	bl	8000a4c <__aeabi_dcmpge>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d143      	bne.n	8006150 <__kernel_rem_pio2+0x2f8>
 80060c8:	4681      	mov	r9, r0
 80060ca:	2200      	movs	r2, #0
 80060cc:	2300      	movs	r3, #0
 80060ce:	4630      	mov	r0, r6
 80060d0:	4639      	mov	r1, r7
 80060d2:	f7fa fc9d 	bl	8000a10 <__aeabi_dcmpeq>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	f000 80bf 	beq.w	800625a <__kernel_rem_pio2+0x402>
 80060dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80060e0:	2200      	movs	r2, #0
 80060e2:	9900      	ldr	r1, [sp, #0]
 80060e4:	428b      	cmp	r3, r1
 80060e6:	da6e      	bge.n	80061c6 <__kernel_rem_pio2+0x36e>
 80060e8:	2a00      	cmp	r2, #0
 80060ea:	f000 8089 	beq.w	8006200 <__kernel_rem_pio2+0x3a8>
 80060ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80060f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80060f4:	f1ab 0b18 	sub.w	fp, fp, #24
 80060f8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0f6      	beq.n	80060ee <__kernel_rem_pio2+0x296>
 8006100:	4658      	mov	r0, fp
 8006102:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006160 <__kernel_rem_pio2+0x308>
 8006106:	f000 f9ff 	bl	8006508 <scalbn>
 800610a:	f108 0301 	add.w	r3, r8, #1
 800610e:	00da      	lsls	r2, r3, #3
 8006110:	9205      	str	r2, [sp, #20]
 8006112:	ec55 4b10 	vmov	r4, r5, d0
 8006116:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006118:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006174 <__kernel_rem_pio2+0x31c>
 800611c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006120:	4646      	mov	r6, r8
 8006122:	f04f 0a00 	mov.w	sl, #0
 8006126:	2e00      	cmp	r6, #0
 8006128:	f280 80cf 	bge.w	80062ca <__kernel_rem_pio2+0x472>
 800612c:	4644      	mov	r4, r8
 800612e:	2c00      	cmp	r4, #0
 8006130:	f2c0 80fd 	blt.w	800632e <__kernel_rem_pio2+0x4d6>
 8006134:	4b12      	ldr	r3, [pc, #72]	@ (8006180 <__kernel_rem_pio2+0x328>)
 8006136:	461f      	mov	r7, r3
 8006138:	ab70      	add	r3, sp, #448	@ 0x1c0
 800613a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800613e:	9306      	str	r3, [sp, #24]
 8006140:	f04f 0a00 	mov.w	sl, #0
 8006144:	f04f 0b00 	mov.w	fp, #0
 8006148:	2600      	movs	r6, #0
 800614a:	eba8 0504 	sub.w	r5, r8, r4
 800614e:	e0e2      	b.n	8006316 <__kernel_rem_pio2+0x4be>
 8006150:	f04f 0902 	mov.w	r9, #2
 8006154:	e754      	b.n	8006000 <__kernel_rem_pio2+0x1a8>
 8006156:	bf00      	nop
	...
 8006164:	3ff00000 	.word	0x3ff00000
 8006168:	08006958 	.word	0x08006958
 800616c:	40200000 	.word	0x40200000
 8006170:	3ff00000 	.word	0x3ff00000
 8006174:	3e700000 	.word	0x3e700000
 8006178:	41700000 	.word	0x41700000
 800617c:	3fe00000 	.word	0x3fe00000
 8006180:	08006918 	.word	0x08006918
 8006184:	f854 3b04 	ldr.w	r3, [r4], #4
 8006188:	b945      	cbnz	r5, 800619c <__kernel_rem_pio2+0x344>
 800618a:	b123      	cbz	r3, 8006196 <__kernel_rem_pio2+0x33e>
 800618c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006190:	f844 3c04 	str.w	r3, [r4, #-4]
 8006194:	2301      	movs	r3, #1
 8006196:	3201      	adds	r2, #1
 8006198:	461d      	mov	r5, r3
 800619a:	e738      	b.n	800600e <__kernel_rem_pio2+0x1b6>
 800619c:	1acb      	subs	r3, r1, r3
 800619e:	e7f7      	b.n	8006190 <__kernel_rem_pio2+0x338>
 80061a0:	f108 32ff 	add.w	r2, r8, #4294967295
 80061a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80061a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80061ae:	a90c      	add	r1, sp, #48	@ 0x30
 80061b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80061b4:	e739      	b.n	800602a <__kernel_rem_pio2+0x1d2>
 80061b6:	f108 32ff 	add.w	r2, r8, #4294967295
 80061ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80061bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80061c4:	e7f3      	b.n	80061ae <__kernel_rem_pio2+0x356>
 80061c6:	a90c      	add	r1, sp, #48	@ 0x30
 80061c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	430a      	orrs	r2, r1
 80061d0:	e787      	b.n	80060e2 <__kernel_rem_pio2+0x28a>
 80061d2:	3401      	adds	r4, #1
 80061d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80061d8:	2a00      	cmp	r2, #0
 80061da:	d0fa      	beq.n	80061d2 <__kernel_rem_pio2+0x37a>
 80061dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80061e2:	eb0d 0503 	add.w	r5, sp, r3
 80061e6:	9b06      	ldr	r3, [sp, #24]
 80061e8:	aa20      	add	r2, sp, #128	@ 0x80
 80061ea:	4443      	add	r3, r8
 80061ec:	f108 0701 	add.w	r7, r8, #1
 80061f0:	3d98      	subs	r5, #152	@ 0x98
 80061f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80061f6:	4444      	add	r4, r8
 80061f8:	42bc      	cmp	r4, r7
 80061fa:	da04      	bge.n	8006206 <__kernel_rem_pio2+0x3ae>
 80061fc:	46a0      	mov	r8, r4
 80061fe:	e6a2      	b.n	8005f46 <__kernel_rem_pio2+0xee>
 8006200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006202:	2401      	movs	r4, #1
 8006204:	e7e6      	b.n	80061d4 <__kernel_rem_pio2+0x37c>
 8006206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006208:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800620c:	f7fa f92e 	bl	800046c <__aeabi_i2d>
 8006210:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80064d8 <__kernel_rem_pio2+0x680>
 8006214:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006218:	ed8d 7b02 	vstr	d7, [sp, #8]
 800621c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006220:	46b2      	mov	sl, r6
 8006222:	f04f 0800 	mov.w	r8, #0
 8006226:	9b05      	ldr	r3, [sp, #20]
 8006228:	4598      	cmp	r8, r3
 800622a:	dd05      	ble.n	8006238 <__kernel_rem_pio2+0x3e0>
 800622c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006230:	3701      	adds	r7, #1
 8006232:	eca5 7b02 	vstmia	r5!, {d7}
 8006236:	e7df      	b.n	80061f8 <__kernel_rem_pio2+0x3a0>
 8006238:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800623c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006240:	f7fa f97e 	bl	8000540 <__aeabi_dmul>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800624c:	f7f9 ffc2 	bl	80001d4 <__adddf3>
 8006250:	f108 0801 	add.w	r8, r8, #1
 8006254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006258:	e7e5      	b.n	8006226 <__kernel_rem_pio2+0x3ce>
 800625a:	f1cb 0000 	rsb	r0, fp, #0
 800625e:	ec47 6b10 	vmov	d0, r6, r7
 8006262:	f000 f951 	bl	8006508 <scalbn>
 8006266:	ec55 4b10 	vmov	r4, r5, d0
 800626a:	4b9d      	ldr	r3, [pc, #628]	@ (80064e0 <__kernel_rem_pio2+0x688>)
 800626c:	2200      	movs	r2, #0
 800626e:	4620      	mov	r0, r4
 8006270:	4629      	mov	r1, r5
 8006272:	f7fa fbeb 	bl	8000a4c <__aeabi_dcmpge>
 8006276:	b300      	cbz	r0, 80062ba <__kernel_rem_pio2+0x462>
 8006278:	4b9a      	ldr	r3, [pc, #616]	@ (80064e4 <__kernel_rem_pio2+0x68c>)
 800627a:	2200      	movs	r2, #0
 800627c:	4620      	mov	r0, r4
 800627e:	4629      	mov	r1, r5
 8006280:	f7fa f95e 	bl	8000540 <__aeabi_dmul>
 8006284:	f7fa fbf6 	bl	8000a74 <__aeabi_d2iz>
 8006288:	4606      	mov	r6, r0
 800628a:	f7fa f8ef 	bl	800046c <__aeabi_i2d>
 800628e:	4b94      	ldr	r3, [pc, #592]	@ (80064e0 <__kernel_rem_pio2+0x688>)
 8006290:	2200      	movs	r2, #0
 8006292:	f7fa f955 	bl	8000540 <__aeabi_dmul>
 8006296:	460b      	mov	r3, r1
 8006298:	4602      	mov	r2, r0
 800629a:	4629      	mov	r1, r5
 800629c:	4620      	mov	r0, r4
 800629e:	f7f9 ff97 	bl	80001d0 <__aeabi_dsub>
 80062a2:	f7fa fbe7 	bl	8000a74 <__aeabi_d2iz>
 80062a6:	ab0c      	add	r3, sp, #48	@ 0x30
 80062a8:	f10b 0b18 	add.w	fp, fp, #24
 80062ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80062b0:	f108 0801 	add.w	r8, r8, #1
 80062b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80062b8:	e722      	b.n	8006100 <__kernel_rem_pio2+0x2a8>
 80062ba:	4620      	mov	r0, r4
 80062bc:	4629      	mov	r1, r5
 80062be:	f7fa fbd9 	bl	8000a74 <__aeabi_d2iz>
 80062c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80062c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80062c8:	e71a      	b.n	8006100 <__kernel_rem_pio2+0x2a8>
 80062ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80062cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80062d0:	f7fa f8cc 	bl	800046c <__aeabi_i2d>
 80062d4:	4622      	mov	r2, r4
 80062d6:	462b      	mov	r3, r5
 80062d8:	f7fa f932 	bl	8000540 <__aeabi_dmul>
 80062dc:	4652      	mov	r2, sl
 80062de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80062e2:	465b      	mov	r3, fp
 80062e4:	4620      	mov	r0, r4
 80062e6:	4629      	mov	r1, r5
 80062e8:	f7fa f92a 	bl	8000540 <__aeabi_dmul>
 80062ec:	3e01      	subs	r6, #1
 80062ee:	4604      	mov	r4, r0
 80062f0:	460d      	mov	r5, r1
 80062f2:	e718      	b.n	8006126 <__kernel_rem_pio2+0x2ce>
 80062f4:	9906      	ldr	r1, [sp, #24]
 80062f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80062fa:	9106      	str	r1, [sp, #24]
 80062fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006300:	f7fa f91e 	bl	8000540 <__aeabi_dmul>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4650      	mov	r0, sl
 800630a:	4659      	mov	r1, fp
 800630c:	f7f9 ff62 	bl	80001d4 <__adddf3>
 8006310:	3601      	adds	r6, #1
 8006312:	4682      	mov	sl, r0
 8006314:	468b      	mov	fp, r1
 8006316:	9b00      	ldr	r3, [sp, #0]
 8006318:	429e      	cmp	r6, r3
 800631a:	dc01      	bgt.n	8006320 <__kernel_rem_pio2+0x4c8>
 800631c:	42b5      	cmp	r5, r6
 800631e:	dae9      	bge.n	80062f4 <__kernel_rem_pio2+0x49c>
 8006320:	ab48      	add	r3, sp, #288	@ 0x120
 8006322:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006326:	e9c5 ab00 	strd	sl, fp, [r5]
 800632a:	3c01      	subs	r4, #1
 800632c:	e6ff      	b.n	800612e <__kernel_rem_pio2+0x2d6>
 800632e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006330:	2b02      	cmp	r3, #2
 8006332:	dc0b      	bgt.n	800634c <__kernel_rem_pio2+0x4f4>
 8006334:	2b00      	cmp	r3, #0
 8006336:	dc39      	bgt.n	80063ac <__kernel_rem_pio2+0x554>
 8006338:	d05d      	beq.n	80063f6 <__kernel_rem_pio2+0x59e>
 800633a:	9b02      	ldr	r3, [sp, #8]
 800633c:	f003 0007 	and.w	r0, r3, #7
 8006340:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006344:	ecbd 8b02 	vpop	{d8}
 8006348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800634e:	2b03      	cmp	r3, #3
 8006350:	d1f3      	bne.n	800633a <__kernel_rem_pio2+0x4e2>
 8006352:	9b05      	ldr	r3, [sp, #20]
 8006354:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006358:	eb0d 0403 	add.w	r4, sp, r3
 800635c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006360:	4625      	mov	r5, r4
 8006362:	46c2      	mov	sl, r8
 8006364:	f1ba 0f00 	cmp.w	sl, #0
 8006368:	f1a5 0508 	sub.w	r5, r5, #8
 800636c:	dc6b      	bgt.n	8006446 <__kernel_rem_pio2+0x5ee>
 800636e:	4645      	mov	r5, r8
 8006370:	2d01      	cmp	r5, #1
 8006372:	f1a4 0408 	sub.w	r4, r4, #8
 8006376:	f300 8087 	bgt.w	8006488 <__kernel_rem_pio2+0x630>
 800637a:	9c05      	ldr	r4, [sp, #20]
 800637c:	ab48      	add	r3, sp, #288	@ 0x120
 800637e:	441c      	add	r4, r3
 8006380:	2000      	movs	r0, #0
 8006382:	2100      	movs	r1, #0
 8006384:	f1b8 0f01 	cmp.w	r8, #1
 8006388:	f300 809c 	bgt.w	80064c4 <__kernel_rem_pio2+0x66c>
 800638c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006390:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006394:	f1b9 0f00 	cmp.w	r9, #0
 8006398:	f040 80a6 	bne.w	80064e8 <__kernel_rem_pio2+0x690>
 800639c:	9b04      	ldr	r3, [sp, #16]
 800639e:	e9c3 7800 	strd	r7, r8, [r3]
 80063a2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80063a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80063aa:	e7c6      	b.n	800633a <__kernel_rem_pio2+0x4e2>
 80063ac:	9d05      	ldr	r5, [sp, #20]
 80063ae:	ab48      	add	r3, sp, #288	@ 0x120
 80063b0:	441d      	add	r5, r3
 80063b2:	4644      	mov	r4, r8
 80063b4:	2000      	movs	r0, #0
 80063b6:	2100      	movs	r1, #0
 80063b8:	2c00      	cmp	r4, #0
 80063ba:	da35      	bge.n	8006428 <__kernel_rem_pio2+0x5d0>
 80063bc:	f1b9 0f00 	cmp.w	r9, #0
 80063c0:	d038      	beq.n	8006434 <__kernel_rem_pio2+0x5dc>
 80063c2:	4602      	mov	r2, r0
 80063c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80063c8:	9c04      	ldr	r4, [sp, #16]
 80063ca:	e9c4 2300 	strd	r2, r3, [r4]
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80063d6:	f7f9 fefb 	bl	80001d0 <__aeabi_dsub>
 80063da:	ad4a      	add	r5, sp, #296	@ 0x128
 80063dc:	2401      	movs	r4, #1
 80063de:	45a0      	cmp	r8, r4
 80063e0:	da2b      	bge.n	800643a <__kernel_rem_pio2+0x5e2>
 80063e2:	f1b9 0f00 	cmp.w	r9, #0
 80063e6:	d002      	beq.n	80063ee <__kernel_rem_pio2+0x596>
 80063e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80063ec:	4619      	mov	r1, r3
 80063ee:	9b04      	ldr	r3, [sp, #16]
 80063f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80063f4:	e7a1      	b.n	800633a <__kernel_rem_pio2+0x4e2>
 80063f6:	9c05      	ldr	r4, [sp, #20]
 80063f8:	ab48      	add	r3, sp, #288	@ 0x120
 80063fa:	441c      	add	r4, r3
 80063fc:	2000      	movs	r0, #0
 80063fe:	2100      	movs	r1, #0
 8006400:	f1b8 0f00 	cmp.w	r8, #0
 8006404:	da09      	bge.n	800641a <__kernel_rem_pio2+0x5c2>
 8006406:	f1b9 0f00 	cmp.w	r9, #0
 800640a:	d002      	beq.n	8006412 <__kernel_rem_pio2+0x5ba>
 800640c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006410:	4619      	mov	r1, r3
 8006412:	9b04      	ldr	r3, [sp, #16]
 8006414:	e9c3 0100 	strd	r0, r1, [r3]
 8006418:	e78f      	b.n	800633a <__kernel_rem_pio2+0x4e2>
 800641a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800641e:	f7f9 fed9 	bl	80001d4 <__adddf3>
 8006422:	f108 38ff 	add.w	r8, r8, #4294967295
 8006426:	e7eb      	b.n	8006400 <__kernel_rem_pio2+0x5a8>
 8006428:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800642c:	f7f9 fed2 	bl	80001d4 <__adddf3>
 8006430:	3c01      	subs	r4, #1
 8006432:	e7c1      	b.n	80063b8 <__kernel_rem_pio2+0x560>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	e7c6      	b.n	80063c8 <__kernel_rem_pio2+0x570>
 800643a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800643e:	f7f9 fec9 	bl	80001d4 <__adddf3>
 8006442:	3401      	adds	r4, #1
 8006444:	e7cb      	b.n	80063de <__kernel_rem_pio2+0x586>
 8006446:	ed95 7b00 	vldr	d7, [r5]
 800644a:	ed8d 7b00 	vstr	d7, [sp]
 800644e:	ed95 7b02 	vldr	d7, [r5, #8]
 8006452:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006456:	ec53 2b17 	vmov	r2, r3, d7
 800645a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800645e:	f7f9 feb9 	bl	80001d4 <__adddf3>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4606      	mov	r6, r0
 8006468:	460f      	mov	r7, r1
 800646a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800646e:	f7f9 feaf 	bl	80001d0 <__aeabi_dsub>
 8006472:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006476:	f7f9 fead 	bl	80001d4 <__adddf3>
 800647a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800647e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006482:	e9c5 6700 	strd	r6, r7, [r5]
 8006486:	e76d      	b.n	8006364 <__kernel_rem_pio2+0x50c>
 8006488:	ed94 7b00 	vldr	d7, [r4]
 800648c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006490:	ec51 0b17 	vmov	r0, r1, d7
 8006494:	4652      	mov	r2, sl
 8006496:	465b      	mov	r3, fp
 8006498:	ed8d 7b00 	vstr	d7, [sp]
 800649c:	f7f9 fe9a 	bl	80001d4 <__adddf3>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4606      	mov	r6, r0
 80064a6:	460f      	mov	r7, r1
 80064a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064ac:	f7f9 fe90 	bl	80001d0 <__aeabi_dsub>
 80064b0:	4652      	mov	r2, sl
 80064b2:	465b      	mov	r3, fp
 80064b4:	f7f9 fe8e 	bl	80001d4 <__adddf3>
 80064b8:	3d01      	subs	r5, #1
 80064ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80064be:	e9c4 6700 	strd	r6, r7, [r4]
 80064c2:	e755      	b.n	8006370 <__kernel_rem_pio2+0x518>
 80064c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80064c8:	f7f9 fe84 	bl	80001d4 <__adddf3>
 80064cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80064d0:	e758      	b.n	8006384 <__kernel_rem_pio2+0x52c>
 80064d2:	bf00      	nop
 80064d4:	f3af 8000 	nop.w
	...
 80064e0:	41700000 	.word	0x41700000
 80064e4:	3e700000 	.word	0x3e700000
 80064e8:	9b04      	ldr	r3, [sp, #16]
 80064ea:	9a04      	ldr	r2, [sp, #16]
 80064ec:	601f      	str	r7, [r3, #0]
 80064ee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80064f2:	605c      	str	r4, [r3, #4]
 80064f4:	609d      	str	r5, [r3, #8]
 80064f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80064fa:	60d3      	str	r3, [r2, #12]
 80064fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006500:	6110      	str	r0, [r2, #16]
 8006502:	6153      	str	r3, [r2, #20]
 8006504:	e719      	b.n	800633a <__kernel_rem_pio2+0x4e2>
 8006506:	bf00      	nop

08006508 <scalbn>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	ec55 4b10 	vmov	r4, r5, d0
 800650e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006512:	4606      	mov	r6, r0
 8006514:	462b      	mov	r3, r5
 8006516:	b991      	cbnz	r1, 800653e <scalbn+0x36>
 8006518:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800651c:	4323      	orrs	r3, r4
 800651e:	d03d      	beq.n	800659c <scalbn+0x94>
 8006520:	4b35      	ldr	r3, [pc, #212]	@ (80065f8 <scalbn+0xf0>)
 8006522:	4620      	mov	r0, r4
 8006524:	4629      	mov	r1, r5
 8006526:	2200      	movs	r2, #0
 8006528:	f7fa f80a 	bl	8000540 <__aeabi_dmul>
 800652c:	4b33      	ldr	r3, [pc, #204]	@ (80065fc <scalbn+0xf4>)
 800652e:	429e      	cmp	r6, r3
 8006530:	4604      	mov	r4, r0
 8006532:	460d      	mov	r5, r1
 8006534:	da0f      	bge.n	8006556 <scalbn+0x4e>
 8006536:	a328      	add	r3, pc, #160	@ (adr r3, 80065d8 <scalbn+0xd0>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	e01e      	b.n	800657c <scalbn+0x74>
 800653e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006542:	4291      	cmp	r1, r2
 8006544:	d10b      	bne.n	800655e <scalbn+0x56>
 8006546:	4622      	mov	r2, r4
 8006548:	4620      	mov	r0, r4
 800654a:	4629      	mov	r1, r5
 800654c:	f7f9 fe42 	bl	80001d4 <__adddf3>
 8006550:	4604      	mov	r4, r0
 8006552:	460d      	mov	r5, r1
 8006554:	e022      	b.n	800659c <scalbn+0x94>
 8006556:	460b      	mov	r3, r1
 8006558:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800655c:	3936      	subs	r1, #54	@ 0x36
 800655e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006562:	4296      	cmp	r6, r2
 8006564:	dd0d      	ble.n	8006582 <scalbn+0x7a>
 8006566:	2d00      	cmp	r5, #0
 8006568:	a11d      	add	r1, pc, #116	@ (adr r1, 80065e0 <scalbn+0xd8>)
 800656a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800656e:	da02      	bge.n	8006576 <scalbn+0x6e>
 8006570:	a11d      	add	r1, pc, #116	@ (adr r1, 80065e8 <scalbn+0xe0>)
 8006572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006576:	a31a      	add	r3, pc, #104	@ (adr r3, 80065e0 <scalbn+0xd8>)
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	f7f9 ffe0 	bl	8000540 <__aeabi_dmul>
 8006580:	e7e6      	b.n	8006550 <scalbn+0x48>
 8006582:	1872      	adds	r2, r6, r1
 8006584:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006588:	428a      	cmp	r2, r1
 800658a:	dcec      	bgt.n	8006566 <scalbn+0x5e>
 800658c:	2a00      	cmp	r2, #0
 800658e:	dd08      	ble.n	80065a2 <scalbn+0x9a>
 8006590:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006594:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006598:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800659c:	ec45 4b10 	vmov	d0, r4, r5
 80065a0:	bd70      	pop	{r4, r5, r6, pc}
 80065a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80065a6:	da08      	bge.n	80065ba <scalbn+0xb2>
 80065a8:	2d00      	cmp	r5, #0
 80065aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80065d8 <scalbn+0xd0>)
 80065ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065b0:	dac1      	bge.n	8006536 <scalbn+0x2e>
 80065b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80065f0 <scalbn+0xe8>)
 80065b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065b8:	e7bd      	b.n	8006536 <scalbn+0x2e>
 80065ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80065be:	3236      	adds	r2, #54	@ 0x36
 80065c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80065c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065c8:	4620      	mov	r0, r4
 80065ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006600 <scalbn+0xf8>)
 80065cc:	4629      	mov	r1, r5
 80065ce:	2200      	movs	r2, #0
 80065d0:	e7d4      	b.n	800657c <scalbn+0x74>
 80065d2:	bf00      	nop
 80065d4:	f3af 8000 	nop.w
 80065d8:	c2f8f359 	.word	0xc2f8f359
 80065dc:	01a56e1f 	.word	0x01a56e1f
 80065e0:	8800759c 	.word	0x8800759c
 80065e4:	7e37e43c 	.word	0x7e37e43c
 80065e8:	8800759c 	.word	0x8800759c
 80065ec:	fe37e43c 	.word	0xfe37e43c
 80065f0:	c2f8f359 	.word	0xc2f8f359
 80065f4:	81a56e1f 	.word	0x81a56e1f
 80065f8:	43500000 	.word	0x43500000
 80065fc:	ffff3cb0 	.word	0xffff3cb0
 8006600:	3c900000 	.word	0x3c900000
 8006604:	00000000 	.word	0x00000000

08006608 <floor>:
 8006608:	ec51 0b10 	vmov	r0, r1, d0
 800660c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006614:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006618:	2e13      	cmp	r6, #19
 800661a:	460c      	mov	r4, r1
 800661c:	4605      	mov	r5, r0
 800661e:	4680      	mov	r8, r0
 8006620:	dc34      	bgt.n	800668c <floor+0x84>
 8006622:	2e00      	cmp	r6, #0
 8006624:	da17      	bge.n	8006656 <floor+0x4e>
 8006626:	a332      	add	r3, pc, #200	@ (adr r3, 80066f0 <floor+0xe8>)
 8006628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662c:	f7f9 fdd2 	bl	80001d4 <__adddf3>
 8006630:	2200      	movs	r2, #0
 8006632:	2300      	movs	r3, #0
 8006634:	f7fa fa14 	bl	8000a60 <__aeabi_dcmpgt>
 8006638:	b150      	cbz	r0, 8006650 <floor+0x48>
 800663a:	2c00      	cmp	r4, #0
 800663c:	da55      	bge.n	80066ea <floor+0xe2>
 800663e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006642:	432c      	orrs	r4, r5
 8006644:	2500      	movs	r5, #0
 8006646:	42ac      	cmp	r4, r5
 8006648:	4c2b      	ldr	r4, [pc, #172]	@ (80066f8 <floor+0xf0>)
 800664a:	bf08      	it	eq
 800664c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006650:	4621      	mov	r1, r4
 8006652:	4628      	mov	r0, r5
 8006654:	e023      	b.n	800669e <floor+0x96>
 8006656:	4f29      	ldr	r7, [pc, #164]	@ (80066fc <floor+0xf4>)
 8006658:	4137      	asrs	r7, r6
 800665a:	ea01 0307 	and.w	r3, r1, r7
 800665e:	4303      	orrs	r3, r0
 8006660:	d01d      	beq.n	800669e <floor+0x96>
 8006662:	a323      	add	r3, pc, #140	@ (adr r3, 80066f0 <floor+0xe8>)
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f7f9 fdb4 	bl	80001d4 <__adddf3>
 800666c:	2200      	movs	r2, #0
 800666e:	2300      	movs	r3, #0
 8006670:	f7fa f9f6 	bl	8000a60 <__aeabi_dcmpgt>
 8006674:	2800      	cmp	r0, #0
 8006676:	d0eb      	beq.n	8006650 <floor+0x48>
 8006678:	2c00      	cmp	r4, #0
 800667a:	bfbe      	ittt	lt
 800667c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006680:	4133      	asrlt	r3, r6
 8006682:	18e4      	addlt	r4, r4, r3
 8006684:	ea24 0407 	bic.w	r4, r4, r7
 8006688:	2500      	movs	r5, #0
 800668a:	e7e1      	b.n	8006650 <floor+0x48>
 800668c:	2e33      	cmp	r6, #51	@ 0x33
 800668e:	dd0a      	ble.n	80066a6 <floor+0x9e>
 8006690:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006694:	d103      	bne.n	800669e <floor+0x96>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	f7f9 fd9b 	bl	80001d4 <__adddf3>
 800669e:	ec41 0b10 	vmov	d0, r0, r1
 80066a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80066aa:	f04f 37ff 	mov.w	r7, #4294967295
 80066ae:	40df      	lsrs	r7, r3
 80066b0:	4207      	tst	r7, r0
 80066b2:	d0f4      	beq.n	800669e <floor+0x96>
 80066b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80066f0 <floor+0xe8>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f7f9 fd8b 	bl	80001d4 <__adddf3>
 80066be:	2200      	movs	r2, #0
 80066c0:	2300      	movs	r3, #0
 80066c2:	f7fa f9cd 	bl	8000a60 <__aeabi_dcmpgt>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d0c2      	beq.n	8006650 <floor+0x48>
 80066ca:	2c00      	cmp	r4, #0
 80066cc:	da0a      	bge.n	80066e4 <floor+0xdc>
 80066ce:	2e14      	cmp	r6, #20
 80066d0:	d101      	bne.n	80066d6 <floor+0xce>
 80066d2:	3401      	adds	r4, #1
 80066d4:	e006      	b.n	80066e4 <floor+0xdc>
 80066d6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80066da:	2301      	movs	r3, #1
 80066dc:	40b3      	lsls	r3, r6
 80066de:	441d      	add	r5, r3
 80066e0:	4545      	cmp	r5, r8
 80066e2:	d3f6      	bcc.n	80066d2 <floor+0xca>
 80066e4:	ea25 0507 	bic.w	r5, r5, r7
 80066e8:	e7b2      	b.n	8006650 <floor+0x48>
 80066ea:	2500      	movs	r5, #0
 80066ec:	462c      	mov	r4, r5
 80066ee:	e7af      	b.n	8006650 <floor+0x48>
 80066f0:	8800759c 	.word	0x8800759c
 80066f4:	7e37e43c 	.word	0x7e37e43c
 80066f8:	bff00000 	.word	0xbff00000
 80066fc:	000fffff 	.word	0x000fffff

08006700 <_init>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	bf00      	nop
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr

0800670c <_fini>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	bf00      	nop
 8006710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006712:	bc08      	pop	{r3}
 8006714:	469e      	mov	lr, r3
 8006716:	4770      	bx	lr
