
wyswietlacz_graficzny.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004168  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032a0  080042f0  080042f0  000052f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007590  08007590  00009078  2**0
                  CONTENTS
  4 .ARM          00000000  08007590  08007590  00009078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007590  08007590  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007590  08007590  00008590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007594  08007594  00008594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007598  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a220  20000078  08007610  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000a298  08007610  00009298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160b7  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e89  00000000  00000000  0001f15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00021fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab5  00000000  00000000  00022a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e95  00000000  00000000  000234fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bd8  00000000  00000000  00048392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e653e  00000000  00000000  00058f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f4a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002180  00000000  00000000  0013f4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00004e88  00000000  00000000  0014166c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  001464f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042d8 	.word	0x080042d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080042d8 	.word	0x080042d8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <MX_DMA_Init+0x2c>)
{
 8000bd2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000bd6:	f042 0201 	orr.w	r2, r2, #1
 8000bda:	649a      	str	r2, [r3, #72]	@ 0x48
 8000bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000be6:	4611      	mov	r1, r2
 8000be8:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000bec:	f000 fc64 	bl	80014b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bf0:	200f      	movs	r0, #15

}
 8000bf2:	b003      	add	sp, #12
 8000bf4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bf8:	f000 bc90 	b.w	800151c <HAL_NVIC_EnableIRQ>
 8000bfc:	40021000 	.word	0x40021000

08000c00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c00:	b510      	push	{r4, lr}
 8000c02:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	2214      	movs	r2, #20
 8000c06:	2100      	movs	r1, #0
 8000c08:	a803      	add	r0, sp, #12
 8000c0a:	f002 f9e9 	bl	8002fe0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_GPIO_Init+0x7c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000c10:	4c1b      	ldr	r4, [pc, #108]	@ (8000c80 <MX_GPIO_Init+0x80>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c14:	f042 0204 	orr.w	r2, r2, #4
 8000c18:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c1c:	f002 0204 	and.w	r2, r2, #4
 8000c20:	9200      	str	r2, [sp, #0]
 8000c22:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c26:	f042 0202 	orr.w	r2, r2, #2
 8000c2a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c2e:	f002 0202 	and.w	r2, r2, #2
 8000c32:	9201      	str	r2, [sp, #4]
 8000c34:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c38:	f042 0201 	orr.w	r2, r2, #1
 8000c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000c46:	4620      	mov	r0, r4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f640 0104 	movw	r1, #2052	@ 0x804
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000c50:	f000 fe50 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000c54:	4620      	mov	r0, r4
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c5c:	f000 fe4a 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	f641 0204 	movw	r2, #6148	@ 0x1804
 8000c64:	2301      	movs	r3, #1
 8000c66:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	e9cd 3305 	strd	r3, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f000 fd64 	bl	8001740 <HAL_GPIO_Init>

}
 8000c78:	b008      	add	sp, #32
 8000c7a:	bd10      	pop	{r4, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	48000400 	.word	0x48000400

08000c84 <lcd_data>:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}

//wysyłanie bajtu do wyścietlacza
static void lcd_data(uint8_t data)
{
 8000c84:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000c86:	4c0f      	ldr	r4, [pc, #60]	@ (8000cc4 <lcd_data+0x40>)
{
 8000c88:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c94:	f000 fe2e 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c98:	4620      	mov	r0, r4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ca0:	f000 fe28 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	f10d 0107 	add.w	r1, sp, #7
 8000cac:	2201      	movs	r2, #1
 8000cae:	4806      	ldr	r0, [pc, #24]	@ (8000cc8 <lcd_data+0x44>)
 8000cb0:	f001 fb5e 	bl	8002370 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f000 fe1a 	bl	80018f4 <HAL_GPIO_WritePin>
}
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd10      	pop	{r4, pc}
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	2000a0e4 	.word	0x2000a0e4

08000ccc <lcd_data16>:
}

//funkcja rozbijająca dużą liczbę na mniejszą, za pomocą SPI można wys;lac tylko 8 butów,
//a wyświetlacz czasami potrzebuje 16
static void lcd_data16(uint16_t value)
{
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	4604      	mov	r4, r0
	lcd_data(value >> 8);
 8000cd0:	0a00      	lsrs	r0, r0, #8
 8000cd2:	f7ff ffd7 	bl	8000c84 <lcd_data>
	lcd_data(value);
 8000cd6:	b2e0      	uxtb	r0, r4
}
 8000cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_data(value);
 8000cdc:	f7ff bfd2 	b.w	8000c84 <lcd_data>

08000ce0 <lcd_cmd>:
{
 8000ce0:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000ce2:	4c0f      	ldr	r4, [pc, #60]	@ (8000d20 <lcd_cmd+0x40>)
{
 8000ce4:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4620      	mov	r0, r4
 8000cec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cf0:	f000 fe00 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cfc:	f000 fdfa 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	f10d 0107 	add.w	r1, sp, #7
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4806      	ldr	r0, [pc, #24]	@ (8000d24 <lcd_cmd+0x44>)
 8000d0c:	f001 fb30 	bl	8002370 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d16:	4620      	mov	r0, r4
 8000d18:	f000 fdec 	bl	80018f4 <HAL_GPIO_WritePin>
}
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd10      	pop	{r4, pc}
 8000d20:	48000400 	.word	0x48000400
 8000d24:	2000a0e4 	.word	0x2000a0e4

08000d28 <lcd_init>:
{
 8000d28:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	4815      	ldr	r0, [pc, #84]	@ (8000d84 <lcd_init+0x5c>)
 8000d30:	4d15      	ldr	r5, [pc, #84]	@ (8000d88 <lcd_init+0x60>)
 8000d32:	f000 fddf 	bl	80018f4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000d36:	2064      	movs	r0, #100	@ 0x64
 8000d38:	f000 fb98 	bl	800146c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000d3c:	4811      	ldr	r0, [pc, #68]	@ (8000d84 <lcd_init+0x5c>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2104      	movs	r1, #4
 8000d42:	f000 fdd7 	bl	80018f4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000d46:	2064      	movs	r0, #100	@ 0x64
 8000d48:	f000 fb90 	bl	800146c <HAL_Delay>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000d4c:	2400      	movs	r4, #0
    lcd_send(init_table[i]);
 8000d4e:	f835 3b02 	ldrh.w	r3, [r5], #2
		lcd_cmd(value);
 8000d52:	b2d8      	uxtb	r0, r3
	if (value & 0x100) {
 8000d54:	05db      	lsls	r3, r3, #23
 8000d56:	d512      	bpl.n	8000d7e <lcd_init+0x56>
		lcd_cmd(value);
 8000d58:	f7ff ffc2 	bl	8000ce0 <lcd_cmd>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000d5c:	3401      	adds	r4, #1
 8000d5e:	2c4c      	cmp	r4, #76	@ 0x4c
 8000d60:	d1f5      	bne.n	8000d4e <lcd_init+0x26>
  HAL_Delay(200);
 8000d62:	20c8      	movs	r0, #200	@ 0xc8
 8000d64:	f000 fb82 	bl	800146c <HAL_Delay>
  lcd_cmd(ST7735S_SLPOUT);
 8000d68:	2011      	movs	r0, #17
 8000d6a:	f7ff ffb9 	bl	8000ce0 <lcd_cmd>
  HAL_Delay(120);
 8000d6e:	2078      	movs	r0, #120	@ 0x78
 8000d70:	f000 fb7c 	bl	800146c <HAL_Delay>
}
 8000d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  lcd_cmd(ST7735S_DISPON);
 8000d78:	2029      	movs	r0, #41	@ 0x29
 8000d7a:	f7ff bfb1 	b.w	8000ce0 <lcd_cmd>
		lcd_data(value);
 8000d7e:	f7ff ff81 	bl	8000c84 <lcd_data>
 8000d82:	e7eb      	b.n	8000d5c <lcd_init+0x34>
 8000d84:	48000400 	.word	0x48000400
 8000d88:	080042f0 	.word	0x080042f0

08000d8c <lcd_put_pixel>:
static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

//rysowanie pikseli
void lcd_put_pixel(int x, int y, uint16_t color)
{
	frame_buffer[x + y * LCD_WIDTH] = color;
 8000d8c:	23a0      	movs	r3, #160	@ 0xa0
 8000d8e:	fb03 0001 	mla	r0, r3, r1, r0
 8000d92:	4b02      	ldr	r3, [pc, #8]	@ (8000d9c <lcd_put_pixel+0x10>)
 8000d94:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000094 	.word	0x20000094

08000da0 <lcd_copy>:
}
*/

//wykorzystanie DMA do kopiowania
void lcd_copy(void)
{
 8000da0:	b510      	push	{r4, lr}
  lcd_cmd(ST7735S_CASET);
 8000da2:	202a      	movs	r0, #42	@ 0x2a
 8000da4:	f7ff ff9c 	bl	8000ce0 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff ff8f 	bl	8000ccc <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8000dae:	20a0      	movs	r0, #160	@ 0xa0
 8000db0:	f7ff ff8c 	bl	8000ccc <lcd_data16>
  lcd_cmd(ST7735S_RASET);
 8000db4:	202b      	movs	r0, #43	@ 0x2b
 8000db6:	f7ff ff93 	bl	8000ce0 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f7ff ff86 	bl	8000ccc <lcd_data16>
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
	lcd_cmd(ST7735S_RAMWR);
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8000df8 <lcd_copy+0x58>)
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8000dc2:	2081      	movs	r0, #129	@ 0x81
 8000dc4:	f7ff ff82 	bl	8000ccc <lcd_data16>
	lcd_cmd(ST7735S_RAMWR);
 8000dc8:	202c      	movs	r0, #44	@ 0x2c
 8000dca:	f7ff ff89 	bl	8000ce0 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000dce:	4620      	mov	r0, r4
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dd6:	f000 fd8d 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000dda:	4620      	mov	r0, r4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de2:	f000 fd87 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
}
 8000de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8000dea:	4904      	ldr	r1, [pc, #16]	@ (8000dfc <lcd_copy+0x5c>)
 8000dec:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <lcd_copy+0x60>)
 8000dee:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8000df2:	f001 bb87 	b.w	8002504 <HAL_SPI_Transmit_DMA>
 8000df6:	bf00      	nop
 8000df8:	48000400 	.word	0x48000400
 8000dfc:	20000094 	.word	0x20000094
 8000e00:	2000a0e4 	.word	0x2000a0e4

08000e04 <lcd_transfer_done>:

void lcd_transfer_done(void)
{
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e04:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <lcd_transfer_done+0xc>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e0c:	f000 bd72 	b.w	80018f4 <HAL_GPIO_WritePin>
 8000e10:	48000400 	.word	0x48000400

08000e14 <lcd_is_busy>:
}

bool lcd_is_busy(void)
{
 8000e14:	b508      	push	{r3, lr}
	if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_BUSY)
 8000e16:	4803      	ldr	r0, [pc, #12]	@ (8000e24 <lcd_is_busy+0x10>)
 8000e18:	f001 fc43 	bl	80026a2 <HAL_SPI_GetState>
		return true;
	else
		return false;
}
 8000e1c:	1e83      	subs	r3, r0, #2
 8000e1e:	4258      	negs	r0, r3
 8000e20:	4158      	adcs	r0, r3
 8000e22:	bd08      	pop	{r3, pc}
 8000e24:	2000a0e4 	.word	0x2000a0e4

08000e28 <HAL_SPI_TxCpltCallback>:
}
*/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
	if (hspi == &hspi2)
 8000e28:	4b02      	ldr	r3, [pc, #8]	@ (8000e34 <HAL_SPI_TxCpltCallback+0xc>)
 8000e2a:	4283      	cmp	r3, r0
 8000e2c:	d101      	bne.n	8000e32 <HAL_SPI_TxCpltCallback+0xa>
	{
		lcd_transfer_done();
 8000e2e:	f7ff bfe9 	b.w	8000e04 <lcd_transfer_done>
	}
}
 8000e32:	4770      	bx	lr
 8000e34:	2000a0e4 	.word	0x2000a0e4

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b500      	push	{lr}
 8000e3a:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3c:	2244      	movs	r2, #68	@ 0x44
 8000e3e:	2100      	movs	r1, #0
 8000e40:	a805      	add	r0, sp, #20
 8000e42:	f002 f8cd 	bl	8002fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e46:	2214      	movs	r2, #20
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4668      	mov	r0, sp
 8000e4c:	f002 f8c8 	bl	8002fe0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e50:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e54:	f000 fd5c 	bl	8001910 <HAL_PWREx_ControlVoltageScaling>
 8000e58:	b108      	cbz	r0, 8000e5e <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <SystemClock_Config+0x24>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e5e:	2310      	movs	r3, #16
 8000e60:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e62:	2360      	movs	r3, #96	@ 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e64:	2201      	movs	r2, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e66:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e6a:	e9cd 200b 	strd	r2, r0, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e6e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e72:	2028      	movs	r0, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e74:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e76:	2207      	movs	r2, #7
 8000e78:	e9cd 0212 	strd	r0, r2, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e7e:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	f000 fe0b 	bl	8001a9c <HAL_RCC_OscConfig>
 8000e86:	b108      	cbz	r0, 8000e8c <SystemClock_Config+0x54>
 8000e88:	b672      	cpsid	i
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	220f      	movs	r2, #15
 8000e92:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e94:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e96:	2104      	movs	r1, #4
 8000e98:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e9e:	f001 f87b 	bl	8001f98 <HAL_RCC_ClockConfig>
 8000ea2:	b108      	cbz	r0, 8000ea8 <SystemClock_Config+0x70>
 8000ea4:	b672      	cpsid	i
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <SystemClock_Config+0x6e>
}
 8000ea8:	b017      	add	sp, #92	@ 0x5c
 8000eaa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000eb0 <main>:
{
 8000eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_Init();
 8000eb2:	f000 fab9 	bl	8001428 <HAL_Init>
  SystemClock_Config();
 8000eb6:	f7ff ffbf 	bl	8000e38 <SystemClock_Config>
  MX_GPIO_Init();
 8000eba:	f7ff fea1 	bl	8000c00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ebe:	f7ff fe87 	bl	8000bd0 <MX_DMA_Init>
  MX_SPI2_Init();
 8000ec2:	f000 f985 	bl	80011d0 <MX_SPI2_Init>
  lcd_init();
 8000ec6:	f7ff ff2f 	bl	8000d28 <lcd_init>
  for (int i = 0; i < 8; i++) {
 8000eca:	2500      	movs	r5, #0
    hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
 8000ecc:	2100      	movs	r1, #0
 8000ece:	012a      	lsls	r2, r5, #4
 8000ed0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	f001 ffbf 	bl	8002e58 <rgb565>
 8000eda:	b2ac      	uxth	r4, r5
 8000edc:	1ca6      	adds	r6, r4, #2
 8000ede:	f1c4 037e 	rsb	r3, r4, #126	@ 0x7e
 8000ee2:	f1c4 029e 	rsb	r2, r4, #158	@ 0x9e
 8000ee6:	f1c4 0408 	rsb	r4, r4, #8
 8000eea:	b236      	sxth	r6, r6
 8000eec:	b224      	sxth	r4, r4
 8000eee:	9001      	str	r0, [sp, #4]
 8000ef0:	9400      	str	r4, [sp, #0]
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	b212      	sxth	r2, r2
 8000ef6:	4631      	mov	r1, r6
 8000ef8:	4630      	mov	r0, r6
  for (int i = 0; i < 8; i++) {
 8000efa:	3501      	adds	r5, #1
    hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
 8000efc:	f001 fec2 	bl	8002c84 <hagl_draw_rounded_rectangle>
  for (int i = 0; i < 8; i++) {
 8000f00:	2d08      	cmp	r5, #8
 8000f02:	d1e3      	bne.n	8000ecc <main+0x1c>
  hagl_put_text(L"Hello Mordko!", 40, 55, YELLOW, font6x9);
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <main+0x88>)
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2237      	movs	r2, #55	@ 0x37
 8000f0a:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 8000f0e:	2128      	movs	r1, #40	@ 0x28
 8000f10:	480a      	ldr	r0, [pc, #40]	@ (8000f3c <main+0x8c>)
 8000f12:	f001 fe88 	bl	8002c26 <hagl_put_text>
  lcd_copy();
 8000f16:	f7ff ff43 	bl	8000da0 <lcd_copy>
  lcd_init();
 8000f1a:	f7ff ff05 	bl	8000d28 <lcd_init>
  plasma_init();
 8000f1e:	f000 f813 	bl	8000f48 <plasma_init>
	  plasma_animate();
 8000f22:	f000 f943 	bl	80011ac <plasma_animate>
    while (lcd_is_busy()) {}
 8000f26:	f7ff ff75 	bl	8000e14 <lcd_is_busy>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d1fb      	bne.n	8000f26 <main+0x76>
    plasma_render();
 8000f2e:	f000 f911 	bl	8001154 <plasma_render>
    lcd_copy();
 8000f32:	f7ff ff35 	bl	8000da0 <lcd_copy>
	  plasma_animate();
 8000f36:	e7f4      	b.n	8000f22 <main+0x72>
 8000f38:	080043c0 	.word	0x080043c0
 8000f3c:	08004388 	.word	0x08004388

08000f40 <Error_Handler>:
 8000f40:	b672      	cpsid	i
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <Error_Handler+0x2>
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <plasma_init>:

static const uint8_t SPEED = 4;
static const uint8_t PIXEL_SIZE = 2;

void plasma_init()
{
 8000f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f4c:	ed2d 8b04 	vpush	{d8-d9}
    uint8_t *ptr = plasma = malloc(DISPLAY_WIDTH * DISPLAY_HEIGHT * sizeof(uint8_t));
 8000f50:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
{
 8000f54:	b087      	sub	sp, #28
    uint8_t *ptr = plasma = malloc(DISPLAY_WIDTH * DISPLAY_HEIGHT * sizeof(uint8_t));
 8000f56:	f001 ff8d 	bl	8002e74 <malloc>
 8000f5a:	4b77      	ldr	r3, [pc, #476]	@ (8001138 <plasma_init+0x1f0>)
 8000f5c:	9001      	str	r0, [sp, #4]
 8000f5e:	6018      	str	r0, [r3, #0]
    palette = malloc(256 * sizeof(color_t));
 8000f60:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f64:	f001 ff86 	bl	8002e74 <malloc>
 8000f68:	f8df 91dc 	ldr.w	r9, [pc, #476]	@ 8001148 <plasma_init+0x200>

    /* Generate nice continous palette. */
    for(uint16_t i = 0; i < 256; i++) {
        const uint8_t r = 128.0f + 128.0f * sin((M_PI * i / 128.0f) + 1);
 8000f6c:	f8df b1dc 	ldr.w	fp, [pc, #476]	@ 800114c <plasma_init+0x204>
        const uint8_t g = 128.0f + 128.0f * sin((M_PI * i / 64.0f) + 1);
 8000f70:	4d72      	ldr	r5, [pc, #456]	@ (800113c <plasma_init+0x1f4>)
    palette = malloc(256 * sizeof(color_t));
 8000f72:	f8c9 0000 	str.w	r0, [r9]
 8000f76:	f04f 0800 	mov.w	r8, #0
        const uint8_t r = 128.0f + 128.0f * sin((M_PI * i / 128.0f) + 1);
 8000f7a:	f04f 0a00 	mov.w	sl, #0
        const uint8_t g = 128.0f + 128.0f * sin((M_PI * i / 64.0f) + 1);
 8000f7e:	2400      	movs	r4, #0
        const uint8_t r = 128.0f + 128.0f * sin((M_PI * i / 128.0f) + 1);
 8000f80:	4640      	mov	r0, r8
 8000f82:	f7ff fa73 	bl	800046c <__aeabi_i2d>
 8000f86:	a36a      	add	r3, pc, #424	@ (adr r3, 8001130 <plasma_init+0x1e8>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff fad8 	bl	8000540 <__aeabi_dmul>
 8000f90:	2200      	movs	r2, #0
 8000f92:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f96:	4606      	mov	r6, r0
 8000f98:	460f      	mov	r7, r1
 8000f9a:	f7ff fad1 	bl	8000540 <__aeabi_dmul>
 8000f9e:	4652      	mov	r2, sl
 8000fa0:	465b      	mov	r3, fp
 8000fa2:	f7ff f917 	bl	80001d4 <__adddf3>
 8000fa6:	ec41 0b10 	vmov	d0, r0, r1
 8000faa:	f002 f889 	bl	80030c0 <sin>
        const uint8_t g = 128.0f + 128.0f * sin((M_PI * i / 64.0f) + 1);
 8000fae:	4b64      	ldr	r3, [pc, #400]	@ (8001140 <plasma_init+0x1f8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	4639      	mov	r1, r7
        const uint8_t r = 128.0f + 128.0f * sin((M_PI * i / 128.0f) + 1);
 8000fb6:	ed8d 0b02 	vstr	d0, [sp, #8]
        const uint8_t g = 128.0f + 128.0f * sin((M_PI * i / 64.0f) + 1);
 8000fba:	f7ff fac1 	bl	8000540 <__aeabi_dmul>
 8000fbe:	4652      	mov	r2, sl
 8000fc0:	465b      	mov	r3, fp
 8000fc2:	f7ff f907 	bl	80001d4 <__adddf3>
 8000fc6:	ec41 0b10 	vmov	d0, r0, r1
 8000fca:	f002 f879 	bl	80030c0 <sin>
 8000fce:	4622      	mov	r2, r4
 8000fd0:	ec51 0b10 	vmov	r0, r1, d0
 8000fd4:	462b      	mov	r3, r5
 8000fd6:	f7ff fab3 	bl	8000540 <__aeabi_dmul>
 8000fda:	4622      	mov	r2, r4
 8000fdc:	462b      	mov	r3, r5
 8000fde:	f7ff f8f9 	bl	80001d4 <__adddf3>
 8000fe2:	f7ff fd85 	bl	8000af0 <__aeabi_d2uiz>
        const uint8_t r = 128.0f + 128.0f * sin((M_PI * i / 128.0f) + 1);
 8000fe6:	4622      	mov	r2, r4
        const uint8_t b = 64;
        palette[i] = hagl_color(r, g, b);
 8000fe8:	b2c6      	uxtb	r6, r0
        const uint8_t r = 128.0f + 128.0f * sin((M_PI * i / 128.0f) + 1);
 8000fea:	462b      	mov	r3, r5
 8000fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000ff0:	f7ff faa6 	bl	8000540 <__aeabi_dmul>
 8000ff4:	4622      	mov	r2, r4
 8000ff6:	462b      	mov	r3, r5
 8000ff8:	f7ff f8ec 	bl	80001d4 <__adddf3>
 8000ffc:	f7ff fd78 	bl	8000af0 <__aeabi_d2uiz>
        palette[i] = hagl_color(r, g, b);
 8001000:	2240      	movs	r2, #64	@ 0x40
 8001002:	4631      	mov	r1, r6
 8001004:	b2c0      	uxtb	r0, r0
 8001006:	f8d9 7000 	ldr.w	r7, [r9]
 800100a:	f001 ff23 	bl	8002e54 <hagl_color>
 800100e:	f827 0018 	strh.w	r0, [r7, r8, lsl #1]
    for(uint16_t i = 0; i < 256; i++) {
 8001012:	f108 0801 	add.w	r8, r8, #1
 8001016:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 800101a:	d1b1      	bne.n	8000f80 <plasma_init+0x38>

    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
                /* Generate three different sinusoids. */
                const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
                const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 800101c:	4f47      	ldr	r7, [pc, #284]	@ (800113c <plasma_init+0x1f4>)
                const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 800101e:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 8001144 <plasma_init+0x1fc>
                const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8001022:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 8001150 <plasma_init+0x208>
 8001026:	2400      	movs	r4, #0
                const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 8001028:	2600      	movs	r6, #0
                const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 800102a:	f04f 0800 	mov.w	r8, #0
                const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 800102e:	ee07 4a90 	vmov	s15, r4
 8001032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001036:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 800103a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800103e:	9b01      	ldr	r3, [sp, #4]
 8001040:	f04f 0a28 	mov.w	sl, #40	@ 0x28
 8001044:	fb0a 3a04 	mla	sl, sl, r4, r3
                const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8001048:	fb04 fb04 	mul.w	fp, r4, r4
 800104c:	2500      	movs	r5, #0
                const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 800104e:	ee17 0a90 	vmov	r0, s15
 8001052:	f7ff fa1d 	bl	8000490 <__aeabi_f2d>
 8001056:	ec41 0b10 	vmov	d0, r0, r1
 800105a:	f002 f831 	bl	80030c0 <sin>
 800105e:	4632      	mov	r2, r6
 8001060:	ec51 0b10 	vmov	r0, r1, d0
 8001064:	463b      	mov	r3, r7
 8001066:	f7ff fa6b 	bl	8000540 <__aeabi_dmul>
 800106a:	4632      	mov	r2, r6
 800106c:	463b      	mov	r3, r7
 800106e:	f7ff f8b1 	bl	80001d4 <__adddf3>
 8001072:	f7ff fd5d 	bl	8000b30 <__aeabi_d2f>
 8001076:	ee08 0a90 	vmov	s17, r0
                const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 800107a:	ee07 5a90 	vmov	s15, r5
 800107e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001082:	ee67 7a89 	vmul.f32	s15, s15, s18
 8001086:	ee17 0a90 	vmov	r0, s15
 800108a:	f7ff fa01 	bl	8000490 <__aeabi_f2d>
 800108e:	ec41 0b10 	vmov	d0, r0, r1
 8001092:	f002 f815 	bl	80030c0 <sin>
                const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8001096:	fb05 b005 	mla	r0, r5, r5, fp
                const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 800109a:	ed8d 0b02 	vstr	d0, [sp, #8]
                const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 800109e:	f7ff f9e5 	bl	800046c <__aeabi_i2d>
 80010a2:	ec41 0b10 	vmov	d0, r0, r1
 80010a6:	f001 ffdf 	bl	8003068 <sqrt>
 80010aa:	4642      	mov	r2, r8
 80010ac:	464b      	mov	r3, r9
 80010ae:	ec51 0b10 	vmov	r0, r1, d0
 80010b2:	f7ff fb6f 	bl	8000794 <__aeabi_ddiv>
 80010b6:	ec41 0b10 	vmov	d0, r0, r1
 80010ba:	f002 f801 	bl	80030c0 <sin>
                const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 80010be:	4632      	mov	r2, r6
 80010c0:	463b      	mov	r3, r7
 80010c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 80010c6:	ed8d 0b04 	vstr	d0, [sp, #16]
                const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 80010ca:	f7ff fa39 	bl	8000540 <__aeabi_dmul>
 80010ce:	4632      	mov	r2, r6
 80010d0:	463b      	mov	r3, r7
 80010d2:	f7ff f87f 	bl	80001d4 <__adddf3>
 80010d6:	f7ff fd2b 	bl	8000b30 <__aeabi_d2f>
 80010da:	ee07 0a90 	vmov	s15, r0
                const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 80010de:	4632      	mov	r2, r6
 80010e0:	463b      	mov	r3, r7
 80010e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
                /* Calculate average of the three sinusoids */
                /* and use it as color index. */
                const uint8_t color = (v1 + v2 + v3) / 3;
 80010e6:	ee37 8aa8 	vadd.f32	s16, s15, s17
                const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 80010ea:	f7ff fa29 	bl	8000540 <__aeabi_dmul>
 80010ee:	463b      	mov	r3, r7
 80010f0:	4632      	mov	r2, r6
 80010f2:	f7ff f86f 	bl	80001d4 <__adddf3>
 80010f6:	f7ff fd1b 	bl	8000b30 <__aeabi_d2f>
 80010fa:	ee07 0a90 	vmov	s15, r0
                const uint8_t color = (v1 + v2 + v3) / 3;
 80010fe:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001102:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001106:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 800110a:	3502      	adds	r5, #2
 800110c:	2da0      	cmp	r5, #160	@ 0xa0
                const uint8_t color = (v1 + v2 + v3) / 3;
 800110e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001112:	ee17 3a90 	vmov	r3, s15
 8001116:	f80a 3b01 	strb.w	r3, [sl], #1
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 800111a:	d1ae      	bne.n	800107a <plasma_init+0x132>
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
 800111c:	3402      	adds	r4, #2
 800111e:	2c80      	cmp	r4, #128	@ 0x80
 8001120:	d185      	bne.n	800102e <plasma_init+0xe6>
                *(ptr++) = color;
        }
    }
}
 8001122:	b007      	add	sp, #28
 8001124:	ecbd 8b04 	vpop	{d8-d9}
 8001128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800112c:	f3af 8000 	nop.w
 8001130:	54442d18 	.word	0x54442d18
 8001134:	400921fb 	.word	0x400921fb
 8001138:	2000a094 	.word	0x2000a094
 800113c:	40600000 	.word	0x40600000
 8001140:	3f900000 	.word	0x3f900000
 8001144:	3d000000 	.word	0x3d000000
 8001148:	2000a098 	.word	0x2000a098
 800114c:	3ff00000 	.word	0x3ff00000
 8001150:	40380000 	.word	0x40380000

08001154 <plasma_render>:

void plasma_render()
{
    uint8_t *ptr = plasma;
 8001154:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <plasma_render+0x50>)
{
 8001156:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t *ptr = plasma;
 800115a:	f8d3 8000 	ldr.w	r8, [r3]

    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
            /* Get a color for pixel from the plasma buffer. */
            const uint8_t index = *(ptr++);
            const color_t color = palette[index];
 800115e:	f8df a048 	ldr.w	sl, [pc, #72]	@ 80011a8 <plasma_render+0x54>
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
 8001162:	2400      	movs	r4, #0
            /* Put a pixel to the display. */
            if (1 == PIXEL_SIZE) {
                hagl_put_pixel(x, y, color);
            } else {
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 8001164:	1c66      	adds	r6, r4, #1
{
 8001166:	46c1      	mov	r9, r8
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 8001168:	2500      	movs	r5, #0
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 800116a:	b236      	sxth	r6, r6
 800116c:	b227      	sxth	r7, r4
            const color_t color = palette[index];
 800116e:	f819 1b01 	ldrb.w	r1, [r9], #1
 8001172:	f8da 3000 	ldr.w	r3, [sl]
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 8001176:	1c6a      	adds	r2, r5, #1
 8001178:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	b228      	sxth	r0, r5
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 8001180:	3502      	adds	r5, #2
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 8001182:	4633      	mov	r3, r6
 8001184:	b212      	sxth	r2, r2
 8001186:	4639      	mov	r1, r7
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 8001188:	b2ad      	uxth	r5, r5
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 800118a:	f001 fc8f 	bl	8002aac <hagl_fill_rectangle>
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 800118e:	2da0      	cmp	r5, #160	@ 0xa0
 8001190:	d1ed      	bne.n	800116e <plasma_render+0x1a>
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
 8001192:	3402      	adds	r4, #2
 8001194:	b2a4      	uxth	r4, r4
 8001196:	2c80      	cmp	r4, #128	@ 0x80
            const uint8_t index = *(ptr++);
 8001198:	f108 0850 	add.w	r8, r8, #80	@ 0x50
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
 800119c:	d1e2      	bne.n	8001164 <plasma_render+0x10>
            }
        }
    }
}
 800119e:	b002      	add	sp, #8
 80011a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a4:	2000a094 	.word	0x2000a094
 80011a8:	2000a098 	.word	0x2000a098

080011ac <plasma_animate>:

void plasma_animate()
{
    uint8_t *ptr = plasma;
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <plasma_animate+0x20>)
 80011ae:	681b      	ldr	r3, [r3, #0]

    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y = y + PIXEL_SIZE) {
 80011b0:	f503 50a0 	add.w	r0, r3, #5120	@ 0x1400
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x = x + PIXEL_SIZE) {
 80011b4:	f103 0150 	add.w	r1, r3, #80	@ 0x50
                /* Get a color from plasma and choose the next color. */
                /* Unsigned integers wrap automatically. */
                const uint8_t index = *ptr + SPEED;
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	3204      	adds	r2, #4
                /* Put the new color back to the plasma buffer. */
                *(ptr++) = index;
 80011bc:	f803 2b01 	strb.w	r2, [r3], #1
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x = x + PIXEL_SIZE) {
 80011c0:	428b      	cmp	r3, r1
 80011c2:	d1f9      	bne.n	80011b8 <plasma_animate+0xc>
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y = y + PIXEL_SIZE) {
 80011c4:	4298      	cmp	r0, r3
 80011c6:	d1f5      	bne.n	80011b4 <plasma_animate+0x8>
        }
    }
}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2000a094 	.word	0x2000a094

080011d0 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80011d0:	4810      	ldr	r0, [pc, #64]	@ (8001214 <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011d2:	4a11      	ldr	r2, [pc, #68]	@ (8001218 <MX_SPI2_Init+0x48>)
{
 80011d4:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011d6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80011da:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011de:	2300      	movs	r3, #0
 80011e0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011e4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011ec:	2210      	movs	r2, #16
 80011ee:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 80011f2:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011fc:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001202:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001204:	f001 f84a 	bl	800229c <HAL_SPI_Init>
 8001208:	b118      	cbz	r0, 8001212 <MX_SPI2_Init+0x42>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800120a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800120e:	f7ff be97 	b.w	8000f40 <Error_Handler>
}
 8001212:	bd08      	pop	{r3, pc}
 8001214:	2000a0e4 	.word	0x2000a0e4
 8001218:	40003800 	.word	0x40003800

0800121c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	4606      	mov	r6, r0
 8001220:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	2214      	movs	r2, #20
 8001224:	2100      	movs	r1, #0
 8001226:	a803      	add	r0, sp, #12
 8001228:	f001 feda 	bl	8002fe0 <memset>
  if(spiHandle->Instance==SPI2)
 800122c:	6832      	ldr	r2, [r6, #0]
 800122e:	4b28      	ldr	r3, [pc, #160]	@ (80012d0 <HAL_SPI_MspInit+0xb4>)
 8001230:	429a      	cmp	r2, r3
 8001232:	d14a      	bne.n	80012ca <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001234:	f503 33ec 	add.w	r3, r3, #120832	@ 0x1d800
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 800123a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	4825      	ldr	r0, [pc, #148]	@ (80012d4 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800123e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001242:	659a      	str	r2, [r3, #88]	@ 0x58
 8001244:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001246:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800124a:	9200      	str	r2, [sp, #0]
 800124c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001250:	f042 0204 	orr.w	r2, r2, #4
 8001254:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001256:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001258:	f002 0204 	and.w	r2, r2, #4
 800125c:	9201      	str	r2, [sp, #4]
 800125e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001262:	f042 0202 	orr.w	r2, r2, #2
 8001266:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001270:	2405      	movs	r4, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001274:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800127e:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001282:	f000 fa5d 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	4812      	ldr	r0, [pc, #72]	@ (80012d8 <HAL_SPI_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001290:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	a903      	add	r1, sp, #12

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001296:	4c11      	ldr	r4, [pc, #68]	@ (80012dc <HAL_SPI_MspInit+0xc0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	f000 fa50 	bl	8001740 <HAL_GPIO_Init>
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80012a0:	4a0f      	ldr	r2, [pc, #60]	@ (80012e0 <HAL_SPI_MspInit+0xc4>)
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012a2:	6225      	str	r5, [r4, #32]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012aa:	2310      	movs	r3, #16
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ac:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80012b0:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012b2:	2380      	movs	r3, #128	@ 0x80
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b4:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80012b8:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80012bc:	f000 f950 	bl	8001560 <HAL_DMA_Init>
 80012c0:	b108      	cbz	r0, 80012c6 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 80012c2:	f7ff fe3d 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80012c6:	6574      	str	r4, [r6, #84]	@ 0x54
 80012c8:	62a6      	str	r6, [r4, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012ca:	b009      	add	sp, #36	@ 0x24
 80012cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40003800 	.word	0x40003800
 80012d4:	48000800 	.word	0x48000800
 80012d8:	48000400 	.word	0x48000400
 80012dc:	2000a09c 	.word	0x2000a09c
 80012e0:	40020058 	.word	0x40020058

080012e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_MspInit+0x2c>)
 80012e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012e8:	f042 0201 	orr.w	r2, r2, #1
 80012ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80012ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 80012f0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	f002 0201 	and.w	r2, r2, #1
 80012f6:	9200      	str	r2, [sp, #0]
 80012f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012fc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001300:	659a      	str	r2, [r3, #88]	@ 0x58
 8001302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130c:	b002      	add	sp, #8
 800130e:	4770      	bx	lr
 8001310:	40021000 	.word	0x40021000

08001314 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler>

08001316 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler>

08001318 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler>

0800131a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <BusFault_Handler>

0800131c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <UsageFault_Handler>

0800131e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131e:	4770      	bx	lr

08001320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001322:	4770      	bx	lr

08001324 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001324:	f000 b890 	b.w	8001448 <HAL_IncTick>

08001328 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001328:	4801      	ldr	r0, [pc, #4]	@ (8001330 <DMA1_Channel5_IRQHandler+0x8>)
 800132a:	f000 b9bf 	b.w	80016ac <HAL_DMA_IRQHandler>
 800132e:	bf00      	nop
 8001330:	2000a09c 	.word	0x2000a09c

08001334 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4a0b      	ldr	r2, [pc, #44]	@ (8001364 <_sbrk+0x30>)
 8001336:	6811      	ldr	r1, [r2, #0]
{
 8001338:	b510      	push	{r4, lr}
 800133a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800133c:	b909      	cbnz	r1, 8001342 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800133e:	490a      	ldr	r1, [pc, #40]	@ (8001368 <_sbrk+0x34>)
 8001340:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	6810      	ldr	r0, [r2, #0]
 8001344:	4909      	ldr	r1, [pc, #36]	@ (800136c <_sbrk+0x38>)
 8001346:	4c0a      	ldr	r4, [pc, #40]	@ (8001370 <_sbrk+0x3c>)
 8001348:	4403      	add	r3, r0
 800134a:	1b09      	subs	r1, r1, r4
 800134c:	428b      	cmp	r3, r1
 800134e:	d906      	bls.n	800135e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001350:	f001 fe5e 	bl	8003010 <__errno>
 8001354:	230c      	movs	r3, #12
 8001356:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001358:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800135c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800135e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001360:	e7fc      	b.n	800135c <_sbrk+0x28>
 8001362:	bf00      	nop
 8001364:	2000a148 	.word	0x2000a148
 8001368:	2000a298 	.word	0x2000a298
 800136c:	20018000 	.word	0x20018000
 8001370:	00002000 	.word	0x00002000

08001374 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001374:	4a03      	ldr	r2, [pc, #12]	@ (8001384 <SystemInit+0x10>)
 8001376:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800137a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800137e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001388:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800138c:	f7ff fff2 	bl	8001374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001392:	490d      	ldr	r1, [pc, #52]	@ (80013c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001394:	4a0d      	ldr	r2, [pc, #52]	@ (80013cc <LoopForever+0xe>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a8:	4c0a      	ldr	r4, [pc, #40]	@ (80013d4 <LoopForever+0x16>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b6:	f001 fe31 	bl	800301c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ba:	f7ff fd79 	bl	8000eb0 <main>

080013be <LoopForever>:

LoopForever:
    b LoopForever
 80013be:	e7fe      	b.n	80013be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80013cc:	08007598 	.word	0x08007598
  ldr r2, =_sbss
 80013d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80013d4:	2000a298 	.word	0x2000a298

080013d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC1_2_IRQHandler>
	...

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <HAL_InitTick+0x40>)
 80013e0:	781a      	ldrb	r2, [r3, #0]
{
 80013e2:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80013e4:	b90a      	cbnz	r2, 80013ea <HAL_InitTick+0xe>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80013e6:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80013e8:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80013f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001420 <HAL_InitTick+0x44>)
 80013f4:	6810      	ldr	r0, [r2, #0]
 80013f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80013fa:	f000 f89d 	bl	8001538 <HAL_SYSTICK_Config>
 80013fe:	4604      	mov	r4, r0
 8001400:	2800      	cmp	r0, #0
 8001402:	d1f0      	bne.n	80013e6 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001404:	2d0f      	cmp	r5, #15
 8001406:	d8ee      	bhi.n	80013e6 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	4602      	mov	r2, r0
 800140a:	4629      	mov	r1, r5
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f000 f852 	bl	80014b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <HAL_InitTick+0x48>)
 8001416:	4620      	mov	r0, r4
 8001418:	601d      	str	r5, [r3, #0]
  return status;
 800141a:	e7e5      	b.n	80013e8 <HAL_InitTick+0xc>
 800141c:	20000004 	.word	0x20000004
 8001420:	20000000 	.word	0x20000000
 8001424:	20000008 	.word	0x20000008

08001428 <HAL_Init>:
{
 8001428:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142a:	2003      	movs	r0, #3
 800142c:	f000 f832 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001430:	200f      	movs	r0, #15
 8001432:	f7ff ffd3 	bl	80013dc <HAL_InitTick>
 8001436:	4604      	mov	r4, r0
 8001438:	b918      	cbnz	r0, 8001442 <HAL_Init+0x1a>
    HAL_MspInit();
 800143a:	f7ff ff53 	bl	80012e4 <HAL_MspInit>
}
 800143e:	4620      	mov	r0, r4
 8001440:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001442:	2401      	movs	r4, #1
 8001444:	e7fb      	b.n	800143e <HAL_Init+0x16>
	...

08001448 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001448:	4a03      	ldr	r2, [pc, #12]	@ (8001458 <HAL_IncTick+0x10>)
 800144a:	4b04      	ldr	r3, [pc, #16]	@ (800145c <HAL_IncTick+0x14>)
 800144c:	6811      	ldr	r1, [r2, #0]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	440b      	add	r3, r1
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	2000a14c 	.word	0x2000a14c
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001460:	4b01      	ldr	r3, [pc, #4]	@ (8001468 <HAL_GetTick+0x8>)
 8001462:	6818      	ldr	r0, [r3, #0]
}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2000a14c 	.word	0x2000a14c

0800146c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800146c:	b538      	push	{r3, r4, r5, lr}
 800146e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff fff6 	bl	8001460 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001474:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001476:	bf1c      	itt	ne
 8001478:	4b05      	ldrne	r3, [pc, #20]	@ (8001490 <HAL_Delay+0x24>)
 800147a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800147c:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800147e:	bf18      	it	ne
 8001480:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001482:	f7ff ffed 	bl	8001460 <HAL_GetTick>
 8001486:	1b43      	subs	r3, r0, r5
 8001488:	42a3      	cmp	r3, r4
 800148a:	d3fa      	bcc.n	8001482 <HAL_Delay+0x16>
  {
  }
}
 800148c:	bd38      	pop	{r3, r4, r5, pc}
 800148e:	bf00      	nop
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4907      	ldr	r1, [pc, #28]	@ (80014b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001496:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001498:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800149c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80014b0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ba:	b530      	push	{r4, r5, lr}
 80014bc:	68dc      	ldr	r4, [r3, #12]
 80014be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	bf28      	it	cs
 80014cc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d4:	bf8c      	ite	hi
 80014d6:	3c03      	subhi	r4, #3
 80014d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014da:	fa05 f303 	lsl.w	r3, r5, r3
 80014de:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e2:	40a5      	lsls	r5, r4
 80014e4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80014ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	bfac      	ite	ge
 80014f2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	4a08      	ldrlt	r2, [pc, #32]	@ (8001518 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	bfb8      	it	lt
 80014fe:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	b2db      	uxtb	r3, r3
 8001504:	bfaa      	itet	ge
 8001506:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001510:	bd30      	pop	{r4, r5, pc}
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00
 8001518:	e000ed14 	.word	0xe000ed14

0800151c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800151c:	2800      	cmp	r0, #0
 800151e:	db07      	blt.n	8001530 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001520:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <HAL_NVIC_EnableIRQ+0x18>)
 8001522:	0941      	lsrs	r1, r0, #5
 8001524:	2301      	movs	r3, #1
 8001526:	f000 001f 	and.w	r0, r0, #31
 800152a:	4083      	lsls	r3, r0
 800152c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	3801      	subs	r0, #1
 800153a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800153e:	d20b      	bcs.n	8001558 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001540:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	4a05      	ldr	r2, [pc, #20]	@ (800155c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	21f0      	movs	r1, #240	@ 0xf0
 800154a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001550:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001552:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001554:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001556:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001558:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001562:	4603      	mov	r3, r0
 8001564:	2800      	cmp	r0, #0
 8001566:	d056      	beq.n	8001616 <HAL_DMA_Init+0xb6>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001568:	6805      	ldr	r5, [r0, #0]
 800156a:	4a2c      	ldr	r2, [pc, #176]	@ (800161c <HAL_DMA_Init+0xbc>)
 800156c:	4295      	cmp	r5, r2
 800156e:	f04f 0114 	mov.w	r1, #20
 8001572:	d83e      	bhi.n	80015f2 <HAL_DMA_Init+0x92>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001574:	4a2a      	ldr	r2, [pc, #168]	@ (8001620 <HAL_DMA_Init+0xc0>)
 8001576:	482b      	ldr	r0, [pc, #172]	@ (8001624 <HAL_DMA_Init+0xc4>)
 8001578:	442a      	add	r2, r5
 800157a:	fbb2 f2f1 	udiv	r2, r2, r1
 800157e:	0092      	lsls	r2, r2, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001580:	2102      	movs	r1, #2
 8001582:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001586:	e9d3 6102 	ldrd	r6, r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158a:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 800158c:	682c      	ldr	r4, [r5, #0]
  tmp |=  hdma->Init.Direction        |
 800158e:	4331      	orrs	r1, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001590:	4339      	orrs	r1, r7
 8001592:	695f      	ldr	r7, [r3, #20]
 8001594:	4339      	orrs	r1, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001596:	699f      	ldr	r7, [r3, #24]
 8001598:	4339      	orrs	r1, r7
 800159a:	69df      	ldr	r7, [r3, #28]
 800159c:	4339      	orrs	r1, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800159e:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015a0:	f424 44ff 	bic.w	r4, r4, #32640	@ 0x7f80
 80015a4:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a8:	4339      	orrs	r1, r7
  tmp |=  hdma->Init.Direction        |
 80015aa:	4321      	orrs	r1, r4
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015ac:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
    hdma->DmaBaseAddress = DMA1;
 80015b0:	e9c3 0210 	strd	r0, r2, [r3, #64]	@ 0x40
  hdma->Instance->CCR = tmp;
 80015b4:	6029      	str	r1, [r5, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015b6:	d014      	beq.n	80015e2 <HAL_DMA_Init+0x82>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015b8:	685c      	ldr	r4, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015ba:	f002 021c 	and.w	r2, r2, #28
 80015be:	210f      	movs	r1, #15
 80015c0:	4091      	lsls	r1, r2
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015c2:	4094      	lsls	r4, r2
    if (DMA1 == hdma->DmaBaseAddress)
 80015c4:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <HAL_DMA_Init+0xc4>)
 80015c6:	4290      	cmp	r0, r2
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015c8:	ea6f 0101 	mvn.w	r1, r1
    if (DMA1 == hdma->DmaBaseAddress)
 80015cc:	d118      	bne.n	8001600 <HAL_DMA_Init+0xa0>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015ce:	f8d0 20a8 	ldr.w	r2, [r0, #168]	@ 0xa8
 80015d2:	400a      	ands	r2, r1
 80015d4:	f8c0 20a8 	str.w	r2, [r0, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015d8:	f8d0 20a8 	ldr.w	r2, [r0, #168]	@ 0xa8
 80015dc:	4322      	orrs	r2, r4
 80015de:	f8c0 20a8 	str.w	r2, [r0, #168]	@ 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e2:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015e4:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e6:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015e8:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80015ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 80015f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001628 <HAL_DMA_Init+0xc8>)
 80015f4:	480d      	ldr	r0, [pc, #52]	@ (800162c <HAL_DMA_Init+0xcc>)
 80015f6:	442a      	add	r2, r5
 80015f8:	fbb2 f2f1 	udiv	r2, r2, r1
 80015fc:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA2;
 80015fe:	e7bf      	b.n	8001580 <HAL_DMA_Init+0x20>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001600:	f8d2 04a8 	ldr.w	r0, [r2, #1192]	@ 0x4a8
 8001604:	4001      	ands	r1, r0
 8001606:	f8c2 14a8 	str.w	r1, [r2, #1192]	@ 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800160a:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	@ 0x4a8
 800160e:	4321      	orrs	r1, r4
 8001610:	f8c2 14a8 	str.w	r1, [r2, #1192]	@ 0x4a8
 8001614:	e7e5      	b.n	80015e2 <HAL_DMA_Init+0x82>
    return HAL_ERROR;
 8001616:	2001      	movs	r0, #1
 8001618:	e7ea      	b.n	80015f0 <HAL_DMA_Init+0x90>
 800161a:	bf00      	nop
 800161c:	40020407 	.word	0x40020407
 8001620:	bffdfff8 	.word	0xbffdfff8
 8001624:	40020000 	.word	0x40020000
 8001628:	bffdfbf8 	.word	0xbffdfbf8
 800162c:	40020400 	.word	0x40020400

08001630 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001632:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8001636:	2c01      	cmp	r4, #1
 8001638:	d036      	beq.n	80016a8 <HAL_DMA_Start_IT+0x78>
 800163a:	2401      	movs	r4, #1
 800163c:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001640:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8001644:	2c01      	cmp	r4, #1
 8001646:	b2e5      	uxtb	r5, r4
 8001648:	f04f 0400 	mov.w	r4, #0
 800164c:	d12a      	bne.n	80016a4 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800164e:	2602      	movs	r6, #2
 8001650:	f880 6025 	strb.w	r6, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001654:	63c4      	str	r4, [r0, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001656:	6804      	ldr	r4, [r0, #0]
 8001658:	6826      	ldr	r6, [r4, #0]
 800165a:	f026 0601 	bic.w	r6, r6, #1
 800165e:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001660:	e9d0 6710 	ldrd	r6, r7, [r0, #64]	@ 0x40
 8001664:	f007 071c 	and.w	r7, r7, #28
 8001668:	40bd      	lsls	r5, r7
 800166a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800166c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800166e:	6883      	ldr	r3, [r0, #8]
 8001670:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8001672:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001674:	bf0b      	itete	eq
 8001676:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001678:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800167a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800167c:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800167e:	b14b      	cbz	r3, 8001694 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001686:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001690:	2000      	movs	r0, #0
}
 8001692:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	f023 0304 	bic.w	r3, r3, #4
 800169a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	f043 030a 	orr.w	r3, r3, #10
 80016a2:	e7f0      	b.n	8001686 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma);
 80016a4:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 80016a8:	2002      	movs	r0, #2
 80016aa:	e7f2      	b.n	8001692 <HAL_DMA_Start_IT+0x62>

080016ac <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016ac:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016ae:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80016b0:	6803      	ldr	r3, [r0, #0]
{
 80016b2:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016b4:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016b8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80016ba:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016bc:	2404      	movs	r4, #4
 80016be:	4094      	lsls	r4, r2
 80016c0:	4234      	tst	r4, r6
 80016c2:	d00e      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x36>
 80016c4:	f015 0f04 	tst.w	r5, #4
 80016c8:	d00b      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016ce:	bf5e      	ittt	pl
 80016d0:	681a      	ldrpl	r2, [r3, #0]
 80016d2:	f022 0204 	bicpl.w	r2, r2, #4
 80016d6:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80016d8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80016da:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80016dc:	b373      	cbz	r3, 800173c <HAL_DMA_IRQHandler+0x90>
}
 80016de:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80016e0:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80016e2:	2402      	movs	r4, #2
 80016e4:	4094      	lsls	r4, r2
 80016e6:	4234      	tst	r4, r6
 80016e8:	d012      	beq.n	8001710 <HAL_DMA_IRQHandler+0x64>
 80016ea:	f015 0f02 	tst.w	r5, #2
 80016ee:	d00f      	beq.n	8001710 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	0695      	lsls	r5, r2, #26
 80016f4:	d406      	bmi.n	8001704 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	f022 020a 	bic.w	r2, r2, #10
 80016fc:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80016fe:	2301      	movs	r3, #1
 8001700:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8001704:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001706:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001708:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 800170c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800170e:	e7e5      	b.n	80016dc <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001710:	2408      	movs	r4, #8
 8001712:	4094      	lsls	r4, r2
 8001714:	4234      	tst	r4, r6
 8001716:	d011      	beq.n	800173c <HAL_DMA_IRQHandler+0x90>
 8001718:	072c      	lsls	r4, r5, #28
 800171a:	d50f      	bpl.n	800173c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171c:	681c      	ldr	r4, [r3, #0]
 800171e:	f024 040e 	bic.w	r4, r4, #14
 8001722:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001724:	2301      	movs	r3, #1
 8001726:	fa03 f202 	lsl.w	r2, r3, r2
 800172a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800172c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800172e:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8001732:	2300      	movs	r3, #0
 8001734:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8001738:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800173a:	e7cf      	b.n	80016dc <HAL_DMA_IRQHandler+0x30>
}
 800173c:	bc70      	pop	{r4, r5, r6}
 800173e:	4770      	bx	lr

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001744:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 80018f0 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001748:	4c67      	ldr	r4, [pc, #412]	@ (80018e8 <HAL_GPIO_Init+0x1a8>)
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174c:	680a      	ldr	r2, [r1, #0]
 800174e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001752:	d102      	bne.n	800175a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001754:	b003      	add	sp, #12
 8001756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800175a:	2501      	movs	r5, #1
 800175c:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8001760:	ea18 0202 	ands.w	r2, r8, r2
 8001764:	f000 80b1 	beq.w	80018ca <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001768:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800176a:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800176c:	f005 0603 	and.w	r6, r5, #3
 8001770:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001774:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001778:	1e77      	subs	r7, r6, #1
 800177a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800177c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001780:	d834      	bhi.n	80017ec <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001782:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001784:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001788:	68cf      	ldr	r7, [r1, #12]
 800178a:	fa07 f70e 	lsl.w	r7, r7, lr
 800178e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001792:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001794:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800179a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800179e:	409f      	lsls	r7, r3
 80017a0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80017a4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80017a6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017a8:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ac:	688f      	ldr	r7, [r1, #8]
 80017ae:	fa07 f70e 	lsl.w	r7, r7, lr
 80017b2:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b6:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 80017b8:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ba:	d122      	bne.n	8001802 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->AFR[position >> 3u];
 80017bc:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80017c0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c4:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80017c8:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017cc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80017d0:	f04f 0b0f 	mov.w	fp, #15
 80017d4:	fa0b fb0a 	lsl.w	fp, fp, sl
 80017d8:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017dc:	690f      	ldr	r7, [r1, #16]
 80017de:	fa07 f70a 	lsl.w	r7, r7, sl
 80017e2:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 80017e6:	f8c8 7020 	str.w	r7, [r8, #32]
 80017ea:	e00a      	b.n	8001802 <HAL_GPIO_Init+0xc2>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017ec:	2e03      	cmp	r6, #3
 80017ee:	d1da      	bne.n	80017a6 <HAL_GPIO_Init+0x66>
        temp = GPIOx->ASCR;
 80017f0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017f2:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017f6:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 80017fa:	409f      	lsls	r7, r3
 80017fc:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->ASCR = temp;
 8001800:	62c7      	str	r7, [r0, #44]	@ 0x2c
      temp = GPIOx->MODER;
 8001802:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001804:	fa06 f60e 	lsl.w	r6, r6, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001808:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800180c:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800180e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001812:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001814:	d059      	beq.n	80018ca <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	f8d9 6060 	ldr.w	r6, [r9, #96]	@ 0x60
 800181a:	f046 0601 	orr.w	r6, r6, #1
 800181e:	f8c9 6060 	str.w	r6, [r9, #96]	@ 0x60
 8001822:	f8d9 6060 	ldr.w	r6, [r9, #96]	@ 0x60
 8001826:	f023 0703 	bic.w	r7, r3, #3
 800182a:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800182e:	f006 0601 	and.w	r6, r6, #1
 8001832:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8001836:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001838:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800183e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001840:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001844:	f04f 0e0f 	mov.w	lr, #15
 8001848:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800184c:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001850:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001854:	d03b      	beq.n	80018ce <HAL_GPIO_Init+0x18e>
 8001856:	4e25      	ldr	r6, [pc, #148]	@ (80018ec <HAL_GPIO_Init+0x1ac>)
 8001858:	42b0      	cmp	r0, r6
 800185a:	d03a      	beq.n	80018d2 <HAL_GPIO_Init+0x192>
 800185c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001860:	42b0      	cmp	r0, r6
 8001862:	d038      	beq.n	80018d6 <HAL_GPIO_Init+0x196>
 8001864:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001868:	42b0      	cmp	r0, r6
 800186a:	d036      	beq.n	80018da <HAL_GPIO_Init+0x19a>
 800186c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001870:	42b0      	cmp	r0, r6
 8001872:	d034      	beq.n	80018de <HAL_GPIO_Init+0x19e>
 8001874:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001878:	42b0      	cmp	r0, r6
 800187a:	d032      	beq.n	80018e2 <HAL_GPIO_Init+0x1a2>
 800187c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001880:	42b0      	cmp	r0, r6
 8001882:	bf14      	ite	ne
 8001884:	2607      	movne	r6, #7
 8001886:	2606      	moveq	r6, #6
 8001888:	fa06 f60c 	lsl.w	r6, r6, ip
 800188c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001890:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8001892:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001894:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001896:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 800189a:	bf0c      	ite	eq
 800189c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800189e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 80018a0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 80018a2:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018a4:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 80018a8:	bf0c      	ite	eq
 80018aa:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80018ac:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 80018ae:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 80018b0:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018b2:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~(iocurrent);
 80018b6:	bf0c      	ite	eq
 80018b8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80018ba:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 80018bc:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 80018be:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018c0:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 80018c2:	bf54      	ite	pl
 80018c4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80018c6:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 80018c8:	6026      	str	r6, [r4, #0]
    position++;
 80018ca:	3301      	adds	r3, #1
 80018cc:	e73e      	b.n	800174c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ce:	2600      	movs	r6, #0
 80018d0:	e7da      	b.n	8001888 <HAL_GPIO_Init+0x148>
 80018d2:	2601      	movs	r6, #1
 80018d4:	e7d8      	b.n	8001888 <HAL_GPIO_Init+0x148>
 80018d6:	2602      	movs	r6, #2
 80018d8:	e7d6      	b.n	8001888 <HAL_GPIO_Init+0x148>
 80018da:	2603      	movs	r6, #3
 80018dc:	e7d4      	b.n	8001888 <HAL_GPIO_Init+0x148>
 80018de:	2604      	movs	r6, #4
 80018e0:	e7d2      	b.n	8001888 <HAL_GPIO_Init+0x148>
 80018e2:	2605      	movs	r6, #5
 80018e4:	e7d0      	b.n	8001888 <HAL_GPIO_Init+0x148>
 80018e6:	bf00      	nop
 80018e8:	40010400 	.word	0x40010400
 80018ec:	48000400 	.word	0x48000400
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f4:	b10a      	cbz	r2, 80018fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018f6:	6181      	str	r1, [r0, #24]
 80018f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018fa:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001900:	4b02      	ldr	r3, [pc, #8]	@ (800190c <HAL_PWREx_GetVoltageRange+0xc>)
 8001902:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001904:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40007000 	.word	0x40007000

08001910 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001910:	4a17      	ldr	r2, [pc, #92]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001912:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001914:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001918:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800191c:	d11b      	bne.n	8001956 <HAL_PWREx_ControlVoltageScaling+0x46>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800191e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001922:	d01b      	beq.n	800195c <HAL_PWREx_ControlVoltageScaling+0x4c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001924:	6813      	ldr	r3, [r2, #0]
 8001926:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800192a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800192e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001930:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2132      	movs	r1, #50	@ 0x32
 8001936:	434b      	muls	r3, r1
 8001938:	490f      	ldr	r1, [pc, #60]	@ (8001978 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001940:	6951      	ldr	r1, [r2, #20]
 8001942:	0549      	lsls	r1, r1, #21
 8001944:	d500      	bpl.n	8001948 <HAL_PWREx_ControlVoltageScaling+0x38>
 8001946:	b923      	cbnz	r3, 8001952 <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001948:	6953      	ldr	r3, [r2, #20]
 800194a:	055b      	lsls	r3, r3, #21
 800194c:	d506      	bpl.n	800195c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        return HAL_TIMEOUT;
 800194e:	2003      	movs	r0, #3
    }
  }
#endif

  return HAL_OK;
}
 8001950:	4770      	bx	lr
        wait_loop_index--;
 8001952:	3b01      	subs	r3, #1
 8001954:	e7f4      	b.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x30>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800195a:	d101      	bne.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x50>
  return HAL_OK;
 800195c:	2000      	movs	r0, #0
 800195e:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001960:	6813      	ldr	r3, [r2, #0]
 8001962:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001966:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	e7f6      	b.n	800195c <HAL_PWREx_ControlVoltageScaling+0x4c>
 800196e:	bf00      	nop
 8001970:	40007000 	.word	0x40007000
 8001974:	20000000 	.word	0x20000000
 8001978:	000f4240 	.word	0x000f4240

0800197c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800197c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800197e:	4d1e      	ldr	r5, [pc, #120]	@ (80019f8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001980:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001982:	00da      	lsls	r2, r3, #3
{
 8001984:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001986:	d518      	bpl.n	80019ba <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001988:	f7ff ffba 	bl	8001900 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800198c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001990:	d123      	bne.n	80019da <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001992:	2c80      	cmp	r4, #128	@ 0x80
 8001994:	d929      	bls.n	80019ea <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001996:	2ca1      	cmp	r4, #161	@ 0xa1
 8001998:	bf34      	ite	cc
 800199a:	2401      	movcc	r4, #1
 800199c:	2402      	movcs	r4, #2
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800199e:	4917      	ldr	r1, [pc, #92]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80019a0:	680a      	ldr	r2, [r1, #0]
 80019a2:	f022 0207 	bic.w	r2, r2, #7
 80019a6:	4322      	orrs	r2, r4
 80019a8:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019aa:	6808      	ldr	r0, [r1, #0]
 80019ac:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80019b0:	1b00      	subs	r0, r0, r4
 80019b2:	bf18      	it	ne
 80019b4:	2001      	movne	r0, #1
 80019b6:	b003      	add	sp, #12
 80019b8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c0:	65ab      	str	r3, [r5, #88]	@ 0x58
 80019c2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80019cc:	f7ff ff98 	bl	8001900 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80019d0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80019d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	65ab      	str	r3, [r5, #88]	@ 0x58
 80019d8:	e7d8      	b.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80019da:	2c80      	cmp	r4, #128	@ 0x80
 80019dc:	d807      	bhi.n	80019ee <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80019de:	d008      	beq.n	80019f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80019e0:	f1a4 0370 	sub.w	r3, r4, #112	@ 0x70
 80019e4:	425c      	negs	r4, r3
 80019e6:	415c      	adcs	r4, r3
 80019e8:	e7d9      	b.n	800199e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019ea:	2400      	movs	r4, #0
 80019ec:	e7d7      	b.n	800199e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80019ee:	2403      	movs	r4, #3
 80019f0:	e7d5      	b.n	800199e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80019f2:	2402      	movs	r4, #2
 80019f4:	e7d3      	b.n	800199e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40022000 	.word	0x40022000

08001a00 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a00:	4b22      	ldr	r3, [pc, #136]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x8c>)
 8001a02:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a04:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a06:	f012 020c 	ands.w	r2, r2, #12
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x18>
 8001a0c:	2a0c      	cmp	r2, #12
 8001a0e:	d115      	bne.n	8001a3c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a10:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a14:	2901      	cmp	r1, #1
 8001a16:	d118      	bne.n	8001a4a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a18:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001a1a:	481d      	ldr	r0, [pc, #116]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a1c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a1e:	bf55      	itete	pl
 8001a20:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a24:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a26:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a2a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001a2e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a32:	b34a      	cbz	r2, 8001a88 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a34:	2a0c      	cmp	r2, #12
 8001a36:	d009      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x4c>
 8001a38:	2000      	movs	r0, #0
  return sysclockfreq;
 8001a3a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a3c:	2a04      	cmp	r2, #4
 8001a3e:	d022      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a40:	2a08      	cmp	r2, #8
 8001a42:	4814      	ldr	r0, [pc, #80]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a44:	bf18      	it	ne
 8001a46:	2000      	movne	r0, #0
 8001a48:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a4a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001a52:	2a02      	cmp	r2, #2
 8001a54:	d015      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x82>
 8001a56:	490f      	ldr	r1, [pc, #60]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a58:	2a03      	cmp	r2, #3
 8001a5a:	bf08      	it	eq
 8001a5c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a5e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001a66:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a68:	68d8      	ldr	r0, [r3, #12]
 8001a6a:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a6e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a72:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a74:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a76:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a78:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001a7c:	fbb2 f0f0 	udiv	r0, r2, r0
 8001a80:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001a82:	4805      	ldr	r0, [pc, #20]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a84:	e7eb      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001a86:	4804      	ldr	r0, [pc, #16]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	08007378 	.word	0x08007378
 8001a94:	007a1200 	.word	0x007a1200
 8001a98:	00f42400 	.word	0x00f42400

08001a9c <HAL_RCC_OscConfig>:
{
 8001a9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001aa0:	4605      	mov	r5, r0
 8001aa2:	b918      	cbnz	r0, 8001aac <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001aa4:	2001      	movs	r0, #1
}
 8001aa6:	b003      	add	sp, #12
 8001aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aac:	4c92      	ldr	r4, [pc, #584]	@ (8001cf8 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aae:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab0:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab2:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ab4:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab6:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aba:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001abe:	d53d      	bpl.n	8001b3c <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ac0:	b11e      	cbz	r6, 8001aca <HAL_RCC_OscConfig+0x2e>
 8001ac2:	2e0c      	cmp	r6, #12
 8001ac4:	d166      	bne.n	8001b94 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ac6:	2f01      	cmp	r7, #1
 8001ac8:	d164      	bne.n	8001b94 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	0799      	lsls	r1, r3, #30
 8001ace:	d502      	bpl.n	8001ad6 <HAL_RCC_OscConfig+0x3a>
 8001ad0:	69ab      	ldr	r3, [r5, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0e6      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	6a28      	ldr	r0, [r5, #32]
 8001ada:	071a      	lsls	r2, r3, #28
 8001adc:	bf56      	itet	pl
 8001ade:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	@ 0x94
 8001ae2:	6823      	ldrmi	r3, [r4, #0]
 8001ae4:	091b      	lsrpl	r3, r3, #4
 8001ae6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aea:	4298      	cmp	r0, r3
 8001aec:	d93b      	bls.n	8001b66 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aee:	f7ff ff45 	bl	800197c <RCC_SetFlashLatencyFromMSIRange>
 8001af2:	2800      	cmp	r0, #0
 8001af4:	d1d6      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	6023      	str	r3, [r4, #0]
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	6a2a      	ldr	r2, [r5, #32]
 8001b02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b06:	4313      	orrs	r3, r2
 8001b08:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b0a:	6863      	ldr	r3, [r4, #4]
 8001b0c:	69ea      	ldr	r2, [r5, #28]
 8001b0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001b12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b16:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b18:	f7ff ff72 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8001b1c:	68a3      	ldr	r3, [r4, #8]
 8001b1e:	4a77      	ldr	r2, [pc, #476]	@ (8001cfc <HAL_RCC_OscConfig+0x260>)
 8001b20:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b24:	5cd3      	ldrb	r3, [r2, r3]
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	40d8      	lsrs	r0, r3
 8001b2c:	4b74      	ldr	r3, [pc, #464]	@ (8001d00 <HAL_RCC_OscConfig+0x264>)
 8001b2e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001b30:	4b74      	ldr	r3, [pc, #464]	@ (8001d04 <HAL_RCC_OscConfig+0x268>)
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	f7ff fc52 	bl	80013dc <HAL_InitTick>
        if(status != HAL_OK)
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d1b4      	bne.n	8001aa6 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3c:	682b      	ldr	r3, [r5, #0]
 8001b3e:	07d9      	lsls	r1, r3, #31
 8001b40:	d45f      	bmi.n	8001c02 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b42:	682b      	ldr	r3, [r5, #0]
 8001b44:	079a      	lsls	r2, r3, #30
 8001b46:	f100 809e 	bmi.w	8001c86 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4a:	682b      	ldr	r3, [r5, #0]
 8001b4c:	0719      	lsls	r1, r3, #28
 8001b4e:	f100 80db 	bmi.w	8001d08 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b52:	682b      	ldr	r3, [r5, #0]
 8001b54:	075a      	lsls	r2, r3, #29
 8001b56:	f100 8101 	bmi.w	8001d5c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b5a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f040 816a 	bne.w	8001e36 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001b62:	2000      	movs	r0, #0
 8001b64:	e79f      	b.n	8001aa6 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	6023      	str	r3, [r4, #0]
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b74:	4303      	orrs	r3, r0
 8001b76:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b78:	6863      	ldr	r3, [r4, #4]
 8001b7a:	69ea      	ldr	r2, [r5, #28]
 8001b7c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001b80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b84:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b86:	2e00      	cmp	r6, #0
 8001b88:	d1c6      	bne.n	8001b18 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b8a:	f7ff fef7 	bl	800197c <RCC_SetFlashLatencyFromMSIRange>
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d0c2      	beq.n	8001b18 <HAL_RCC_OscConfig+0x7c>
 8001b92:	e787      	b.n	8001aa4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b94:	69ab      	ldr	r3, [r5, #24]
 8001b96:	b31b      	cbz	r3, 8001be0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fc5e 	bl	8001460 <HAL_GetTick>
 8001ba4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	079b      	lsls	r3, r3, #30
 8001baa:	d511      	bpl.n	8001bd0 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	f043 0308 	orr.w	r3, r3, #8
 8001bb2:	6023      	str	r3, [r4, #0]
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	6a2a      	ldr	r2, [r5, #32]
 8001bb8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc0:	6863      	ldr	r3, [r4, #4]
 8001bc2:	69ea      	ldr	r2, [r5, #28]
 8001bc4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001bc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001bcc:	6063      	str	r3, [r4, #4]
 8001bce:	e7b5      	b.n	8001b3c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fc46 	bl	8001460 <HAL_GetTick>
 8001bd4:	eba0 0008 	sub.w	r0, r0, r8
 8001bd8:	2802      	cmp	r0, #2
 8001bda:	d9e4      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001bdc:	2003      	movs	r0, #3
 8001bde:	e762      	b.n	8001aa6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001be8:	f7ff fc3a 	bl	8001460 <HAL_GetTick>
 8001bec:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	0798      	lsls	r0, r3, #30
 8001bf2:	d5a3      	bpl.n	8001b3c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fc34 	bl	8001460 <HAL_GetTick>
 8001bf8:	eba0 0008 	sub.w	r0, r0, r8
 8001bfc:	2802      	cmp	r0, #2
 8001bfe:	d9f6      	bls.n	8001bee <HAL_RCC_OscConfig+0x152>
 8001c00:	e7ec      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c02:	2e08      	cmp	r6, #8
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_OscConfig+0x172>
 8001c06:	2e0c      	cmp	r6, #12
 8001c08:	d108      	bne.n	8001c1c <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c0a:	2f03      	cmp	r7, #3
 8001c0c:	d106      	bne.n	8001c1c <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	039b      	lsls	r3, r3, #14
 8001c12:	d596      	bpl.n	8001b42 <HAL_RCC_OscConfig+0xa6>
 8001c14:	686b      	ldr	r3, [r5, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d193      	bne.n	8001b42 <HAL_RCC_OscConfig+0xa6>
 8001c1a:	e743      	b.n	8001aa4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1c:	686b      	ldr	r3, [r5, #4]
 8001c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c22:	d110      	bne.n	8001c46 <HAL_RCC_OscConfig+0x1aa>
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fc18 	bl	8001460 <HAL_GetTick>
 8001c30:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	0398      	lsls	r0, r3, #14
 8001c36:	d484      	bmi.n	8001b42 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fc12 	bl	8001460 <HAL_GetTick>
 8001c3c:	eba0 0008 	sub.w	r0, r0, r8
 8001c40:	2864      	cmp	r0, #100	@ 0x64
 8001c42:	d9f6      	bls.n	8001c32 <HAL_RCC_OscConfig+0x196>
 8001c44:	e7ca      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c4a:	d104      	bne.n	8001c56 <HAL_RCC_OscConfig+0x1ba>
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c52:	6023      	str	r3, [r4, #0]
 8001c54:	e7e6      	b.n	8001c24 <HAL_RCC_OscConfig+0x188>
 8001c56:	6822      	ldr	r2, [r4, #0]
 8001c58:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c5c:	6022      	str	r2, [r4, #0]
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c64:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1e0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fbf9 	bl	8001460 <HAL_GetTick>
 8001c6e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	0399      	lsls	r1, r3, #14
 8001c74:	f57f af65 	bpl.w	8001b42 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff fbf2 	bl	8001460 <HAL_GetTick>
 8001c7c:	eba0 0008 	sub.w	r0, r0, r8
 8001c80:	2864      	cmp	r0, #100	@ 0x64
 8001c82:	d9f5      	bls.n	8001c70 <HAL_RCC_OscConfig+0x1d4>
 8001c84:	e7aa      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c86:	2e04      	cmp	r6, #4
 8001c88:	d003      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1f6>
 8001c8a:	2e0c      	cmp	r6, #12
 8001c8c:	d110      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c8e:	2f02      	cmp	r7, #2
 8001c90:	d10e      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	055a      	lsls	r2, r3, #21
 8001c96:	d503      	bpl.n	8001ca0 <HAL_RCC_OscConfig+0x204>
 8001c98:	68eb      	ldr	r3, [r5, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f43f af02 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	6863      	ldr	r3, [r4, #4]
 8001ca2:	692a      	ldr	r2, [r5, #16]
 8001ca4:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8001ca8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cac:	6063      	str	r3, [r4, #4]
 8001cae:	e74c      	b.n	8001b4a <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb0:	68eb      	ldr	r3, [r5, #12]
 8001cb2:	b17b      	cbz	r3, 8001cd4 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fbd0 	bl	8001460 <HAL_GetTick>
 8001cc0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	055b      	lsls	r3, r3, #21
 8001cc6:	d4eb      	bmi.n	8001ca0 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fbca 	bl	8001460 <HAL_GetTick>
 8001ccc:	1bc0      	subs	r0, r0, r7
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	d9f7      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x226>
 8001cd2:	e783      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cda:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fbc0 	bl	8001460 <HAL_GetTick>
 8001ce0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	0558      	lsls	r0, r3, #21
 8001ce6:	f57f af30 	bpl.w	8001b4a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cea:	f7ff fbb9 	bl	8001460 <HAL_GetTick>
 8001cee:	1bc0      	subs	r0, r0, r7
 8001cf0:	2802      	cmp	r0, #2
 8001cf2:	d9f6      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x246>
 8001cf4:	e772      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	080073a8 	.word	0x080073a8
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d08:	696b      	ldr	r3, [r5, #20]
 8001d0a:	b19b      	cbz	r3, 8001d34 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8001d0c:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001d18:	f7ff fba2 	bl	8001460 <HAL_GetTick>
 8001d1c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8001d22:	079b      	lsls	r3, r3, #30
 8001d24:	f53f af15 	bmi.w	8001b52 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff fb9a 	bl	8001460 <HAL_GetTick>
 8001d2c:	1bc0      	subs	r0, r0, r7
 8001d2e:	2802      	cmp	r0, #2
 8001d30:	d9f5      	bls.n	8001d1e <HAL_RCC_OscConfig+0x282>
 8001d32:	e753      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001d34:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001d40:	f7ff fb8e 	bl	8001460 <HAL_GetTick>
 8001d44:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d46:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8001d4a:	0798      	lsls	r0, r3, #30
 8001d4c:	f57f af01 	bpl.w	8001b52 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff fb86 	bl	8001460 <HAL_GetTick>
 8001d54:	1bc0      	subs	r0, r0, r7
 8001d56:	2802      	cmp	r0, #2
 8001d58:	d9f5      	bls.n	8001d46 <HAL_RCC_OscConfig+0x2aa>
 8001d5a:	e73f      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d5e:	00d9      	lsls	r1, r3, #3
 8001d60:	d429      	bmi.n	8001db6 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d68:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001d6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d74:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d78:	4f84      	ldr	r7, [pc, #528]	@ (8001f8c <HAL_RCC_OscConfig+0x4f0>)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	05da      	lsls	r2, r3, #23
 8001d7e:	d51d      	bpl.n	8001dbc <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	68ab      	ldr	r3, [r5, #8]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d12b      	bne.n	8001dde <HAL_RCC_OscConfig+0x342>
 8001d86:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8001d92:	f7ff fb65 	bl	8001460 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001d9a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8001da0:	0798      	lsls	r0, r3, #30
 8001da2:	d542      	bpl.n	8001e2a <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001da4:	f1b8 0f00 	cmp.w	r8, #0
 8001da8:	f43f aed7 	beq.w	8001b5a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001db4:	e6d1      	b.n	8001b5a <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8001db6:	f04f 0800 	mov.w	r8, #0
 8001dba:	e7dd      	b.n	8001d78 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fb4c 	bl	8001460 <HAL_GetTick>
 8001dc8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	05db      	lsls	r3, r3, #23
 8001dce:	d4d7      	bmi.n	8001d80 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd0:	f7ff fb46 	bl	8001460 <HAL_GetTick>
 8001dd4:	eba0 0009 	sub.w	r0, r0, r9
 8001dd8:	2802      	cmp	r0, #2
 8001dda:	d9f6      	bls.n	8001dca <HAL_RCC_OscConfig+0x32e>
 8001ddc:	e6fe      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d106      	bne.n	8001df0 <HAL_RCC_OscConfig+0x354>
 8001de2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8001dee:	e7ca      	b.n	8001d86 <HAL_RCC_OscConfig+0x2ea>
 8001df0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8001df4:	f022 0201 	bic.w	r2, r2, #1
 8001df8:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
 8001dfc:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8001e00:	f022 0204 	bic.w	r2, r2, #4
 8001e04:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1c2      	bne.n	8001d92 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001e0c:	f7ff fb28 	bl	8001460 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e10:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001e14:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e16:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8001e1a:	0799      	lsls	r1, r3, #30
 8001e1c:	d5c2      	bpl.n	8001da4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff fb1f 	bl	8001460 <HAL_GetTick>
 8001e22:	1bc0      	subs	r0, r0, r7
 8001e24:	4548      	cmp	r0, r9
 8001e26:	d9f6      	bls.n	8001e16 <HAL_RCC_OscConfig+0x37a>
 8001e28:	e6d8      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7ff fb19 	bl	8001460 <HAL_GetTick>
 8001e2e:	1bc0      	subs	r0, r0, r7
 8001e30:	4548      	cmp	r0, r9
 8001e32:	d9b3      	bls.n	8001d9c <HAL_RCC_OscConfig+0x300>
 8001e34:	e6d2      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	f040 808f 	bne.w	8001f5a <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8001e3c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001e40:	f003 0103 	and.w	r1, r3, #3
 8001e44:	4291      	cmp	r1, r2
 8001e46:	d124      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e48:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8001e4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e4e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e50:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001e54:	d11d      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e56:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8001e58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e5c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001e60:	d117      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e62:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8001e64:	3a07      	subs	r2, #7
 8001e66:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 8001e6a:	bf18      	it	ne
 8001e6c:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e6e:	4291      	cmp	r1, r2
 8001e70:	d10f      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e72:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8001e74:	0852      	lsrs	r2, r2, #1
 8001e76:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8001e7a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e7c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e82:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001e84:	0852      	lsrs	r2, r2, #1
 8001e86:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8001e8a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e8c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001e90:	d04a      	beq.n	8001f28 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e92:	2e0c      	cmp	r6, #12
 8001e94:	f43f ae06 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	f53f ae02 	bmi.w	8001aa4 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	f53f adfe 	bmi.w	8001aa4 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eae:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8001eb0:	f7ff fad6 	bl	8001460 <HAL_GetTick>
 8001eb4:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	019f      	lsls	r7, r3, #6
 8001eba:	d42f      	bmi.n	8001f1c <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebc:	68e2      	ldr	r2, [r4, #12]
 8001ebe:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001ec8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ecc:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8001ece:	3a01      	subs	r2, #1
 8001ed0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001ed4:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8001ed6:	0912      	lsrs	r2, r2, #4
 8001ed8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001edc:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8001ede:	0852      	lsrs	r2, r2, #1
 8001ee0:	3a01      	subs	r2, #1
 8001ee2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001ee6:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001ee8:	0852      	lsrs	r2, r2, #1
 8001eea:	3a01      	subs	r2, #1
 8001eec:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001ef0:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ef8:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001efa:	68e3      	ldr	r3, [r4, #12]
 8001efc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f00:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8001f02:	f7ff faad 	bl	8001460 <HAL_GetTick>
 8001f06:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	0198      	lsls	r0, r3, #6
 8001f0c:	f53f ae29 	bmi.w	8001b62 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff faa6 	bl	8001460 <HAL_GetTick>
 8001f14:	1b40      	subs	r0, r0, r5
 8001f16:	2802      	cmp	r0, #2
 8001f18:	d9f6      	bls.n	8001f08 <HAL_RCC_OscConfig+0x46c>
 8001f1a:	e65f      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff faa0 	bl	8001460 <HAL_GetTick>
 8001f20:	1b80      	subs	r0, r0, r6
 8001f22:	2802      	cmp	r0, #2
 8001f24:	d9c7      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x41a>
 8001f26:	e659      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	0199      	lsls	r1, r3, #6
 8001f2c:	f53f ae19 	bmi.w	8001b62 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f36:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f38:	68e3      	ldr	r3, [r4, #12]
 8001f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f3e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001f40:	f7ff fa8e 	bl	8001460 <HAL_GetTick>
 8001f44:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	019a      	lsls	r2, r3, #6
 8001f4a:	f53f ae0a 	bmi.w	8001b62 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7ff fa87 	bl	8001460 <HAL_GetTick>
 8001f52:	1b40      	subs	r0, r0, r5
 8001f54:	2802      	cmp	r0, #2
 8001f56:	d9f6      	bls.n	8001f46 <HAL_RCC_OscConfig+0x4aa>
 8001f58:	e640      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f5a:	2e0c      	cmp	r6, #12
 8001f5c:	f43f ada2 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f66:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f68:	f7ff fa7a 	bl	8001460 <HAL_GetTick>
 8001f6c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	019b      	lsls	r3, r3, #6
 8001f72:	d404      	bmi.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f74:	68e2      	ldr	r2, [r4, #12]
 8001f76:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <HAL_RCC_OscConfig+0x4f8>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60e3      	str	r3, [r4, #12]
 8001f7c:	e5f1      	b.n	8001b62 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff fa6f 	bl	8001460 <HAL_GetTick>
 8001f82:	1b40      	subs	r0, r0, r5
 8001f84:	2802      	cmp	r0, #2
 8001f86:	d9f2      	bls.n	8001f6e <HAL_RCC_OscConfig+0x4d2>
 8001f88:	e628      	b.n	8001bdc <HAL_RCC_OscConfig+0x140>
 8001f8a:	bf00      	nop
 8001f8c:	40007000 	.word	0x40007000
 8001f90:	f99d808c 	.word	0xf99d808c
 8001f94:	feeefffc 	.word	0xfeeefffc

08001f98 <HAL_RCC_ClockConfig>:
{
 8001f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f9c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	b910      	cbnz	r0, 8001fa8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001fa2:	2001      	movs	r0, #1
}
 8001fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80020d8 <HAL_RCC_ClockConfig+0x140>)
 8001faa:	6813      	ldr	r3, [r2, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	428b      	cmp	r3, r1
 8001fb2:	d32c      	bcc.n	800200e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	6821      	ldr	r1, [r4, #0]
 8001fb6:	0788      	lsls	r0, r1, #30
 8001fb8:	d434      	bmi.n	8002024 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	07c9      	lsls	r1, r1, #31
 8001fbc:	d43f      	bmi.n	800203e <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbe:	6821      	ldr	r1, [r4, #0]
 8001fc0:	078a      	lsls	r2, r1, #30
 8001fc2:	d468      	bmi.n	8002096 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4a44      	ldr	r2, [pc, #272]	@ (80020d8 <HAL_RCC_ClockConfig+0x140>)
 8001fc6:	6813      	ldr	r3, [r2, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	42ab      	cmp	r3, r5
 8001fce:	d86f      	bhi.n	80020b0 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	f011 0f04 	tst.w	r1, #4
 8001fd4:	4d41      	ldr	r5, [pc, #260]	@ (80020dc <HAL_RCC_ClockConfig+0x144>)
 8001fd6:	d177      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd8:	070b      	lsls	r3, r1, #28
 8001fda:	d506      	bpl.n	8001fea <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fdc:	68ab      	ldr	r3, [r5, #8]
 8001fde:	6922      	ldr	r2, [r4, #16]
 8001fe0:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001fe4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fe8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fea:	f7ff fd09 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8001fee:	68ab      	ldr	r3, [r5, #8]
 8001ff0:	4a3b      	ldr	r2, [pc, #236]	@ (80020e0 <HAL_RCC_ClockConfig+0x148>)
 8001ff2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ffa:	5cd3      	ldrb	r3, [r2, r3]
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	40d8      	lsrs	r0, r3
 8002002:	4b38      	ldr	r3, [pc, #224]	@ (80020e4 <HAL_RCC_ClockConfig+0x14c>)
 8002004:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002006:	4b38      	ldr	r3, [pc, #224]	@ (80020e8 <HAL_RCC_ClockConfig+0x150>)
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	f7ff b9e7 	b.w	80013dc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	6813      	ldr	r3, [r2, #0]
 8002010:	f023 0307 	bic.w	r3, r3, #7
 8002014:	430b      	orrs	r3, r1
 8002016:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002018:	6813      	ldr	r3, [r2, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	428b      	cmp	r3, r1
 8002020:	d1bf      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xa>
 8002022:	e7c7      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002024:	4a2d      	ldr	r2, [pc, #180]	@ (80020dc <HAL_RCC_ClockConfig+0x144>)
 8002026:	68a0      	ldr	r0, [r4, #8]
 8002028:	6893      	ldr	r3, [r2, #8]
 800202a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800202e:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	bf81      	itttt	hi
 8002032:	6893      	ldrhi	r3, [r2, #8]
 8002034:	f023 03f0 	bichi.w	r3, r3, #240	@ 0xf0
 8002038:	4303      	orrhi	r3, r0
 800203a:	6093      	strhi	r3, [r2, #8]
 800203c:	e7bd      	b.n	8001fba <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203e:	6862      	ldr	r2, [r4, #4]
 8002040:	4e26      	ldr	r6, [pc, #152]	@ (80020dc <HAL_RCC_ClockConfig+0x144>)
 8002042:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002044:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002046:	d11a      	bne.n	800207e <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002048:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800204c:	d0a9      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800204e:	68b3      	ldr	r3, [r6, #8]
 8002050:	f023 0303 	bic.w	r3, r3, #3
 8002054:	4313      	orrs	r3, r2
 8002056:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002058:	f7ff fa02 	bl	8001460 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002060:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	68b3      	ldr	r3, [r6, #8]
 8002064:	6862      	ldr	r2, [r4, #4]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800206e:	d0a6      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002070:	f7ff f9f6 	bl	8001460 <HAL_GetTick>
 8002074:	1bc0      	subs	r0, r0, r7
 8002076:	4540      	cmp	r0, r8
 8002078:	d9f3      	bls.n	8002062 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 800207a:	2003      	movs	r0, #3
 800207c:	e792      	b.n	8001fa4 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207e:	2a02      	cmp	r2, #2
 8002080:	d102      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002082:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002086:	e7e1      	b.n	800204c <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002088:	b912      	cbnz	r2, 8002090 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800208a:	f013 0f02 	tst.w	r3, #2
 800208e:	e7dd      	b.n	800204c <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002090:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002094:	e7da      	b.n	800204c <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002096:	4a11      	ldr	r2, [pc, #68]	@ (80020dc <HAL_RCC_ClockConfig+0x144>)
 8002098:	68a0      	ldr	r0, [r4, #8]
 800209a:	6893      	ldr	r3, [r2, #8]
 800209c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020a0:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a2:	bf3f      	itttt	cc
 80020a4:	6893      	ldrcc	r3, [r2, #8]
 80020a6:	f023 03f0 	biccc.w	r3, r3, #240	@ 0xf0
 80020aa:	4303      	orrcc	r3, r0
 80020ac:	6093      	strcc	r3, [r2, #8]
 80020ae:	e789      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b0:	6813      	ldr	r3, [r2, #0]
 80020b2:	f023 0307 	bic.w	r3, r3, #7
 80020b6:	432b      	orrs	r3, r5
 80020b8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	42ab      	cmp	r3, r5
 80020c2:	f47f af6e 	bne.w	8001fa2 <HAL_RCC_ClockConfig+0xa>
 80020c6:	e783      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c8:	68ab      	ldr	r3, [r5, #8]
 80020ca:	68e2      	ldr	r2, [r4, #12]
 80020cc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60ab      	str	r3, [r5, #8]
 80020d4:	e780      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x40>
 80020d6:	bf00      	nop
 80020d8:	40022000 	.word	0x40022000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	080073a8 	.word	0x080073a8
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000008 	.word	0x20000008

080020ec <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80020ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020ee:	460e      	mov	r6, r1
 80020f0:	4614      	mov	r4, r2
 80020f2:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020f4:	f7ff f9b4 	bl	8001460 <HAL_GetTick>
 80020f8:	4434      	add	r4, r6
 80020fa:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80020fc:	f7ff f9b0 	bl	8001460 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002100:	4b22      	ldr	r3, [pc, #136]	@ (800218c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002108:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 800210a:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800210c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800210e:	682a      	ldr	r2, [r5, #0]
 8002110:	6890      	ldr	r0, [r2, #8]
 8002112:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8002116:	d02d      	beq.n	8002174 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002118:	1c73      	adds	r3, r6, #1
 800211a:	d0f9      	beq.n	8002110 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800211c:	f7ff f9a0 	bl	8001460 <HAL_GetTick>
 8002120:	1bc0      	subs	r0, r0, r7
 8002122:	42a0      	cmp	r0, r4
 8002124:	d328      	bcc.n	8002178 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002126:	682b      	ldr	r3, [r5, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800212e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002130:	686a      	ldr	r2, [r5, #4]
 8002132:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8002136:	d10a      	bne.n	800214e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8002138:	68aa      	ldr	r2, [r5, #8]
 800213a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800213e:	d002      	beq.n	8002146 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002140:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002144:	d103      	bne.n	800214e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800214c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800214e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002150:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002154:	d107      	bne.n	8002166 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002164:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002166:	2301      	movs	r3, #1
 8002168:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800216c:	2300      	movs	r3, #0
 800216e:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002172:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8002174:	b003      	add	sp, #12
 8002176:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8002178:	9a01      	ldr	r2, [sp, #4]
      count--;
 800217a:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 800217c:	2a00      	cmp	r2, #0
      count--;
 800217e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	bf08      	it	eq
 8002186:	4614      	moveq	r4, r2
 8002188:	e7c1      	b.n	800210e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000

08002190 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002194:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002196:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002198:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800219a:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800219e:	4605      	mov	r5, r0
 80021a0:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80021a2:	f7ff f95d 	bl	8001460 <HAL_GetTick>
 80021a6:	443c      	add	r4, r7
 80021a8:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80021aa:	f7ff f959 	bl	8001460 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80021ae:	4b29      	ldr	r3, [pc, #164]	@ (8002254 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80021b0:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2223      	movs	r2, #35	@ 0x23
 80021b8:	4353      	muls	r3, r2
 80021ba:	0d1b      	lsrs	r3, r3, #20
 80021bc:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 80021be:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80021c0:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80021c2:	682a      	ldr	r2, [r5, #0]
 80021c4:	6890      	ldr	r0, [r2, #8]
 80021c6:	4030      	ands	r0, r6
 80021c8:	d038      	beq.n	800223c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80021ca:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80021ce:	bf01      	itttt	eq
 80021d0:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 80021d4:	b2db      	uxtbeq	r3, r3
 80021d6:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80021da:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 80021de:	1c7b      	adds	r3, r7, #1
 80021e0:	d0f0      	beq.n	80021c4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021e2:	f7ff f93d 	bl	8001460 <HAL_GetTick>
 80021e6:	eba0 0008 	sub.w	r0, r0, r8
 80021ea:	42a0      	cmp	r0, r4
 80021ec:	d329      	bcc.n	8002242 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021ee:	682b      	ldr	r3, [r5, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80021f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f8:	686a      	ldr	r2, [r5, #4]
 80021fa:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80021fe:	d10a      	bne.n	8002216 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 8002200:	68aa      	ldr	r2, [r5, #8]
 8002202:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8002206:	d002      	beq.n	800220e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002208:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800220c:	d103      	bne.n	8002216 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002214:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002216:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002218:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800221c:	d107      	bne.n	800222e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800222c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800222e:	2301      	movs	r3, #1
 8002230:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002234:	2300      	movs	r3, #0
 8002236:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800223a:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 800223c:	b003      	add	sp, #12
 800223e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8002242:	9a01      	ldr	r2, [sp, #4]
      count--;
 8002244:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8002246:	2a00      	cmp	r2, #0
      count--;
 8002248:	f103 33ff 	add.w	r3, r3, #4294967295
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	bf08      	it	eq
 8002250:	4614      	moveq	r4, r2
 8002252:	e7b6      	b.n	80021c2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8002254:	20000000 	.word	0x20000000

08002258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800225a:	4613      	mov	r3, r2
{
 800225c:	460d      	mov	r5, r1
 800225e:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002260:	460a      	mov	r2, r1
 8002262:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8002266:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002268:	f7ff ff92 	bl	8002190 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800226c:	b128      	cbz	r0, 800227a <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800226e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002270:	f043 0320 	orr.w	r3, r3, #32
 8002274:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002276:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002278:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800227a:	4632      	mov	r2, r6
 800227c:	4629      	mov	r1, r5
 800227e:	4620      	mov	r0, r4
 8002280:	f7ff ff34 	bl	80020ec <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002284:	2800      	cmp	r0, #0
 8002286:	d1f2      	bne.n	800226e <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002288:	4633      	mov	r3, r6
 800228a:	462a      	mov	r2, r5
 800228c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff7d 	bl	8002190 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002296:	2800      	cmp	r0, #0
 8002298:	d0ee      	beq.n	8002278 <SPI_EndRxTxTransaction+0x20>
 800229a:	e7e8      	b.n	800226e <SPI_EndRxTxTransaction+0x16>

0800229c <HAL_SPI_Init>:
{
 800229c:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800229e:	4604      	mov	r4, r0
 80022a0:	2800      	cmp	r0, #0
 80022a2:	d063      	beq.n	800236c <HAL_SPI_Init+0xd0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022a4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d159      	bne.n	800235e <HAL_SPI_Init+0xc2>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022aa:	6842      	ldr	r2, [r0, #4]
 80022ac:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80022b0:	d000      	beq.n	80022b4 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022b2:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80022b8:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80022bc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80022c0:	b923      	cbnz	r3, 80022cc <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80022c2:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80022c6:	4620      	mov	r0, r4
 80022c8:	f7fe ffa8 	bl	800121c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80022cc:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022ce:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80022d0:	2302      	movs	r3, #2
 80022d2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80022d6:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80022dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022e0:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	d93e      	bls.n	8002366 <HAL_SPI_Init+0xca>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022e8:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022ea:	f5b1 6f70 	cmp.w	r1, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ee:	bf18      	it	ne
 80022f0:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022f2:	68a6      	ldr	r6, [r4, #8]
 80022f4:	6863      	ldr	r3, [r4, #4]
 80022f6:	69a2      	ldr	r2, [r4, #24]
 80022f8:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 80022fc:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002300:	4333      	orrs	r3, r6
 8002302:	6926      	ldr	r6, [r4, #16]
 8002304:	f006 0602 	and.w	r6, r6, #2
 8002308:	4333      	orrs	r3, r6
 800230a:	6966      	ldr	r6, [r4, #20]
 800230c:	f006 0601 	and.w	r6, r6, #1
 8002310:	4333      	orrs	r3, r6
 8002312:	f402 7600 	and.w	r6, r2, #512	@ 0x200
 8002316:	4333      	orrs	r3, r6
 8002318:	69e6      	ldr	r6, [r4, #28]
 800231a:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 800231e:	4333      	orrs	r3, r6
 8002320:	6a26      	ldr	r6, [r4, #32]
 8002322:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8002326:	4333      	orrs	r3, r6
 8002328:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800232a:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 800232e:	4333      	orrs	r3, r6
 8002330:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002332:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8002334:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002336:	f006 0608 	and.w	r6, r6, #8
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	4333      	orrs	r3, r6
 8002340:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8002344:	0c12      	lsrs	r2, r2, #16
 8002346:	430b      	orrs	r3, r1
 8002348:	f002 0204 	and.w	r2, r2, #4
 800234c:	4313      	orrs	r3, r2
 800234e:	432b      	orrs	r3, r5
 8002350:	6043      	str	r3, [r0, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002352:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002354:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002356:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002358:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 800235c:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800235e:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002360:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002364:	e7a6      	b.n	80022b4 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002366:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800236a:	e7c0      	b.n	80022ee <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 800236c:	2001      	movs	r0, #1
 800236e:	e7f5      	b.n	800235c <HAL_SPI_Init+0xc0>

08002370 <HAL_SPI_Transmit>:
{
 8002370:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002374:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002376:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800237a:	2b01      	cmp	r3, #1
{
 800237c:	4604      	mov	r4, r0
 800237e:	460d      	mov	r5, r1
 8002380:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002382:	f000 80bc 	beq.w	80024fe <HAL_SPI_Transmit+0x18e>
 8002386:	2301      	movs	r3, #1
 8002388:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800238c:	f7ff f868 	bl	8001460 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002390:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8002394:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002396:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002398:	fa5f f983 	uxtb.w	r9, r3
 800239c:	f040 80ac 	bne.w	80024f8 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 80023a0:	2d00      	cmp	r5, #0
 80023a2:	d069      	beq.n	8002478 <HAL_SPI_Transmit+0x108>
 80023a4:	f1b8 0f00 	cmp.w	r8, #0
 80023a8:	d066      	beq.n	8002478 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023aa:	2303      	movs	r3, #3
 80023ac:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80023b4:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 80023b8:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023bc:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80023be:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80023c2:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c6:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80023c8:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023ca:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 80023d0:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d4:	d107      	bne.n	80023e6 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 80023d6:	6833      	ldr	r3, [r6, #0]
 80023d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023dc:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80023de:	6833      	ldr	r3, [r6, #0]
 80023e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023e4:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023e6:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023e8:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ea:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80023ec:	bf5e      	ittt	pl
 80023ee:	6833      	ldrpl	r3, [r6, #0]
 80023f0:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80023f4:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023f6:	68e3      	ldr	r3, [r4, #12]
 80023f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023fc:	d943      	bls.n	8002486 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023fe:	b112      	cbz	r2, 8002406 <HAL_SPI_Transmit+0x96>
 8002400:	f1b8 0f01 	cmp.w	r8, #1
 8002404:	d107      	bne.n	8002416 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002406:	f835 3b02 	ldrh.w	r3, [r5], #2
 800240a:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800240c:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800240e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002410:	3b01      	subs	r3, #1
 8002412:	b29b      	uxth	r3, r3
 8002414:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8002416:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002418:	b29b      	uxth	r3, r3
 800241a:	b9b3      	cbnz	r3, 800244a <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800241c:	4652      	mov	r2, sl
 800241e:	4639      	mov	r1, r7
 8002420:	4620      	mov	r0, r4
 8002422:	f7ff ff19 	bl	8002258 <SPI_EndRxTxTransaction>
 8002426:	2800      	cmp	r0, #0
 8002428:	d163      	bne.n	80024f2 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800242a:	68a3      	ldr	r3, [r4, #8]
 800242c:	b933      	cbnz	r3, 800243c <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	9201      	str	r2, [sp, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800243c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800243e:	b9db      	cbnz	r3, 8002478 <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 8002440:	2201      	movs	r2, #1
 8002442:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002446:	4699      	mov	r9, r3
 8002448:	e016      	b.n	8002478 <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	6893      	ldr	r3, [r2, #8]
 800244e:	079d      	lsls	r5, r3, #30
 8002450:	d505      	bpl.n	800245e <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002452:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002454:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002458:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800245a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800245c:	e7d7      	b.n	800240e <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800245e:	f7fe ffff 	bl	8001460 <HAL_GetTick>
 8002462:	eba0 000a 	sub.w	r0, r0, sl
 8002466:	42b8      	cmp	r0, r7
 8002468:	d3d5      	bcc.n	8002416 <HAL_SPI_Transmit+0xa6>
 800246a:	1c78      	adds	r0, r7, #1
 800246c:	d0d3      	beq.n	8002416 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 800246e:	2301      	movs	r3, #1
 8002470:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8002474:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8002478:	2300      	movs	r3, #0
 800247a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800247e:	4648      	mov	r0, r9
 8002480:	b002      	add	sp, #8
 8002482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002486:	b112      	cbz	r2, 800248e <HAL_SPI_Transmit+0x11e>
 8002488:	f1b8 0f01 	cmp.w	r8, #1
 800248c:	d113      	bne.n	80024b6 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 800248e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d906      	bls.n	80024a4 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002496:	f835 3b02 	ldrh.w	r3, [r5], #2
 800249a:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800249c:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800249e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80024a0:	3b02      	subs	r3, #2
 80024a2:	e006      	b.n	80024b2 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024a4:	782b      	ldrb	r3, [r5, #0]
 80024a6:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 80024a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80024aa:	3301      	adds	r3, #1
 80024ac:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80024ae:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80024b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0ae      	beq.n	800241c <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024be:	6822      	ldr	r2, [r4, #0]
 80024c0:	6893      	ldr	r3, [r2, #8]
 80024c2:	0799      	lsls	r1, r3, #30
 80024c4:	d50c      	bpl.n	80024e0 <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 80024c6:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80024ca:	b289      	uxth	r1, r1
 80024cc:	2901      	cmp	r1, #1
 80024ce:	d904      	bls.n	80024da <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024d0:	f833 1b02 	ldrh.w	r1, [r3], #2
 80024d4:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80024d8:	e7e1      	b.n	800249e <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80024de:	e7e3      	b.n	80024a8 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024e0:	f7fe ffbe 	bl	8001460 <HAL_GetTick>
 80024e4:	eba0 000a 	sub.w	r0, r0, sl
 80024e8:	42b8      	cmp	r0, r7
 80024ea:	d3e4      	bcc.n	80024b6 <HAL_SPI_Transmit+0x146>
 80024ec:	1c7b      	adds	r3, r7, #1
 80024ee:	d0e2      	beq.n	80024b6 <HAL_SPI_Transmit+0x146>
 80024f0:	e7bd      	b.n	800246e <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024f2:	2320      	movs	r3, #32
 80024f4:	6623      	str	r3, [r4, #96]	@ 0x60
 80024f6:	e798      	b.n	800242a <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 80024f8:	f04f 0902 	mov.w	r9, #2
 80024fc:	e7bc      	b.n	8002478 <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 80024fe:	f04f 0902 	mov.w	r9, #2
 8002502:	e7bc      	b.n	800247e <HAL_SPI_Transmit+0x10e>

08002504 <HAL_SPI_Transmit_DMA>:
{
 8002504:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8002506:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800250a:	2b01      	cmp	r3, #1
{
 800250c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800250e:	d073      	beq.n	80025f8 <HAL_SPI_Transmit_DMA+0xf4>
 8002510:	2301      	movs	r3, #1
 8002512:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8002516:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 800251a:	2b01      	cmp	r3, #1
 800251c:	b2dd      	uxtb	r5, r3
 800251e:	d169      	bne.n	80025f4 <HAL_SPI_Transmit_DMA+0xf0>
  if ((pData == NULL) || (Size == 0U))
 8002520:	2900      	cmp	r1, #0
 8002522:	d048      	beq.n	80025b6 <HAL_SPI_Transmit_DMA+0xb2>
 8002524:	2a00      	cmp	r2, #0
 8002526:	d046      	beq.n	80025b6 <HAL_SPI_Transmit_DMA+0xb2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002528:	2303      	movs	r3, #3
 800252a:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800252e:	2300      	movs	r3, #0
 8002530:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8002532:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 8002536:	87c2      	strh	r2, [r0, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002538:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800253a:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800253e:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002542:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 8002544:	8782      	strh	r2, [r0, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
    __HAL_SPI_DISABLE(hspi);
 800254a:	6802      	ldr	r2, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800254c:	6381      	str	r1, [r0, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800254e:	d107      	bne.n	8002560 <HAL_SPI_Transmit_DMA+0x5c>
    __HAL_SPI_DISABLE(hspi);
 8002550:	6813      	ldr	r3, [r2, #0]
 8002552:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002556:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8002558:	6813      	ldr	r3, [r2, #0]
 800255a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800255e:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002560:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002562:	4b26      	ldr	r3, [pc, #152]	@ (80025fc <HAL_SPI_Transmit_DMA+0xf8>)
 8002564:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002566:	4b26      	ldr	r3, [pc, #152]	@ (8002600 <HAL_SPI_Transmit_DMA+0xfc>)
 8002568:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800256a:	4b26      	ldr	r3, [pc, #152]	@ (8002604 <HAL_SPI_Transmit_DMA+0x100>)
 800256c:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	6383      	str	r3, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002572:	6853      	ldr	r3, [r2, #4]
 8002574:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002578:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800257a:	68e3      	ldr	r3, [r4, #12]
 800257c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002580:	d80f      	bhi.n	80025a2 <HAL_SPI_Transmit_DMA+0x9e>
 8002582:	6983      	ldr	r3, [r0, #24]
 8002584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002588:	d10b      	bne.n	80025a2 <HAL_SPI_Transmit_DMA+0x9e>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800258a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800258c:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002590:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002592:	d115      	bne.n	80025c0 <HAL_SPI_Transmit_DMA+0xbc>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002594:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002598:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800259a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800259c:	f3c3 034e 	ubfx	r3, r3, #1, #15
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80025a0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
                                 hspi->TxXferCount))
 80025a2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80025a4:	320c      	adds	r2, #12
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f7ff f842 	bl	8001630 <HAL_DMA_Start_IT>
 80025ac:	b180      	cbz	r0, 80025d0 <HAL_SPI_Transmit_DMA+0xcc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80025ae:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80025b0:	f043 0310 	orr.w	r3, r3, #16
 80025b4:	6623      	str	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 80025b6:	2300      	movs	r3, #0
 80025b8:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80025bc:	4628      	mov	r0, r5
 80025be:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c4:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80025c6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80025c8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80025cc:	3301      	adds	r3, #1
 80025ce:	e7e7      	b.n	80025a0 <HAL_SPI_Transmit_DMA+0x9c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80025d6:	bf5e      	ittt	pl
 80025d8:	681a      	ldrpl	r2, [r3, #0]
 80025da:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80025de:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	f042 0220 	orr.w	r2, r2, #32
 80025e6:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	f042 0202 	orr.w	r2, r2, #2
 80025ee:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025f0:	2500      	movs	r5, #0
 80025f2:	e7e0      	b.n	80025b6 <HAL_SPI_Transmit_DMA+0xb2>
    errorcode = HAL_BUSY;
 80025f4:	2502      	movs	r5, #2
 80025f6:	e7de      	b.n	80025b6 <HAL_SPI_Transmit_DMA+0xb2>
  __HAL_LOCK(hspi);
 80025f8:	2502      	movs	r5, #2
 80025fa:	e7df      	b.n	80025bc <HAL_SPI_Transmit_DMA+0xb8>
 80025fc:	0800260b 	.word	0x0800260b
 8002600:	08002639 	.word	0x08002639
 8002604:	08002617 	.word	0x08002617

08002608 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 8002608:	4770      	bx	lr

0800260a <SPI_DMAHalfTransmitCplt>:
{
 800260a:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800260c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800260e:	f7ff fffb 	bl	8002608 <HAL_SPI_TxHalfCpltCallback>
}
 8002612:	bd08      	pop	{r3, pc}

08002614 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 8002614:	4770      	bx	lr

08002616 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002616:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002618:	6802      	ldr	r2, [r0, #0]
{
 800261a:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800261c:	6853      	ldr	r3, [r2, #4]
 800261e:	f023 0303 	bic.w	r3, r3, #3
 8002622:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002624:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002626:	f043 0310 	orr.w	r3, r3, #16
 800262a:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800262c:	2301      	movs	r3, #1
 800262e:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8002632:	f7ff ffef 	bl	8002614 <HAL_SPI_ErrorCallback>
}
 8002636:	bd08      	pop	{r3, pc}

08002638 <SPI_DMATransmitCplt>:
{
 8002638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800263a:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800263c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 800263e:	f7fe ff0f 	bl	8001460 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002642:	682b      	ldr	r3, [r5, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	069b      	lsls	r3, r3, #26
  tickstart = HAL_GetTick();
 8002648:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800264a:	d426      	bmi.n	800269a <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	f021 0120 	bic.w	r1, r1, #32
 8002654:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	f021 0102 	bic.w	r1, r1, #2
 800265c:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800265e:	4620      	mov	r0, r4
 8002660:	2164      	movs	r1, #100	@ 0x64
 8002662:	f7ff fdf9 	bl	8002258 <SPI_EndRxTxTransaction>
 8002666:	b118      	cbz	r0, 8002670 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002668:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800266a:	f043 0320 	orr.w	r3, r3, #32
 800266e:	6623      	str	r3, [r4, #96]	@ 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002670:	68a3      	ldr	r3, [r4, #8]
 8002672:	b933      	cbnz	r3, 8002682 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	9201      	str	r2, [sp, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002686:	2301      	movs	r3, #1
 8002688:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800268c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800268e:	b123      	cbz	r3, 800269a <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 8002690:	4620      	mov	r0, r4
 8002692:	f7ff ffbf 	bl	8002614 <HAL_SPI_ErrorCallback>
}
 8002696:	b003      	add	sp, #12
 8002698:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 800269a:	4620      	mov	r0, r4
 800269c:	f7fe fbc4 	bl	8000e28 <HAL_SPI_TxCpltCallback>
 80026a0:	e7f9      	b.n	8002696 <SPI_DMATransmitCplt+0x5e>

080026a2 <HAL_SPI_GetState>:
  return hspi->State;
 80026a2:	f890 005d 	ldrb.w	r0, [r0, #93]	@ 0x5d
}
 80026a6:	4770      	bx	lr

080026a8 <bitmap_init>:
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 80026a8:	7983      	ldrb	r3, [r0, #6]
 80026aa:	8802      	ldrh	r2, [r0, #0]
 80026ac:	08db      	lsrs	r3, r3, #3
 80026ae:	fb13 f302 	smulbb	r3, r3, r2
    bitmap->size = bitmap->pitch * bitmap->height;
 80026b2:	8842      	ldrh	r2, [r0, #2]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	8083      	strh	r3, [r0, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 80026b8:	4353      	muls	r3, r2
    bitmap->buffer = buffer;
 80026ba:	e9c0 3102 	strd	r3, r1, [r0, #8]
}
 80026be:	4770      	bx	lr

080026c0 <clip_line>:

    return code;
}

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80026c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c4:	b087      	sub	sp, #28
    if (x0 < window.x0) {
 80026c6:	f9b0 5000 	ldrsh.w	r5, [r0]
 80026ca:	f8bd e040 	ldrh.w	lr, [sp, #64]	@ 0x40
 80026ce:	f8bd 8042 	ldrh.w	r8, [sp, #66]	@ 0x42
 80026d2:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
 80026d6:	f8bd c046 	ldrh.w	ip, [sp, #70]	@ 0x46
    uint8_t code0 = code(*x0, *y0, window);
 80026da:	f9b1 4000 	ldrsh.w	r4, [r1]
{
 80026de:	9301      	str	r3, [sp, #4]
    if (x0 < window.x0) {
 80026e0:	4575      	cmp	r5, lr
 80026e2:	db5a      	blt.n	800279a <clip_line+0xda>
    } else if (x0 > window.x1) {
 80026e4:	42bd      	cmp	r5, r7
 80026e6:	bfd4      	ite	le
 80026e8:	2500      	movle	r5, #0
 80026ea:	2501      	movgt	r5, #1
 80026ec:	006d      	lsls	r5, r5, #1
    } if (y0 < window.y0) {
 80026ee:	4544      	cmp	r4, r8
 80026f0:	da55      	bge.n	800279e <clip_line+0xde>
        code |= BOTTOM;
 80026f2:	f045 0504 	orr.w	r5, r5, #4
    if (x0 < window.x0) {
 80026f6:	f9b2 6000 	ldrsh.w	r6, [r2]
    uint8_t code1 = code(*x1, *y1, window);
 80026fa:	9b01      	ldr	r3, [sp, #4]
    if (x0 < window.x0) {
 80026fc:	4576      	cmp	r6, lr
    uint8_t code1 = code(*x1, *y1, window);
 80026fe:	f9b3 4000 	ldrsh.w	r4, [r3]
    if (x0 < window.x0) {
 8002702:	db51      	blt.n	80027a8 <clip_line+0xe8>
    } else if (x0 > window.x1) {
 8002704:	42be      	cmp	r6, r7
 8002706:	bfd4      	ite	le
 8002708:	2600      	movle	r6, #0
 800270a:	2601      	movgt	r6, #1
 800270c:	0076      	lsls	r6, r6, #1
    } if (y0 < window.y0) {
 800270e:	4544      	cmp	r4, r8
 8002710:	da4c      	bge.n	80027ac <clip_line+0xec>
        code |= BOTTOM;
 8002712:	f046 0604 	orr.w	r6, r6, #4
            } else if (code3 & BOTTOM) {
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
                y = window.y0;
            } else if (code3 & RIGHT) {
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
                x = window.x1;
 8002716:	b23c      	sxth	r4, r7
 8002718:	9403      	str	r4, [sp, #12]
                y = window.y0;
 800271a:	fa0f f488 	sxth.w	r4, r8
 800271e:	9404      	str	r4, [sp, #16]
                y = window.y1;
 8002720:	fa0f f48c 	sxth.w	r4, ip
 8002724:	9405      	str	r4, [sp, #20]
        if (!(code0 | code1)) {
 8002726:	ea55 0406 	orrs.w	r4, r5, r6
 800272a:	f000 80bb 	beq.w	80028a4 <clip_line+0x1e4>
        } else if (code0 & code1) {
 800272e:	4235      	tst	r5, r6
 8002730:	f040 80bc 	bne.w	80028ac <clip_line+0x1ec>
            uint8_t code3 = code0 ? code0 : code1;
 8002734:	2d00      	cmp	r5, #0
 8002736:	bf14      	ite	ne
 8002738:	462c      	movne	r4, r5
 800273a:	4634      	moveq	r4, r6
 800273c:	4623      	mov	r3, r4
            if (code3 & TOP) {
 800273e:	0724      	lsls	r4, r4, #28
 8002740:	d539      	bpl.n	80027b6 <clip_line+0xf6>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8002742:	f9b0 9000 	ldrsh.w	r9, [r0]
 8002746:	f9b1 a000 	ldrsh.w	sl, [r1]
 800274a:	f9b2 4000 	ldrsh.w	r4, [r2]
 800274e:	ebac 0b0a 	sub.w	fp, ip, sl
 8002752:	eba4 0409 	sub.w	r4, r4, r9
 8002756:	fb0b f404 	mul.w	r4, fp, r4
 800275a:	9402      	str	r4, [sp, #8]
 800275c:	9c01      	ldr	r4, [sp, #4]
 800275e:	f9b4 b000 	ldrsh.w	fp, [r4]
 8002762:	9c02      	ldr	r4, [sp, #8]
 8002764:	ebab 0b0a 	sub.w	fp, fp, sl
 8002768:	fb94 f4fb 	sdiv	r4, r4, fp
 800276c:	444c      	add	r4, r9
 800276e:	fa0f f984 	sxth.w	r9, r4
                y = window.y1;
 8002772:	9c05      	ldr	r4, [sp, #20]
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
                x = window.x0;
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8002774:	429d      	cmp	r5, r3
 8002776:	d17b      	bne.n	8002870 <clip_line+0x1b0>
                *x0 = x;
 8002778:	f8a0 9000 	strh.w	r9, [r0]
                *y0 = y;
 800277c:	800c      	strh	r4, [r1, #0]
    if (x0 < window.x0) {
 800277e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8002782:	45ae      	cmp	lr, r5
 8002784:	dc6c      	bgt.n	8002860 <clip_line+0x1a0>
    } else if (x0 > window.x1) {
 8002786:	42bd      	cmp	r5, r7
 8002788:	bfd4      	ite	le
 800278a:	2500      	movle	r5, #0
 800278c:	2501      	movgt	r5, #1
 800278e:	006d      	lsls	r5, r5, #1
    } if (y0 < window.y0) {
 8002790:	45a0      	cmp	r8, r4
 8002792:	dd67      	ble.n	8002864 <clip_line+0x1a4>
        code |= BOTTOM;
 8002794:	f045 0504 	orr.w	r5, r5, #4
 8002798:	e7c5      	b.n	8002726 <clip_line+0x66>
        code |= LEFT;
 800279a:	2501      	movs	r5, #1
 800279c:	e7a7      	b.n	80026ee <clip_line+0x2e>
    } else if (y0 > window.y1) {
 800279e:	4564      	cmp	r4, ip
        code |= TOP;
 80027a0:	bfc8      	it	gt
 80027a2:	f045 0508 	orrgt.w	r5, r5, #8
 80027a6:	e7a6      	b.n	80026f6 <clip_line+0x36>
        code |= LEFT;
 80027a8:	2601      	movs	r6, #1
 80027aa:	e7b0      	b.n	800270e <clip_line+0x4e>
    } else if (y0 > window.y1) {
 80027ac:	4564      	cmp	r4, ip
        code |= TOP;
 80027ae:	bfc8      	it	gt
 80027b0:	f046 0608 	orrgt.w	r6, r6, #8
 80027b4:	e7af      	b.n	8002716 <clip_line+0x56>
            } else if (code3 & BOTTOM) {
 80027b6:	461c      	mov	r4, r3
 80027b8:	0764      	lsls	r4, r4, #29
 80027ba:	d519      	bpl.n	80027f0 <clip_line+0x130>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80027bc:	f9b0 9000 	ldrsh.w	r9, [r0]
 80027c0:	f9b1 a000 	ldrsh.w	sl, [r1]
 80027c4:	f9b2 4000 	ldrsh.w	r4, [r2]
 80027c8:	eba8 0b0a 	sub.w	fp, r8, sl
 80027cc:	eba4 0409 	sub.w	r4, r4, r9
 80027d0:	fb0b f404 	mul.w	r4, fp, r4
 80027d4:	9402      	str	r4, [sp, #8]
 80027d6:	9c01      	ldr	r4, [sp, #4]
 80027d8:	f9b4 b000 	ldrsh.w	fp, [r4]
 80027dc:	9c02      	ldr	r4, [sp, #8]
 80027de:	ebab 0b0a 	sub.w	fp, fp, sl
 80027e2:	fb94 f4fb 	sdiv	r4, r4, fp
 80027e6:	444c      	add	r4, r9
 80027e8:	fa0f f984 	sxth.w	r9, r4
                y = window.y0;
 80027ec:	9c04      	ldr	r4, [sp, #16]
 80027ee:	e7c1      	b.n	8002774 <clip_line+0xb4>
            } else if (code3 & RIGHT) {
 80027f0:	461c      	mov	r4, r3
 80027f2:	07a4      	lsls	r4, r4, #30
 80027f4:	d517      	bpl.n	8002826 <clip_line+0x166>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 80027f6:	9c01      	ldr	r4, [sp, #4]
 80027f8:	f9b1 9000 	ldrsh.w	r9, [r1]
 80027fc:	f9b0 a000 	ldrsh.w	sl, [r0]
 8002800:	f9b4 4000 	ldrsh.w	r4, [r4]
 8002804:	eba7 0b0a 	sub.w	fp, r7, sl
 8002808:	eba4 0409 	sub.w	r4, r4, r9
 800280c:	fb0b f404 	mul.w	r4, fp, r4
 8002810:	f9b2 b000 	ldrsh.w	fp, [r2]
 8002814:	ebab 0b0a 	sub.w	fp, fp, sl
 8002818:	fb94 f4fb 	sdiv	r4, r4, fp
 800281c:	444c      	add	r4, r9
 800281e:	b224      	sxth	r4, r4
                x = window.x1;
 8002820:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002824:	e7a6      	b.n	8002774 <clip_line+0xb4>
            }  else if (code3 & LEFT) {
 8002826:	f013 0401 	ands.w	r4, r3, #1
 800282a:	d017      	beq.n	800285c <clip_line+0x19c>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 800282c:	9c01      	ldr	r4, [sp, #4]
 800282e:	f9b1 9000 	ldrsh.w	r9, [r1]
 8002832:	f9b0 a000 	ldrsh.w	sl, [r0]
 8002836:	f9b4 4000 	ldrsh.w	r4, [r4]
 800283a:	ebae 0b0a 	sub.w	fp, lr, sl
 800283e:	eba4 0409 	sub.w	r4, r4, r9
 8002842:	fb0b f404 	mul.w	r4, fp, r4
 8002846:	f9b2 b000 	ldrsh.w	fp, [r2]
 800284a:	ebab 0b0a 	sub.w	fp, fp, sl
 800284e:	fb94 f4fb 	sdiv	r4, r4, fp
 8002852:	444c      	add	r4, r9
 8002854:	b224      	sxth	r4, r4
                x = window.x0;
 8002856:	fa0f f98e 	sxth.w	r9, lr
 800285a:	e78b      	b.n	8002774 <clip_line+0xb4>
            int16_t x = 0;
 800285c:	46a1      	mov	r9, r4
 800285e:	e789      	b.n	8002774 <clip_line+0xb4>
        code |= LEFT;
 8002860:	2501      	movs	r5, #1
 8002862:	e795      	b.n	8002790 <clip_line+0xd0>
    } else if (y0 > window.y1) {
 8002864:	4564      	cmp	r4, ip
 8002866:	f77f af5e 	ble.w	8002726 <clip_line+0x66>
        code |= TOP;
 800286a:	f045 0508 	orr.w	r5, r5, #8
 800286e:	e75a      	b.n	8002726 <clip_line+0x66>
                code0 = code(*x0, *y0, window);
            } else {
                *x1 = x;
                *y1 = y;
 8002870:	9b01      	ldr	r3, [sp, #4]
                *x1 = x;
 8002872:	f8a2 9000 	strh.w	r9, [r2]
                *y1 = y;
 8002876:	801c      	strh	r4, [r3, #0]
    if (x0 < window.x0) {
 8002878:	f9b2 6000 	ldrsh.w	r6, [r2]
 800287c:	45b6      	cmp	lr, r6
 800287e:	dc09      	bgt.n	8002894 <clip_line+0x1d4>
    } else if (x0 > window.x1) {
 8002880:	42be      	cmp	r6, r7
 8002882:	bfd4      	ite	le
 8002884:	2600      	movle	r6, #0
 8002886:	2601      	movgt	r6, #1
 8002888:	0076      	lsls	r6, r6, #1
    } if (y0 < window.y0) {
 800288a:	45a0      	cmp	r8, r4
 800288c:	dd04      	ble.n	8002898 <clip_line+0x1d8>
        code |= BOTTOM;
 800288e:	f046 0604 	orr.w	r6, r6, #4
 8002892:	e748      	b.n	8002726 <clip_line+0x66>
        code |= LEFT;
 8002894:	2601      	movs	r6, #1
 8002896:	e7f8      	b.n	800288a <clip_line+0x1ca>
    } else if (y0 > window.y1) {
 8002898:	4564      	cmp	r4, ip
 800289a:	f77f af44 	ble.w	8002726 <clip_line+0x66>
        code |= TOP;
 800289e:	f046 0608 	orr.w	r6, r6, #8
 80028a2:	e740      	b.n	8002726 <clip_line+0x66>
            accept = true;
 80028a4:	2001      	movs	r0, #1
            }
        }
    }

    return accept;
 80028a6:	b007      	add	sp, #28
 80028a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool accept = false;
 80028ac:	2000      	movs	r0, #0
 80028ae:	e7fa      	b.n	80028a6 <clip_line+0x1e6>

080028b0 <fontx_meta>:

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {

    memcpy(meta->name, &font[FONTX_NAME], 8);
 80028b0:	f8d1 3006 	ldr.w	r3, [r1, #6]
 80028b4:	6003      	str	r3, [r0, #0]
 80028b6:	f8d1 300a 	ldr.w	r3, [r1, #10]
 80028ba:	6043      	str	r3, [r0, #4]
    meta->width = font[FONTX_WIDTH];
 80028bc:	7b8b      	ldrb	r3, [r1, #14]
 80028be:	7243      	strb	r3, [r0, #9]
    meta->height = font[FONTX_HEIGHT];
 80028c0:	7bcb      	ldrb	r3, [r1, #15]
 80028c2:	7283      	strb	r3, [r0, #10]
    meta->type = font[FONTX_TYPE];
 80028c4:	7c0b      	ldrb	r3, [r1, #16]
 80028c6:	72c3      	strb	r3, [r0, #11]

    return 0;
}
 80028c8:	2000      	movs	r0, #0
 80028ca:	4770      	bx	lr

080028cc <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 80028cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028d0:	b085      	sub	sp, #20
 80028d2:	4604      	mov	r4, r0
 80028d4:	460d      	mov	r5, r1
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80028d6:	a801      	add	r0, sp, #4
uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 80028d8:	4611      	mov	r1, r2
    status = fontx_meta(&meta, font);
 80028da:	f7ff ffe9 	bl	80028b0 <fontx_meta>
    if (0 != status) {
 80028de:	b9a8      	cbnz	r0, 800290c <fontx_glyph+0x40>
        return status;
    }

    glyph->width = meta.width;
 80028e0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    glyph->height = meta.height;
 80028e4:	f89d 200e 	ldrb.w	r2, [sp, #14]
    glyph->width = meta.width;
 80028e8:	7023      	strb	r3, [r4, #0]
    glyph->pitch = (meta.width + 7) / 8;
 80028ea:	3307      	adds	r3, #7
 80028ec:	08db      	lsrs	r3, r3, #3
    glyph->height = meta.height;
 80028ee:	7062      	strb	r2, [r4, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80028f0:	70e3      	strb	r3, [r4, #3]
    glyph->size = glyph->pitch * meta.height;
 80028f2:	fb12 f203 	smulbb	r2, r2, r3

    if (FONTX_TYPE_SBCS == meta.type) {
 80028f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    glyph->size = glyph->pitch * meta.height;
 80028fa:	b2d6      	uxtb	r6, r2
 80028fc:	70a6      	strb	r6, [r4, #2]
    if (FONTX_TYPE_SBCS == meta.type) {
 80028fe:	b943      	cbnz	r3, 8002912 <fontx_glyph+0x46>
        if (code < 0x100) {
 8002900:	2dff      	cmp	r5, #255	@ 0xff
 8002902:	d80e      	bhi.n	8002922 <fontx_glyph+0x56>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8002904:	fb05 1106 	mla	r1, r5, r6, r1
 8002908:	3111      	adds	r1, #17

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
                /* Number of codes from top of the block_table. */
                nc += code - sb;
                glyph->buffer = &font[
 800290a:	6061      	str	r1, [r4, #4]
            block_table += 4;
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 800290c:	b005      	add	sp, #20
 800290e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8002912:	7c4f      	ldrb	r7, [r1, #17]
 8002914:	f101 0c16 	add.w	ip, r1, #22
 8002918:	46b8      	mov	r8, r7
        nc = 0;
 800291a:	4603      	mov	r3, r0
        while (bc--) {
 800291c:	f1b8 0f00 	cmp.w	r8, #0
 8002920:	d101      	bne.n	8002926 <fontx_glyph+0x5a>
    return FONTX_ERR_GLYPH_NOT_FOUND;
 8002922:	2001      	movs	r0, #1
 8002924:	e7f2      	b.n	800290c <fontx_glyph+0x40>
            sb = block_table[0] + block_table[1] * 0x100;
 8002926:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 800292a:	f81c ec04 	ldrb.w	lr, [ip, #-4]
            eb = block_table[2] + block_table[3] * 0x100;
 800292e:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
            sb = block_table[0] + block_table[1] * 0x100;
 8002932:	eb0e 2e02 	add.w	lr, lr, r2, lsl #8
            eb = block_table[2] + block_table[3] * 0x100;
 8002936:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
            if (code >= sb && code <= eb) {
 800293a:	45ae      	cmp	lr, r5
            eb = block_table[2] + block_table[3] * 0x100;
 800293c:	eb02 2209 	add.w	r2, r2, r9, lsl #8
            if (code >= sb && code <= eb) {
 8002940:	d80b      	bhi.n	800295a <fontx_glyph+0x8e>
 8002942:	42aa      	cmp	r2, r5
 8002944:	d309      	bcc.n	800295a <fontx_glyph+0x8e>
                nc += code - sb;
 8002946:	442b      	add	r3, r5
 8002948:	eba3 050e 	sub.w	r5, r3, lr
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800294c:	2312      	movs	r3, #18
 800294e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8002952:	fb06 3305 	mla	r3, r6, r5, r3
                glyph->buffer = &font[
 8002956:	4419      	add	r1, r3
                return FONTX_OK;
 8002958:	e7d7      	b.n	800290a <fontx_glyph+0x3e>
            nc += eb - sb + 1;
 800295a:	3301      	adds	r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	eba3 030e 	sub.w	r3, r3, lr
            block_table += 4;
 8002962:	f108 38ff 	add.w	r8, r8, #4294967295
 8002966:	f10c 0c04 	add.w	ip, ip, #4
 800296a:	e7d7      	b.n	800291c <fontx_glyph+0x50>

0800296c <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 800296c:	b470      	push	{r4, r5, r6}
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800296e:	4c09      	ldr	r4, [pc, #36]	@ (8002994 <hagl_put_pixel+0x28>)
 8002970:	8826      	ldrh	r6, [r4, #0]
 8002972:	42b0      	cmp	r0, r6
 8002974:	db0b      	blt.n	800298e <hagl_put_pixel+0x22>
 8002976:	8866      	ldrh	r6, [r4, #2]
 8002978:	42b1      	cmp	r1, r6
 800297a:	db08      	blt.n	800298e <hagl_put_pixel+0x22>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800297c:	88a6      	ldrh	r6, [r4, #4]
 800297e:	42b0      	cmp	r0, r6
 8002980:	dc05      	bgt.n	800298e <hagl_put_pixel+0x22>
 8002982:	88e4      	ldrh	r4, [r4, #6]
 8002984:	42a1      	cmp	r1, r4
 8002986:	dc02      	bgt.n	800298e <hagl_put_pixel+0x22>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
}
 8002988:	bc70      	pop	{r4, r5, r6}
    hagl_hal_put_pixel(x0, y0, color);
 800298a:	f7fe b9ff 	b.w	8000d8c <lcd_put_pixel>
}
 800298e:	bc70      	pop	{r4, r5, r6}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	2000000c 	.word	0x2000000c

08002998 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8002998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800299c:	b085      	sub	sp, #20
 800299e:	f8ad 200a 	strh.w	r2, [sp, #10]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80029a2:	4a37      	ldr	r2, [pc, #220]	@ (8002a80 <hagl_draw_line+0xe8>)
{
 80029a4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80029a8:	f8ad 100c 	strh.w	r1, [sp, #12]
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80029ac:	6810      	ldr	r0, [r2, #0]
 80029ae:	6851      	ldr	r1, [r2, #4]
{
 80029b0:	f8ad 3008 	strh.w	r3, [sp, #8]
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80029b4:	466b      	mov	r3, sp
{
 80029b6:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80029ba:	f10d 020a 	add.w	r2, sp, #10
 80029be:	c303      	stmia	r3!, {r0, r1}
 80029c0:	a903      	add	r1, sp, #12
 80029c2:	f10d 000e 	add.w	r0, sp, #14
 80029c6:	f7ff fe7b 	bl	80026c0 <clip_line>
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d055      	beq.n	8002a7a <hagl_draw_line+0xe2>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 80029ce:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80029d2:	f9bd 900a 	ldrsh.w	r9, [sp, #10]
    sx = x0 < x1 ? 1 : -1;
    dy = ABS(y1 - y0);
 80029d6:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
    dx = ABS(x1 - x0);
 80029da:	eba9 0703 	sub.w	r7, r9, r3
 80029de:	2f00      	cmp	r7, #0
 80029e0:	bfb8      	it	lt
 80029e2:	427f      	neglt	r7, r7
    sx = x0 < x1 ? 1 : -1;
 80029e4:	4599      	cmp	r9, r3
 80029e6:	bfd4      	ite	le
 80029e8:	f04f 39ff 	movle.w	r9, #4294967295
 80029ec:	f04f 0901 	movgt.w	r9, #1
    dy = ABS(y1 - y0);
 80029f0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80029f4:	eba6 0803 	sub.w	r8, r6, r3
 80029f8:	f1b8 0f00 	cmp.w	r8, #0
 80029fc:	bfb8      	it	lt
 80029fe:	f1c8 0800 	rsblt	r8, r8, #0
    dx = ABS(x1 - x0);
 8002a02:	b23d      	sxth	r5, r7
    dy = ABS(y1 - y0);
 8002a04:	fa0f fb88 	sxth.w	fp, r8
    sy = y0 < y1 ? 1 : -1;
 8002a08:	429e      	cmp	r6, r3
 8002a0a:	bfd4      	ite	le
 8002a0c:	f04f 36ff 	movle.w	r6, #4294967295
 8002a10:	2601      	movgt	r6, #1
    err = (dx > dy ? dx : -dy) / 2;
 8002a12:	455d      	cmp	r5, fp
 8002a14:	dd2b      	ble.n	8002a6e <hagl_draw_line+0xd6>
 8002a16:	eb05 74d5 	add.w	r4, r5, r5, lsr #31
 8002a1a:	1064      	asrs	r4, r4, #1
            break;
        };

        e2 = err + err;

        if (e2 > -dx) {
 8002a1c:	426d      	negs	r5, r5
        hagl_put_pixel(x0, y0, color);
 8002a1e:	4652      	mov	r2, sl
 8002a20:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8002a24:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 8002a28:	f7ff ffa0 	bl	800296c <hagl_put_pixel>
        if (x0 == x1 && y0 == y1) {
 8002a2c:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8002a30:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d105      	bne.n	8002a44 <hagl_draw_line+0xac>
 8002a38:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8002a3c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002a40:	4299      	cmp	r1, r3
 8002a42:	d01a      	beq.n	8002a7a <hagl_draw_line+0xe2>
        e2 = err + err;
 8002a44:	b2a1      	uxth	r1, r4
 8002a46:	004b      	lsls	r3, r1, #1
 8002a48:	b21b      	sxth	r3, r3
        if (e2 > -dx) {
 8002a4a:	42ab      	cmp	r3, r5
            err -= dy;
 8002a4c:	bfc1      	itttt	gt
 8002a4e:	eba1 0108 	subgt.w	r1, r1, r8
            x0 += sx;
 8002a52:	444a      	addgt	r2, r9
            err -= dy;
 8002a54:	b20c      	sxthgt	r4, r1
            x0 += sx;
 8002a56:	f8ad 200e 	strhgt.w	r2, [sp, #14]
        }

        if (e2 < dy) {
 8002a5a:	459b      	cmp	fp, r3
 8002a5c:	dddf      	ble.n	8002a1e <hagl_draw_line+0x86>
            err += dx;
            y0 += sy;
 8002a5e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            err += dx;
 8002a62:	443c      	add	r4, r7
            y0 += sy;
 8002a64:	4433      	add	r3, r6
            err += dx;
 8002a66:	b224      	sxth	r4, r4
            y0 += sy;
 8002a68:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002a6c:	e7d7      	b.n	8002a1e <hagl_draw_line+0x86>
    err = (dx > dy ? dx : -dy) / 2;
 8002a6e:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 8002a72:	1064      	asrs	r4, r4, #1
 8002a74:	4264      	negs	r4, r4
 8002a76:	b224      	sxth	r4, r4
 8002a78:	e7d0      	b.n	8002a1c <hagl_draw_line+0x84>
        }
    }
}
 8002a7a:	b005      	add	sp, #20
 8002a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a80:	2000000c 	.word	0x2000000c

08002a84 <hagl_draw_hline>:
void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8002a84:	b507      	push	{r0, r1, r2, lr}
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8002a86:	4402      	add	r2, r0
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	b212      	sxth	r2, r2
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	f7ff ff83 	bl	8002998 <hagl_draw_line>
}
 8002a92:	b003      	add	sp, #12
 8002a94:	f85d fb04 	ldr.w	pc, [sp], #4

08002a98 <hagl_draw_vline>:
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8002a98:	b507      	push	{r0, r1, r2, lr}
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8002a9a:	440a      	add	r2, r1
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	b213      	sxth	r3, r2
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f7ff ff79 	bl	8002998 <hagl_draw_line>
}
 8002aa6:	b003      	add	sp, #12
 8002aa8:	f85d fb04 	ldr.w	pc, [sp], #4

08002aac <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8002aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8002ab0:	4290      	cmp	r0, r2
        y1 = y0 - y1;
        y0 = y0 - y1;
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8002ab2:	4e1f      	ldr	r6, [pc, #124]	@ (8002b30 <hagl_fill_rectangle+0x84>)
{
 8002ab4:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8002ab8:	8834      	ldrh	r4, [r6, #0]
{
 8002aba:	460d      	mov	r5, r1
    if (x0 > x1) {
 8002abc:	bfc2      	ittt	gt
 8002abe:	4601      	movgt	r1, r0
 8002ac0:	4610      	movgt	r0, r2
 8002ac2:	460a      	movgt	r2, r1
    if (y0 > y1) {
 8002ac4:	429d      	cmp	r5, r3
 8002ac6:	bfc2      	ittt	gt
 8002ac8:	4629      	movgt	r1, r5
 8002aca:	461d      	movgt	r5, r3
 8002acc:	460b      	movgt	r3, r1
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8002ace:	42a2      	cmp	r2, r4
 8002ad0:	db22      	blt.n	8002b18 <hagl_fill_rectangle+0x6c>
 8002ad2:	8871      	ldrh	r1, [r6, #2]
 8002ad4:	428b      	cmp	r3, r1
 8002ad6:	db1f      	blt.n	8002b18 <hagl_fill_rectangle+0x6c>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8002ad8:	f8b6 e004 	ldrh.w	lr, [r6, #4]
 8002adc:	4570      	cmp	r0, lr
 8002ade:	dc1b      	bgt.n	8002b18 <hagl_fill_rectangle+0x6c>
 8002ae0:	f8b6 c006 	ldrh.w	ip, [r6, #6]
 8002ae4:	4565      	cmp	r5, ip
 8002ae6:	dc17      	bgt.n	8002b18 <hagl_fill_rectangle+0x6c>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8002ae8:	42a0      	cmp	r0, r4
 8002aea:	bfb8      	it	lt
 8002aec:	4620      	movlt	r0, r4
    y0 = max(y0, clip_window.y0);
    x1 = min(x1, clip_window.x1);
    y1 = min(y1, clip_window.y1);

    uint16_t width = x1 - x0 + 1;
 8002aee:	4572      	cmp	r2, lr
 8002af0:	bfa8      	it	ge
 8002af2:	4672      	movge	r2, lr
    uint16_t height = y1 - y0 + 1;
 8002af4:	42a9      	cmp	r1, r5
 8002af6:	bfb8      	it	lt
 8002af8:	4629      	movlt	r1, r5
 8002afa:	4563      	cmp	r3, ip
 8002afc:	bfa8      	it	ge
 8002afe:	4663      	movge	r3, ip
 8002b00:	fa13 f581 	uxtah	r5, r3, r1
    uint16_t width = x1 - x0 + 1;
 8002b04:	1c54      	adds	r4, r2, #1
    uint16_t height = y1 - y0 + 1;
 8002b06:	b28e      	uxth	r6, r1
 8002b08:	3501      	adds	r5, #1
    uint16_t width = x1 - x0 + 1;
 8002b0a:	1a24      	subs	r4, r4, r0
 8002b0c:	1bad      	subs	r5, r5, r6
    x0 = max(x0, clip_window.x0);
 8002b0e:	b207      	sxth	r7, r0
    uint16_t width = x1 - x0 + 1;
 8002b10:	b2a4      	uxth	r4, r4

    for (uint16_t i = 0; i < height; i++) {
 8002b12:	b2ad      	uxth	r5, r5
 8002b14:	42ae      	cmp	r6, r5
 8002b16:	d101      	bne.n	8002b1c <hagl_fill_rectangle+0x70>
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
#endif
    }
}
 8002b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hagl_draw_hline(x0, y0 + i, width, color);
 8002b1c:	b231      	sxth	r1, r6
 8002b1e:	4643      	mov	r3, r8
 8002b20:	4622      	mov	r2, r4
 8002b22:	4638      	mov	r0, r7
 8002b24:	3601      	adds	r6, #1
 8002b26:	f7ff ffad 	bl	8002a84 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8002b2a:	b2b6      	uxth	r6, r6
 8002b2c:	e7f2      	b.n	8002b14 <hagl_fill_rectangle+0x68>
 8002b2e:	bf00      	nop
 8002b30:	2000000c 	.word	0x2000000c

08002b34 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8002b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8002b38:	f8d2 a00c 	ldr.w	sl, [r2, #12]
void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8002b3c:	4607      	mov	r7, r0
 8002b3e:	4688      	mov	r8, r1
 8002b40:	4615      	mov	r5, r2

    for (uint16_t y = 0; y < source->height; y++) {
 8002b42:	2600      	movs	r6, #0
 8002b44:	886a      	ldrh	r2, [r5, #2]
 8002b46:	b2b3      	uxth	r3, r6
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d811      	bhi.n	8002b70 <hagl_blit+0x3c>
            color = *(ptr++);
            hagl_put_pixel(x0 + x, y0 + y, color);
        }
    }
#endif
};
 8002b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hagl_put_pixel(x0 + x, y0 + y, color);
 8002b50:	4438      	add	r0, r7
 8002b52:	f83a 2b02 	ldrh.w	r2, [sl], #2
 8002b56:	4621      	mov	r1, r4
 8002b58:	b200      	sxth	r0, r0
 8002b5a:	f7ff ff07 	bl	800296c <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8002b5e:	f109 0901 	add.w	r9, r9, #1
 8002b62:	882b      	ldrh	r3, [r5, #0]
 8002b64:	fa1f f089 	uxth.w	r0, r9
 8002b68:	4283      	cmp	r3, r0
 8002b6a:	d8f1      	bhi.n	8002b50 <hagl_blit+0x1c>
    for (uint16_t y = 0; y < source->height; y++) {
 8002b6c:	3601      	adds	r6, #1
 8002b6e:	e7e9      	b.n	8002b44 <hagl_blit+0x10>
            hagl_put_pixel(x0 + x, y0 + y, color);
 8002b70:	4443      	add	r3, r8
 8002b72:	f04f 0900 	mov.w	r9, #0
 8002b76:	b21c      	sxth	r4, r3
 8002b78:	e7f3      	b.n	8002b62 <hagl_blit+0x2e>

08002b7a <hagl_put_char>:
{
 8002b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7e:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 8002b82:	b087      	sub	sp, #28
 8002b84:	4699      	mov	r9, r3
    status = fontx_glyph(&glyph, code, font);
 8002b86:	f50d 5382 	add.w	r3, sp, #4160	@ 0x1040
{
 8002b8a:	460f      	mov	r7, r1
 8002b8c:	4690      	mov	r8, r2
    status = fontx_glyph(&glyph, code, font);
 8002b8e:	4601      	mov	r1, r0
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4668      	mov	r0, sp
 8002b94:	f7ff fe9a 	bl	80028cc <fontx_glyph>
    if (0 != status) {
 8002b98:	4604      	mov	r4, r0
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	d141      	bne.n	8002c22 <hagl_put_char+0xa8>
    bitmap.width = glyph.width,
 8002b9e:	f89d 3000 	ldrb.w	r3, [sp]
 8002ba2:	f8ad 3008 	strh.w	r3, [sp, #8]
    bitmap.height = glyph.height,
 8002ba6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002baa:	f8ad 300a 	strh.w	r3, [sp, #10]
    bitmap_init(&bitmap, (uint8_t *)buffer);
 8002bae:	a906      	add	r1, sp, #24
    bitmap.depth = DISPLAY_DEPTH,
 8002bb0:	2310      	movs	r3, #16
    bitmap_init(&bitmap, (uint8_t *)buffer);
 8002bb2:	a802      	add	r0, sp, #8
    bitmap.depth = DISPLAY_DEPTH,
 8002bb4:	f88d 300e 	strb.w	r3, [sp, #14]
    bitmap_init(&bitmap, (uint8_t *)buffer);
 8002bb8:	f7ff fd76 	bl	80026a8 <bitmap_init>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8002bbc:	f89d 1000 	ldrb.w	r1, [sp]
    color_t *ptr = (color_t *) bitmap.buffer;
 8002bc0:	9b05      	ldr	r3, [sp, #20]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8002bc2:	f89d e001 	ldrb.w	lr, [sp, #1]
        glyph.buffer += glyph.pitch;
 8002bc6:	f89d c003 	ldrb.w	ip, [sp, #3]
 8002bca:	004a      	lsls	r2, r1, #1
    for (uint8_t y = 0; y < glyph.height; y++) {
 8002bcc:	4620      	mov	r0, r4
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8002bce:	f04f 0a80 	mov.w	sl, #128	@ 0x80
    for (uint8_t y = 0; y < glyph.height; y++) {
 8002bd2:	b2c4      	uxtb	r4, r0
 8002bd4:	45a6      	cmp	lr, r4
 8002bd6:	d918      	bls.n	8002c0a <hagl_put_char+0x90>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8002bd8:	9e01      	ldr	r6, [sp, #4]
 8002bda:	2500      	movs	r5, #0
 8002bdc:	e00d      	b.n	8002bfa <hagl_put_char+0x80>
 8002bde:	f896 b000 	ldrb.w	fp, [r6]
 8002be2:	f004 0407 	and.w	r4, r4, #7
 8002be6:	fa4a f404 	asr.w	r4, sl, r4
                *(ptr++) = 0x0000;
 8002bea:	ea14 0f0b 	tst.w	r4, fp
 8002bee:	bf14      	ite	ne
 8002bf0:	464c      	movne	r4, r9
 8002bf2:	2400      	moveq	r4, #0
 8002bf4:	f823 4015 	strh.w	r4, [r3, r5, lsl #1]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8002bf8:	3501      	adds	r5, #1
 8002bfa:	b2ec      	uxtb	r4, r5
 8002bfc:	42a1      	cmp	r1, r4
 8002bfe:	d8ee      	bhi.n	8002bde <hagl_put_char+0x64>
        glyph.buffer += glyph.pitch;
 8002c00:	4466      	add	r6, ip
 8002c02:	4413      	add	r3, r2
 8002c04:	9601      	str	r6, [sp, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8002c06:	3001      	adds	r0, #1
 8002c08:	e7e3      	b.n	8002bd2 <hagl_put_char+0x58>
    hagl_blit(x0, y0, &bitmap);
 8002c0a:	4638      	mov	r0, r7
 8002c0c:	aa02      	add	r2, sp, #8
 8002c0e:	4641      	mov	r1, r8
 8002c10:	f7ff ff90 	bl	8002b34 <hagl_blit>
    return bitmap.width;
 8002c14:	f89d 0008 	ldrb.w	r0, [sp, #8]
}
 8002c18:	f50d 5d80 	add.w	sp, sp, #4096	@ 0x1000
 8002c1c:	b007      	add	sp, #28
 8002c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 8002c22:	2000      	movs	r0, #0
 8002c24:	e7f8      	b.n	8002c18 <hagl_put_char+0x9e>

08002c26 <hagl_put_text>:
{
 8002c26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	4605      	mov	r5, r0
 8002c2e:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 8002c32:	460f      	mov	r7, r1
    status = fontx_meta(&meta, font);
 8002c34:	a803      	add	r0, sp, #12
 8002c36:	4649      	mov	r1, r9
{
 8002c38:	4616      	mov	r6, r2
 8002c3a:	4698      	mov	r8, r3
    status = fontx_meta(&meta, font);
 8002c3c:	f7ff fe38 	bl	80028b0 <fontx_meta>
    if (0 != status) {
 8002c40:	b9e8      	cbnz	r0, 8002c7e <hagl_put_text+0x58>
 8002c42:	463c      	mov	r4, r7
        temp = *str++;
 8002c44:	f855 0b04 	ldr.w	r0, [r5], #4
        if (13 == temp || 10 == temp) {
 8002c48:	280d      	cmp	r0, #13
 8002c4a:	d001      	beq.n	8002c50 <hagl_put_text+0x2a>
 8002c4c:	280a      	cmp	r0, #10
 8002c4e:	d10c      	bne.n	8002c6a <hagl_put_text+0x44>
            y0 += meta.height;
 8002c50:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002c54:	4433      	add	r3, r6
 8002c56:	b21e      	sxth	r6, r3
            x0 = 0;
 8002c58:	2400      	movs	r4, #0
    } while (*str != 0);
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f1      	bne.n	8002c44 <hagl_put_text+0x1e>
    return x0 - original;
 8002c60:	1be0      	subs	r0, r4, r7
 8002c62:	b280      	uxth	r0, r0
}
 8002c64:	b007      	add	sp, #28
 8002c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	f8cd 9000 	str.w	r9, [sp]
 8002c70:	4643      	mov	r3, r8
 8002c72:	4632      	mov	r2, r6
 8002c74:	f7ff ff81 	bl	8002b7a <hagl_put_char>
 8002c78:	4404      	add	r4, r0
 8002c7a:	b224      	sxth	r4, r4
 8002c7c:	e7ed      	b.n	8002c5a <hagl_put_text+0x34>
        return 0;
 8002c7e:	2000      	movs	r0, #0
 8002c80:	e7f0      	b.n	8002c64 <hagl_put_text+0x3e>
	...

08002c84 <hagl_draw_rounded_rectangle>:

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8002c84:	4290      	cmp	r0, r2
void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8002c86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c8a:	469a      	mov	sl, r3
    if (x0 > x1) {
 8002c8c:	bfc8      	it	gt
 8002c8e:	4603      	movgt	r3, r0
void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8002c90:	4617      	mov	r7, r2
 8002c92:	4681      	mov	r9, r0
    if (x0 > x1) {
 8002c94:	bfc4      	itt	gt
 8002c96:	461f      	movgt	r7, r3
 8002c98:	4691      	movgt	r9, r2
        x1 = x0 - x1;
        x0 = x0 - x1;
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8002c9a:	4551      	cmp	r1, sl
 8002c9c:	bfc2      	ittt	gt
 8002c9e:	460b      	movgt	r3, r1
 8002ca0:	4651      	movgt	r1, sl
 8002ca2:	469a      	movgt	sl, r3
        y1 = y0 - y1;
        y0 = y0 - y1;
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8002ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e50 <hagl_draw_rounded_rectangle+0x1cc>)
 8002ca6:	881a      	ldrh	r2, [r3, #0]
void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8002ca8:	b089      	sub	sp, #36	@ 0x24
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8002caa:	4297      	cmp	r7, r2
void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8002cac:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8002cb0:	db64      	blt.n	8002d7c <hagl_draw_rounded_rectangle+0xf8>
 8002cb2:	885a      	ldrh	r2, [r3, #2]
 8002cb4:	4592      	cmp	sl, r2
 8002cb6:	db61      	blt.n	8002d7c <hagl_draw_rounded_rectangle+0xf8>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8002cb8:	889a      	ldrh	r2, [r3, #4]
 8002cba:	4591      	cmp	r9, r2
 8002cbc:	dc5e      	bgt.n	8002d7c <hagl_draw_rounded_rectangle+0xf8>
 8002cbe:	88db      	ldrh	r3, [r3, #6]
 8002cc0:	4299      	cmp	r1, r3
 8002cc2:	dc5b      	bgt.n	8002d7c <hagl_draw_rounded_rectangle+0xf8>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 8002cc4:	b2bb      	uxth	r3, r7
 8002cc6:	9302      	str	r3, [sp, #8]
 8002cc8:	9a02      	ldr	r2, [sp, #8]
 8002cca:	f9bd 5048 	ldrsh.w	r5, [sp, #72]	@ 0x48
    height = y1 - y0 + 1;
 8002cce:	fa1f f08a 	uxth.w	r0, sl
 8002cd2:	fa1f f881 	uxth.w	r8, r1
 8002cd6:	9003      	str	r0, [sp, #12]
 8002cd8:	3001      	adds	r0, #1
    width = x1 - x0 + 1;
 8002cda:	fa1f f389 	uxth.w	r3, r9
    height = y1 - y0 + 1;
 8002cde:	eba0 0008 	sub.w	r0, r0, r8
    width = x1 - x0 + 1;
 8002ce2:	3201      	adds	r2, #1
 8002ce4:	1ad2      	subs	r2, r2, r3
    height = y1 - y0 + 1;
 8002ce6:	b284      	uxth	r4, r0
 8002ce8:	9406      	str	r4, [sp, #24]
    r = min(r, min(width / 2, height / 2));
 8002cea:	f3c2 044e 	ubfx	r4, r2, #1, #15
 8002cee:	42ac      	cmp	r4, r5
 8002cf0:	bfa8      	it	ge
 8002cf2:	462c      	movge	r4, r5
 8002cf4:	f3c0 004e 	ubfx	r0, r0, #1, #15
 8002cf8:	4284      	cmp	r4, r0
 8002cfa:	bfa8      	it	ge
 8002cfc:	4604      	movge	r4, r0

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 8002cfe:	fa1f fb84 	uxth.w	fp, r4
 8002d02:	ea4f 054b 	mov.w	r5, fp, lsl #1
    r = min(r, min(width / 2, height / 2));
 8002d06:	b220      	sxth	r0, r4
    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 8002d08:	b2ad      	uxth	r5, r5
 8002d0a:	fa13 f484 	uxtah	r4, r3, r4
 8002d0e:	b2a3      	uxth	r3, r4
 8002d10:	1b52      	subs	r2, r2, r5
 8002d12:	b224      	sxth	r4, r4
 8002d14:	b292      	uxth	r2, r2
    r = min(r, min(width / 2, height / 2));
 8002d16:	9001      	str	r0, [sp, #4]
    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 8002d18:	9304      	str	r3, [sp, #16]
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4633      	mov	r3, r6
 8002d1e:	9205      	str	r2, [sp, #20]
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 8002d20:	44d8      	add	r8, fp
    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 8002d22:	f7ff feaf 	bl	8002a84 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 8002d26:	4620      	mov	r0, r4
 8002d28:	9a05      	ldr	r2, [sp, #20]
 8002d2a:	4633      	mov	r3, r6
 8002d2c:	4651      	mov	r1, sl
 8002d2e:	f7ff fea9 	bl	8002a84 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 8002d32:	fa1f f388 	uxth.w	r3, r8
 8002d36:	9305      	str	r3, [sp, #20]
 8002d38:	9b06      	ldr	r3, [sp, #24]
 8002d3a:	1b5c      	subs	r4, r3, r5
 8002d3c:	fa0f f888 	sxth.w	r8, r8
 8002d40:	b2a4      	uxth	r4, r4
 8002d42:	4641      	mov	r1, r8
 8002d44:	4633      	mov	r3, r6
 8002d46:	4622      	mov	r2, r4
 8002d48:	4648      	mov	r0, r9
 8002d4a:	f7ff fea5 	bl	8002a98 <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 8002d4e:	4633      	mov	r3, r6
 8002d50:	4641      	mov	r1, r8
 8002d52:	4622      	mov	r2, r4
 8002d54:	4638      	mov	r0, r7
 8002d56:	f7ff fe9f 	bl	8002a98 <hagl_draw_vline>
        } else {
            d = d + 4 * x + 6;
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 8002d5a:	9b02      	ldr	r3, [sp, #8]
 8002d5c:	eba3 030b 	sub.w	r3, r3, fp
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	9306      	str	r3, [sp, #24]
        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 8002d64:	9b03      	ldr	r3, [sp, #12]
    d = 3 - 2 * r;
 8002d66:	f1c5 0503 	rsb	r5, r5, #3
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 8002d6a:	eba3 030b 	sub.w	r3, r3, fp
    d = 3 - 2 * r;
 8002d6e:	b22d      	sxth	r5, r5
    x = 0;
 8002d70:	f04f 0800 	mov.w	r8, #0
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 8002d74:	9303      	str	r3, [sp, #12]
    while (y >= x) {
 8002d76:	9b01      	ldr	r3, [sp, #4]
 8002d78:	4598      	cmp	r8, r3
 8002d7a:	dd02      	ble.n	8002d82 <hagl_draw_rounded_rectangle+0xfe>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
    }
};
 8002d7c:	b009      	add	sp, #36	@ 0x24
 8002d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        x++;
 8002d82:	f108 0801 	add.w	r8, r8, #1
        if (d > 0) {
 8002d86:	2d00      	cmp	r5, #0
 8002d88:	fa1f f988 	uxth.w	r9, r8
            d = d + 4 * (x - y) + 10;
 8002d8c:	b2ab      	uxth	r3, r5
        x++;
 8002d8e:	fa0f f888 	sxth.w	r8, r8
        if (d > 0) {
 8002d92:	dd58      	ble.n	8002e46 <hagl_draw_rounded_rectangle+0x1c2>
            y--;
 8002d94:	9a01      	ldr	r2, [sp, #4]
 8002d96:	3a01      	subs	r2, #1
 8002d98:	b212      	sxth	r2, r2
 8002d9a:	9201      	str	r2, [sp, #4]
            d = d + 4 * (x - y) + 10;
 8002d9c:	330a      	adds	r3, #10
 8002d9e:	eba8 0202 	sub.w	r2, r8, r2
 8002da2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 8002da6:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8002daa:	9a05      	ldr	r2, [sp, #20]
            d = d + 4 * x + 6;
 8002dac:	b21d      	sxth	r5, r3
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 8002dae:	9b06      	ldr	r3, [sp, #24]
 8002db0:	eba2 0a04 	sub.w	sl, r2, r4
 8002db4:	444b      	add	r3, r9
 8002db6:	b21b      	sxth	r3, r3
 8002db8:	fa0f fa8a 	sxth.w	sl, sl
 8002dbc:	4632      	mov	r2, r6
 8002dbe:	4651      	mov	r1, sl
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	9307      	str	r3, [sp, #28]
 8002dc4:	f7ff fdd2 	bl	800296c <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 8002dc8:	9b06      	ldr	r3, [sp, #24]
 8002dca:	191a      	adds	r2, r3, r4
 8002dcc:	b213      	sxth	r3, r2
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	9b05      	ldr	r3, [sp, #20]
 8002dd2:	9802      	ldr	r0, [sp, #8]
 8002dd4:	eba3 0709 	sub.w	r7, r3, r9
 8002dd8:	b23f      	sxth	r7, r7
 8002dda:	4632      	mov	r2, r6
 8002ddc:	4639      	mov	r1, r7
 8002dde:	f7ff fdc5 	bl	800296c <hagl_put_pixel>
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 8002de2:	9b04      	ldr	r3, [sp, #16]
 8002de4:	eba3 0b09 	sub.w	fp, r3, r9
 8002de8:	fa0f fb8b 	sxth.w	fp, fp
 8002dec:	4632      	mov	r2, r6
 8002dee:	4651      	mov	r1, sl
 8002df0:	4658      	mov	r0, fp
 8002df2:	f7ff fdbb 	bl	800296c <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 8002df6:	9b04      	ldr	r3, [sp, #16]
 8002df8:	eba3 0a04 	sub.w	sl, r3, r4
 8002dfc:	fa0f fa8a 	sxth.w	sl, sl
 8002e00:	4632      	mov	r2, r6
 8002e02:	4639      	mov	r1, r7
 8002e04:	4650      	mov	r0, sl
 8002e06:	f7ff fdb1 	bl	800296c <hagl_put_pixel>
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 8002e0a:	9b03      	ldr	r3, [sp, #12]
 8002e0c:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8002e10:	fa14 f483 	uxtah	r4, r4, r3
 8002e14:	9b07      	ldr	r3, [sp, #28]
 8002e16:	b224      	sxth	r4, r4
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 8002e18:	444f      	add	r7, r9
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	4632      	mov	r2, r6
 8002e1e:	4621      	mov	r1, r4
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 8002e20:	b23f      	sxth	r7, r7
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 8002e22:	f7ff fda3 	bl	800296c <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 8002e26:	9802      	ldr	r0, [sp, #8]
 8002e28:	4632      	mov	r2, r6
 8002e2a:	4639      	mov	r1, r7
 8002e2c:	f7ff fd9e 	bl	800296c <hagl_put_pixel>
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 8002e30:	4632      	mov	r2, r6
 8002e32:	4621      	mov	r1, r4
 8002e34:	4658      	mov	r0, fp
 8002e36:	f7ff fd99 	bl	800296c <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 8002e3a:	4632      	mov	r2, r6
 8002e3c:	4639      	mov	r1, r7
 8002e3e:	4650      	mov	r0, sl
 8002e40:	f7ff fd94 	bl	800296c <hagl_put_pixel>
 8002e44:	e797      	b.n	8002d76 <hagl_draw_rounded_rectangle+0xf2>
            d = d + 4 * x + 6;
 8002e46:	3306      	adds	r3, #6
 8002e48:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8002e4c:	e7ab      	b.n	8002da6 <hagl_draw_rounded_rectangle+0x122>
 8002e4e:	bf00      	nop
 8002e50:	2000000c 	.word	0x2000000c

08002e54 <hagl_color>:
color_t hagl_color(uint8_t r, uint8_t g, uint8_t b)
{
#ifdef HAGL_HAS_HAL_COLOR
    return hagl_hal_color(r, g, b);
#else
    return rgb565(r, g, b);
 8002e54:	f000 b800 	b.w	8002e58 <rgb565>

08002e58 <rgb565>:

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 8002e58:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <rgb565+0x18>)
 8002e5a:	00c9      	lsls	r1, r1, #3
 8002e5c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8002e60:	ea03 2300 	and.w	r3, r3, r0, lsl #8
 8002e64:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002e68:	4319      	orrs	r1, r3
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);

    return rgb;
 8002e6a:	ba48      	rev16	r0, r1
}
 8002e6c:	b280      	uxth	r0, r0
 8002e6e:	4770      	bx	lr
 8002e70:	fffff800 	.word	0xfffff800

08002e74 <malloc>:
 8002e74:	4b02      	ldr	r3, [pc, #8]	@ (8002e80 <malloc+0xc>)
 8002e76:	4601      	mov	r1, r0
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	f000 b825 	b.w	8002ec8 <_malloc_r>
 8002e7e:	bf00      	nop
 8002e80:	20000014 	.word	0x20000014

08002e84 <sbrk_aligned>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	4e0f      	ldr	r6, [pc, #60]	@ (8002ec4 <sbrk_aligned+0x40>)
 8002e88:	460c      	mov	r4, r1
 8002e8a:	6831      	ldr	r1, [r6, #0]
 8002e8c:	4605      	mov	r5, r0
 8002e8e:	b911      	cbnz	r1, 8002e96 <sbrk_aligned+0x12>
 8002e90:	f000 f8ae 	bl	8002ff0 <_sbrk_r>
 8002e94:	6030      	str	r0, [r6, #0]
 8002e96:	4621      	mov	r1, r4
 8002e98:	4628      	mov	r0, r5
 8002e9a:	f000 f8a9 	bl	8002ff0 <_sbrk_r>
 8002e9e:	1c43      	adds	r3, r0, #1
 8002ea0:	d103      	bne.n	8002eaa <sbrk_aligned+0x26>
 8002ea2:	f04f 34ff 	mov.w	r4, #4294967295
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	bd70      	pop	{r4, r5, r6, pc}
 8002eaa:	1cc4      	adds	r4, r0, #3
 8002eac:	f024 0403 	bic.w	r4, r4, #3
 8002eb0:	42a0      	cmp	r0, r4
 8002eb2:	d0f8      	beq.n	8002ea6 <sbrk_aligned+0x22>
 8002eb4:	1a21      	subs	r1, r4, r0
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	f000 f89a 	bl	8002ff0 <_sbrk_r>
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	d1f2      	bne.n	8002ea6 <sbrk_aligned+0x22>
 8002ec0:	e7ef      	b.n	8002ea2 <sbrk_aligned+0x1e>
 8002ec2:	bf00      	nop
 8002ec4:	2000a150 	.word	0x2000a150

08002ec8 <_malloc_r>:
 8002ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ecc:	1ccd      	adds	r5, r1, #3
 8002ece:	f025 0503 	bic.w	r5, r5, #3
 8002ed2:	3508      	adds	r5, #8
 8002ed4:	2d0c      	cmp	r5, #12
 8002ed6:	bf38      	it	cc
 8002ed8:	250c      	movcc	r5, #12
 8002eda:	2d00      	cmp	r5, #0
 8002edc:	4606      	mov	r6, r0
 8002ede:	db01      	blt.n	8002ee4 <_malloc_r+0x1c>
 8002ee0:	42a9      	cmp	r1, r5
 8002ee2:	d904      	bls.n	8002eee <_malloc_r+0x26>
 8002ee4:	230c      	movs	r3, #12
 8002ee6:	6033      	str	r3, [r6, #0]
 8002ee8:	2000      	movs	r0, #0
 8002eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fc4 <_malloc_r+0xfc>
 8002ef2:	f000 f869 	bl	8002fc8 <__malloc_lock>
 8002ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8002efa:	461c      	mov	r4, r3
 8002efc:	bb44      	cbnz	r4, 8002f50 <_malloc_r+0x88>
 8002efe:	4629      	mov	r1, r5
 8002f00:	4630      	mov	r0, r6
 8002f02:	f7ff ffbf 	bl	8002e84 <sbrk_aligned>
 8002f06:	1c43      	adds	r3, r0, #1
 8002f08:	4604      	mov	r4, r0
 8002f0a:	d158      	bne.n	8002fbe <_malloc_r+0xf6>
 8002f0c:	f8d8 4000 	ldr.w	r4, [r8]
 8002f10:	4627      	mov	r7, r4
 8002f12:	2f00      	cmp	r7, #0
 8002f14:	d143      	bne.n	8002f9e <_malloc_r+0xd6>
 8002f16:	2c00      	cmp	r4, #0
 8002f18:	d04b      	beq.n	8002fb2 <_malloc_r+0xea>
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	4639      	mov	r1, r7
 8002f1e:	4630      	mov	r0, r6
 8002f20:	eb04 0903 	add.w	r9, r4, r3
 8002f24:	f000 f864 	bl	8002ff0 <_sbrk_r>
 8002f28:	4581      	cmp	r9, r0
 8002f2a:	d142      	bne.n	8002fb2 <_malloc_r+0xea>
 8002f2c:	6821      	ldr	r1, [r4, #0]
 8002f2e:	1a6d      	subs	r5, r5, r1
 8002f30:	4629      	mov	r1, r5
 8002f32:	4630      	mov	r0, r6
 8002f34:	f7ff ffa6 	bl	8002e84 <sbrk_aligned>
 8002f38:	3001      	adds	r0, #1
 8002f3a:	d03a      	beq.n	8002fb2 <_malloc_r+0xea>
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	442b      	add	r3, r5
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	f8d8 3000 	ldr.w	r3, [r8]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	bb62      	cbnz	r2, 8002fa4 <_malloc_r+0xdc>
 8002f4a:	f8c8 7000 	str.w	r7, [r8]
 8002f4e:	e00f      	b.n	8002f70 <_malloc_r+0xa8>
 8002f50:	6822      	ldr	r2, [r4, #0]
 8002f52:	1b52      	subs	r2, r2, r5
 8002f54:	d420      	bmi.n	8002f98 <_malloc_r+0xd0>
 8002f56:	2a0b      	cmp	r2, #11
 8002f58:	d917      	bls.n	8002f8a <_malloc_r+0xc2>
 8002f5a:	1961      	adds	r1, r4, r5
 8002f5c:	42a3      	cmp	r3, r4
 8002f5e:	6025      	str	r5, [r4, #0]
 8002f60:	bf18      	it	ne
 8002f62:	6059      	strne	r1, [r3, #4]
 8002f64:	6863      	ldr	r3, [r4, #4]
 8002f66:	bf08      	it	eq
 8002f68:	f8c8 1000 	streq.w	r1, [r8]
 8002f6c:	5162      	str	r2, [r4, r5]
 8002f6e:	604b      	str	r3, [r1, #4]
 8002f70:	4630      	mov	r0, r6
 8002f72:	f000 f82f 	bl	8002fd4 <__malloc_unlock>
 8002f76:	f104 000b 	add.w	r0, r4, #11
 8002f7a:	1d23      	adds	r3, r4, #4
 8002f7c:	f020 0007 	bic.w	r0, r0, #7
 8002f80:	1ac2      	subs	r2, r0, r3
 8002f82:	bf1c      	itt	ne
 8002f84:	1a1b      	subne	r3, r3, r0
 8002f86:	50a3      	strne	r3, [r4, r2]
 8002f88:	e7af      	b.n	8002eea <_malloc_r+0x22>
 8002f8a:	6862      	ldr	r2, [r4, #4]
 8002f8c:	42a3      	cmp	r3, r4
 8002f8e:	bf0c      	ite	eq
 8002f90:	f8c8 2000 	streq.w	r2, [r8]
 8002f94:	605a      	strne	r2, [r3, #4]
 8002f96:	e7eb      	b.n	8002f70 <_malloc_r+0xa8>
 8002f98:	4623      	mov	r3, r4
 8002f9a:	6864      	ldr	r4, [r4, #4]
 8002f9c:	e7ae      	b.n	8002efc <_malloc_r+0x34>
 8002f9e:	463c      	mov	r4, r7
 8002fa0:	687f      	ldr	r7, [r7, #4]
 8002fa2:	e7b6      	b.n	8002f12 <_malloc_r+0x4a>
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	42a3      	cmp	r3, r4
 8002faa:	d1fb      	bne.n	8002fa4 <_malloc_r+0xdc>
 8002fac:	2300      	movs	r3, #0
 8002fae:	6053      	str	r3, [r2, #4]
 8002fb0:	e7de      	b.n	8002f70 <_malloc_r+0xa8>
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	6033      	str	r3, [r6, #0]
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	f000 f80c 	bl	8002fd4 <__malloc_unlock>
 8002fbc:	e794      	b.n	8002ee8 <_malloc_r+0x20>
 8002fbe:	6005      	str	r5, [r0, #0]
 8002fc0:	e7d6      	b.n	8002f70 <_malloc_r+0xa8>
 8002fc2:	bf00      	nop
 8002fc4:	2000a154 	.word	0x2000a154

08002fc8 <__malloc_lock>:
 8002fc8:	4801      	ldr	r0, [pc, #4]	@ (8002fd0 <__malloc_lock+0x8>)
 8002fca:	f000 b84b 	b.w	8003064 <__retarget_lock_acquire_recursive>
 8002fce:	bf00      	nop
 8002fd0:	2000a294 	.word	0x2000a294

08002fd4 <__malloc_unlock>:
 8002fd4:	4801      	ldr	r0, [pc, #4]	@ (8002fdc <__malloc_unlock+0x8>)
 8002fd6:	f000 b846 	b.w	8003066 <__retarget_lock_release_recursive>
 8002fda:	bf00      	nop
 8002fdc:	2000a294 	.word	0x2000a294

08002fe0 <memset>:
 8002fe0:	4402      	add	r2, r0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d100      	bne.n	8002fea <memset+0xa>
 8002fe8:	4770      	bx	lr
 8002fea:	f803 1b01 	strb.w	r1, [r3], #1
 8002fee:	e7f9      	b.n	8002fe4 <memset+0x4>

08002ff0 <_sbrk_r>:
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	4d06      	ldr	r5, [pc, #24]	@ (800300c <_sbrk_r+0x1c>)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	4608      	mov	r0, r1
 8002ffa:	602b      	str	r3, [r5, #0]
 8002ffc:	f7fe f99a 	bl	8001334 <_sbrk>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d102      	bne.n	800300a <_sbrk_r+0x1a>
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	b103      	cbz	r3, 800300a <_sbrk_r+0x1a>
 8003008:	6023      	str	r3, [r4, #0]
 800300a:	bd38      	pop	{r3, r4, r5, pc}
 800300c:	2000a290 	.word	0x2000a290

08003010 <__errno>:
 8003010:	4b01      	ldr	r3, [pc, #4]	@ (8003018 <__errno+0x8>)
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000014 	.word	0x20000014

0800301c <__libc_init_array>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	4d0d      	ldr	r5, [pc, #52]	@ (8003054 <__libc_init_array+0x38>)
 8003020:	4c0d      	ldr	r4, [pc, #52]	@ (8003058 <__libc_init_array+0x3c>)
 8003022:	1b64      	subs	r4, r4, r5
 8003024:	10a4      	asrs	r4, r4, #2
 8003026:	2600      	movs	r6, #0
 8003028:	42a6      	cmp	r6, r4
 800302a:	d109      	bne.n	8003040 <__libc_init_array+0x24>
 800302c:	4d0b      	ldr	r5, [pc, #44]	@ (800305c <__libc_init_array+0x40>)
 800302e:	4c0c      	ldr	r4, [pc, #48]	@ (8003060 <__libc_init_array+0x44>)
 8003030:	f001 f952 	bl	80042d8 <_init>
 8003034:	1b64      	subs	r4, r4, r5
 8003036:	10a4      	asrs	r4, r4, #2
 8003038:	2600      	movs	r6, #0
 800303a:	42a6      	cmp	r6, r4
 800303c:	d105      	bne.n	800304a <__libc_init_array+0x2e>
 800303e:	bd70      	pop	{r4, r5, r6, pc}
 8003040:	f855 3b04 	ldr.w	r3, [r5], #4
 8003044:	4798      	blx	r3
 8003046:	3601      	adds	r6, #1
 8003048:	e7ee      	b.n	8003028 <__libc_init_array+0xc>
 800304a:	f855 3b04 	ldr.w	r3, [r5], #4
 800304e:	4798      	blx	r3
 8003050:	3601      	adds	r6, #1
 8003052:	e7f2      	b.n	800303a <__libc_init_array+0x1e>
 8003054:	08007590 	.word	0x08007590
 8003058:	08007590 	.word	0x08007590
 800305c:	08007590 	.word	0x08007590
 8003060:	08007594 	.word	0x08007594

08003064 <__retarget_lock_acquire_recursive>:
 8003064:	4770      	bx	lr

08003066 <__retarget_lock_release_recursive>:
 8003066:	4770      	bx	lr

08003068 <sqrt>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	ed2d 8b02 	vpush	{d8}
 800306e:	ec55 4b10 	vmov	r4, r5, d0
 8003072:	f000 f879 	bl	8003168 <__ieee754_sqrt>
 8003076:	4622      	mov	r2, r4
 8003078:	462b      	mov	r3, r5
 800307a:	4620      	mov	r0, r4
 800307c:	4629      	mov	r1, r5
 800307e:	eeb0 8a40 	vmov.f32	s16, s0
 8003082:	eef0 8a60 	vmov.f32	s17, s1
 8003086:	f7fd fcf5 	bl	8000a74 <__aeabi_dcmpun>
 800308a:	b990      	cbnz	r0, 80030b2 <sqrt+0x4a>
 800308c:	2200      	movs	r2, #0
 800308e:	2300      	movs	r3, #0
 8003090:	4620      	mov	r0, r4
 8003092:	4629      	mov	r1, r5
 8003094:	f7fd fcc6 	bl	8000a24 <__aeabi_dcmplt>
 8003098:	b158      	cbz	r0, 80030b2 <sqrt+0x4a>
 800309a:	f7ff ffb9 	bl	8003010 <__errno>
 800309e:	2321      	movs	r3, #33	@ 0x21
 80030a0:	6003      	str	r3, [r0, #0]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2300      	movs	r3, #0
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	f7fd fb73 	bl	8000794 <__aeabi_ddiv>
 80030ae:	ec41 0b18 	vmov	d8, r0, r1
 80030b2:	eeb0 0a48 	vmov.f32	s0, s16
 80030b6:	eef0 0a68 	vmov.f32	s1, s17
 80030ba:	ecbd 8b02 	vpop	{d8}
 80030be:	bd38      	pop	{r3, r4, r5, pc}

080030c0 <sin>:
 80030c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80030c2:	ec53 2b10 	vmov	r2, r3, d0
 80030c6:	4826      	ldr	r0, [pc, #152]	@ (8003160 <sin+0xa0>)
 80030c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80030cc:	4281      	cmp	r1, r0
 80030ce:	d807      	bhi.n	80030e0 <sin+0x20>
 80030d0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003158 <sin+0x98>
 80030d4:	2000      	movs	r0, #0
 80030d6:	b005      	add	sp, #20
 80030d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80030dc:	f000 b9e8 	b.w	80034b0 <__kernel_sin>
 80030e0:	4820      	ldr	r0, [pc, #128]	@ (8003164 <sin+0xa4>)
 80030e2:	4281      	cmp	r1, r0
 80030e4:	d908      	bls.n	80030f8 <sin+0x38>
 80030e6:	4610      	mov	r0, r2
 80030e8:	4619      	mov	r1, r3
 80030ea:	f7fd f871 	bl	80001d0 <__aeabi_dsub>
 80030ee:	ec41 0b10 	vmov	d0, r0, r1
 80030f2:	b005      	add	sp, #20
 80030f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80030f8:	4668      	mov	r0, sp
 80030fa:	f000 fa95 	bl	8003628 <__ieee754_rem_pio2>
 80030fe:	f000 0003 	and.w	r0, r0, #3
 8003102:	2801      	cmp	r0, #1
 8003104:	d00c      	beq.n	8003120 <sin+0x60>
 8003106:	2802      	cmp	r0, #2
 8003108:	d011      	beq.n	800312e <sin+0x6e>
 800310a:	b9e8      	cbnz	r0, 8003148 <sin+0x88>
 800310c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003110:	ed9d 0b00 	vldr	d0, [sp]
 8003114:	2001      	movs	r0, #1
 8003116:	f000 f9cb 	bl	80034b0 <__kernel_sin>
 800311a:	ec51 0b10 	vmov	r0, r1, d0
 800311e:	e7e6      	b.n	80030ee <sin+0x2e>
 8003120:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003124:	ed9d 0b00 	vldr	d0, [sp]
 8003128:	f000 f8fa 	bl	8003320 <__kernel_cos>
 800312c:	e7f5      	b.n	800311a <sin+0x5a>
 800312e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003132:	ed9d 0b00 	vldr	d0, [sp]
 8003136:	2001      	movs	r0, #1
 8003138:	f000 f9ba 	bl	80034b0 <__kernel_sin>
 800313c:	ec53 2b10 	vmov	r2, r3, d0
 8003140:	4610      	mov	r0, r2
 8003142:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003146:	e7d2      	b.n	80030ee <sin+0x2e>
 8003148:	ed9d 1b02 	vldr	d1, [sp, #8]
 800314c:	ed9d 0b00 	vldr	d0, [sp]
 8003150:	f000 f8e6 	bl	8003320 <__kernel_cos>
 8003154:	e7f2      	b.n	800313c <sin+0x7c>
 8003156:	bf00      	nop
	...
 8003160:	3fe921fb 	.word	0x3fe921fb
 8003164:	7fefffff 	.word	0x7fefffff

08003168 <__ieee754_sqrt>:
 8003168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800316c:	4a68      	ldr	r2, [pc, #416]	@ (8003310 <__ieee754_sqrt+0x1a8>)
 800316e:	ec55 4b10 	vmov	r4, r5, d0
 8003172:	43aa      	bics	r2, r5
 8003174:	462b      	mov	r3, r5
 8003176:	4621      	mov	r1, r4
 8003178:	d110      	bne.n	800319c <__ieee754_sqrt+0x34>
 800317a:	4622      	mov	r2, r4
 800317c:	4620      	mov	r0, r4
 800317e:	4629      	mov	r1, r5
 8003180:	f7fd f9de 	bl	8000540 <__aeabi_dmul>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4620      	mov	r0, r4
 800318a:	4629      	mov	r1, r5
 800318c:	f7fd f822 	bl	80001d4 <__adddf3>
 8003190:	4604      	mov	r4, r0
 8003192:	460d      	mov	r5, r1
 8003194:	ec45 4b10 	vmov	d0, r4, r5
 8003198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800319c:	2d00      	cmp	r5, #0
 800319e:	dc0e      	bgt.n	80031be <__ieee754_sqrt+0x56>
 80031a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80031a4:	4322      	orrs	r2, r4
 80031a6:	d0f5      	beq.n	8003194 <__ieee754_sqrt+0x2c>
 80031a8:	b19d      	cbz	r5, 80031d2 <__ieee754_sqrt+0x6a>
 80031aa:	4622      	mov	r2, r4
 80031ac:	4620      	mov	r0, r4
 80031ae:	4629      	mov	r1, r5
 80031b0:	f7fd f80e 	bl	80001d0 <__aeabi_dsub>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	f7fd faec 	bl	8000794 <__aeabi_ddiv>
 80031bc:	e7e8      	b.n	8003190 <__ieee754_sqrt+0x28>
 80031be:	152a      	asrs	r2, r5, #20
 80031c0:	d115      	bne.n	80031ee <__ieee754_sqrt+0x86>
 80031c2:	2000      	movs	r0, #0
 80031c4:	e009      	b.n	80031da <__ieee754_sqrt+0x72>
 80031c6:	0acb      	lsrs	r3, r1, #11
 80031c8:	3a15      	subs	r2, #21
 80031ca:	0549      	lsls	r1, r1, #21
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0fa      	beq.n	80031c6 <__ieee754_sqrt+0x5e>
 80031d0:	e7f7      	b.n	80031c2 <__ieee754_sqrt+0x5a>
 80031d2:	462a      	mov	r2, r5
 80031d4:	e7fa      	b.n	80031cc <__ieee754_sqrt+0x64>
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	3001      	adds	r0, #1
 80031da:	02dc      	lsls	r4, r3, #11
 80031dc:	d5fb      	bpl.n	80031d6 <__ieee754_sqrt+0x6e>
 80031de:	1e44      	subs	r4, r0, #1
 80031e0:	1b12      	subs	r2, r2, r4
 80031e2:	f1c0 0420 	rsb	r4, r0, #32
 80031e6:	fa21 f404 	lsr.w	r4, r1, r4
 80031ea:	4323      	orrs	r3, r4
 80031ec:	4081      	lsls	r1, r0
 80031ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80031f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031fa:	07d2      	lsls	r2, r2, #31
 80031fc:	bf5c      	itt	pl
 80031fe:	005b      	lslpl	r3, r3, #1
 8003200:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8003204:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003208:	bf58      	it	pl
 800320a:	0049      	lslpl	r1, r1, #1
 800320c:	2600      	movs	r6, #0
 800320e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8003212:	106d      	asrs	r5, r5, #1
 8003214:	0049      	lsls	r1, r1, #1
 8003216:	2016      	movs	r0, #22
 8003218:	4632      	mov	r2, r6
 800321a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800321e:	1917      	adds	r7, r2, r4
 8003220:	429f      	cmp	r7, r3
 8003222:	bfde      	ittt	le
 8003224:	193a      	addle	r2, r7, r4
 8003226:	1bdb      	suble	r3, r3, r7
 8003228:	1936      	addle	r6, r6, r4
 800322a:	0fcf      	lsrs	r7, r1, #31
 800322c:	3801      	subs	r0, #1
 800322e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8003232:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003236:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800323a:	d1f0      	bne.n	800321e <__ieee754_sqrt+0xb6>
 800323c:	4604      	mov	r4, r0
 800323e:	2720      	movs	r7, #32
 8003240:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8003244:	429a      	cmp	r2, r3
 8003246:	eb00 0e0c 	add.w	lr, r0, ip
 800324a:	db02      	blt.n	8003252 <__ieee754_sqrt+0xea>
 800324c:	d113      	bne.n	8003276 <__ieee754_sqrt+0x10e>
 800324e:	458e      	cmp	lr, r1
 8003250:	d811      	bhi.n	8003276 <__ieee754_sqrt+0x10e>
 8003252:	f1be 0f00 	cmp.w	lr, #0
 8003256:	eb0e 000c 	add.w	r0, lr, ip
 800325a:	da42      	bge.n	80032e2 <__ieee754_sqrt+0x17a>
 800325c:	2800      	cmp	r0, #0
 800325e:	db40      	blt.n	80032e2 <__ieee754_sqrt+0x17a>
 8003260:	f102 0801 	add.w	r8, r2, #1
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	458e      	cmp	lr, r1
 8003268:	bf88      	it	hi
 800326a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800326e:	eba1 010e 	sub.w	r1, r1, lr
 8003272:	4464      	add	r4, ip
 8003274:	4642      	mov	r2, r8
 8003276:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800327a:	3f01      	subs	r7, #1
 800327c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8003280:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003284:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003288:	d1dc      	bne.n	8003244 <__ieee754_sqrt+0xdc>
 800328a:	4319      	orrs	r1, r3
 800328c:	d01b      	beq.n	80032c6 <__ieee754_sqrt+0x15e>
 800328e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8003314 <__ieee754_sqrt+0x1ac>
 8003292:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8003318 <__ieee754_sqrt+0x1b0>
 8003296:	e9da 0100 	ldrd	r0, r1, [sl]
 800329a:	e9db 2300 	ldrd	r2, r3, [fp]
 800329e:	f7fc ff97 	bl	80001d0 <__aeabi_dsub>
 80032a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4640      	mov	r0, r8
 80032ac:	4649      	mov	r1, r9
 80032ae:	f7fd fbc3 	bl	8000a38 <__aeabi_dcmple>
 80032b2:	b140      	cbz	r0, 80032c6 <__ieee754_sqrt+0x15e>
 80032b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80032b8:	e9da 0100 	ldrd	r0, r1, [sl]
 80032bc:	e9db 2300 	ldrd	r2, r3, [fp]
 80032c0:	d111      	bne.n	80032e6 <__ieee754_sqrt+0x17e>
 80032c2:	3601      	adds	r6, #1
 80032c4:	463c      	mov	r4, r7
 80032c6:	1072      	asrs	r2, r6, #1
 80032c8:	0863      	lsrs	r3, r4, #1
 80032ca:	07f1      	lsls	r1, r6, #31
 80032cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80032d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80032d4:	bf48      	it	mi
 80032d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80032da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80032de:	4618      	mov	r0, r3
 80032e0:	e756      	b.n	8003190 <__ieee754_sqrt+0x28>
 80032e2:	4690      	mov	r8, r2
 80032e4:	e7be      	b.n	8003264 <__ieee754_sqrt+0xfc>
 80032e6:	f7fc ff75 	bl	80001d4 <__adddf3>
 80032ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4640      	mov	r0, r8
 80032f4:	4649      	mov	r1, r9
 80032f6:	f7fd fb95 	bl	8000a24 <__aeabi_dcmplt>
 80032fa:	b120      	cbz	r0, 8003306 <__ieee754_sqrt+0x19e>
 80032fc:	1ca0      	adds	r0, r4, #2
 80032fe:	bf08      	it	eq
 8003300:	3601      	addeq	r6, #1
 8003302:	3402      	adds	r4, #2
 8003304:	e7df      	b.n	80032c6 <__ieee754_sqrt+0x15e>
 8003306:	1c63      	adds	r3, r4, #1
 8003308:	f023 0401 	bic.w	r4, r3, #1
 800330c:	e7db      	b.n	80032c6 <__ieee754_sqrt+0x15e>
 800330e:	bf00      	nop
 8003310:	7ff00000 	.word	0x7ff00000
 8003314:	20000070 	.word	0x20000070
 8003318:	20000068 	.word	0x20000068
 800331c:	00000000 	.word	0x00000000

08003320 <__kernel_cos>:
 8003320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003324:	ec57 6b10 	vmov	r6, r7, d0
 8003328:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800332c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003330:	ed8d 1b00 	vstr	d1, [sp]
 8003334:	d206      	bcs.n	8003344 <__kernel_cos+0x24>
 8003336:	4630      	mov	r0, r6
 8003338:	4639      	mov	r1, r7
 800333a:	f7fd fbb1 	bl	8000aa0 <__aeabi_d2iz>
 800333e:	2800      	cmp	r0, #0
 8003340:	f000 8088 	beq.w	8003454 <__kernel_cos+0x134>
 8003344:	4632      	mov	r2, r6
 8003346:	463b      	mov	r3, r7
 8003348:	4630      	mov	r0, r6
 800334a:	4639      	mov	r1, r7
 800334c:	f7fd f8f8 	bl	8000540 <__aeabi_dmul>
 8003350:	4b51      	ldr	r3, [pc, #324]	@ (8003498 <__kernel_cos+0x178>)
 8003352:	2200      	movs	r2, #0
 8003354:	4604      	mov	r4, r0
 8003356:	460d      	mov	r5, r1
 8003358:	f7fd f8f2 	bl	8000540 <__aeabi_dmul>
 800335c:	a340      	add	r3, pc, #256	@ (adr r3, 8003460 <__kernel_cos+0x140>)
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	4682      	mov	sl, r0
 8003364:	468b      	mov	fp, r1
 8003366:	4620      	mov	r0, r4
 8003368:	4629      	mov	r1, r5
 800336a:	f7fd f8e9 	bl	8000540 <__aeabi_dmul>
 800336e:	a33e      	add	r3, pc, #248	@ (adr r3, 8003468 <__kernel_cos+0x148>)
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	f7fc ff2e 	bl	80001d4 <__adddf3>
 8003378:	4622      	mov	r2, r4
 800337a:	462b      	mov	r3, r5
 800337c:	f7fd f8e0 	bl	8000540 <__aeabi_dmul>
 8003380:	a33b      	add	r3, pc, #236	@ (adr r3, 8003470 <__kernel_cos+0x150>)
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	f7fc ff23 	bl	80001d0 <__aeabi_dsub>
 800338a:	4622      	mov	r2, r4
 800338c:	462b      	mov	r3, r5
 800338e:	f7fd f8d7 	bl	8000540 <__aeabi_dmul>
 8003392:	a339      	add	r3, pc, #228	@ (adr r3, 8003478 <__kernel_cos+0x158>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f7fc ff1c 	bl	80001d4 <__adddf3>
 800339c:	4622      	mov	r2, r4
 800339e:	462b      	mov	r3, r5
 80033a0:	f7fd f8ce 	bl	8000540 <__aeabi_dmul>
 80033a4:	a336      	add	r3, pc, #216	@ (adr r3, 8003480 <__kernel_cos+0x160>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fc ff11 	bl	80001d0 <__aeabi_dsub>
 80033ae:	4622      	mov	r2, r4
 80033b0:	462b      	mov	r3, r5
 80033b2:	f7fd f8c5 	bl	8000540 <__aeabi_dmul>
 80033b6:	a334      	add	r3, pc, #208	@ (adr r3, 8003488 <__kernel_cos+0x168>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f7fc ff0a 	bl	80001d4 <__adddf3>
 80033c0:	4622      	mov	r2, r4
 80033c2:	462b      	mov	r3, r5
 80033c4:	f7fd f8bc 	bl	8000540 <__aeabi_dmul>
 80033c8:	4622      	mov	r2, r4
 80033ca:	462b      	mov	r3, r5
 80033cc:	f7fd f8b8 	bl	8000540 <__aeabi_dmul>
 80033d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033d4:	4604      	mov	r4, r0
 80033d6:	460d      	mov	r5, r1
 80033d8:	4630      	mov	r0, r6
 80033da:	4639      	mov	r1, r7
 80033dc:	f7fd f8b0 	bl	8000540 <__aeabi_dmul>
 80033e0:	460b      	mov	r3, r1
 80033e2:	4602      	mov	r2, r0
 80033e4:	4629      	mov	r1, r5
 80033e6:	4620      	mov	r0, r4
 80033e8:	f7fc fef2 	bl	80001d0 <__aeabi_dsub>
 80033ec:	4b2b      	ldr	r3, [pc, #172]	@ (800349c <__kernel_cos+0x17c>)
 80033ee:	4598      	cmp	r8, r3
 80033f0:	4606      	mov	r6, r0
 80033f2:	460f      	mov	r7, r1
 80033f4:	d810      	bhi.n	8003418 <__kernel_cos+0xf8>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4650      	mov	r0, sl
 80033fc:	4659      	mov	r1, fp
 80033fe:	f7fc fee7 	bl	80001d0 <__aeabi_dsub>
 8003402:	460b      	mov	r3, r1
 8003404:	4926      	ldr	r1, [pc, #152]	@ (80034a0 <__kernel_cos+0x180>)
 8003406:	4602      	mov	r2, r0
 8003408:	2000      	movs	r0, #0
 800340a:	f7fc fee1 	bl	80001d0 <__aeabi_dsub>
 800340e:	ec41 0b10 	vmov	d0, r0, r1
 8003412:	b003      	add	sp, #12
 8003414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003418:	4b22      	ldr	r3, [pc, #136]	@ (80034a4 <__kernel_cos+0x184>)
 800341a:	4921      	ldr	r1, [pc, #132]	@ (80034a0 <__kernel_cos+0x180>)
 800341c:	4598      	cmp	r8, r3
 800341e:	bf8c      	ite	hi
 8003420:	4d21      	ldrhi	r5, [pc, #132]	@ (80034a8 <__kernel_cos+0x188>)
 8003422:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003426:	2400      	movs	r4, #0
 8003428:	4622      	mov	r2, r4
 800342a:	462b      	mov	r3, r5
 800342c:	2000      	movs	r0, #0
 800342e:	f7fc fecf 	bl	80001d0 <__aeabi_dsub>
 8003432:	4622      	mov	r2, r4
 8003434:	4680      	mov	r8, r0
 8003436:	4689      	mov	r9, r1
 8003438:	462b      	mov	r3, r5
 800343a:	4650      	mov	r0, sl
 800343c:	4659      	mov	r1, fp
 800343e:	f7fc fec7 	bl	80001d0 <__aeabi_dsub>
 8003442:	4632      	mov	r2, r6
 8003444:	463b      	mov	r3, r7
 8003446:	f7fc fec3 	bl	80001d0 <__aeabi_dsub>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4640      	mov	r0, r8
 8003450:	4649      	mov	r1, r9
 8003452:	e7da      	b.n	800340a <__kernel_cos+0xea>
 8003454:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003490 <__kernel_cos+0x170>
 8003458:	e7db      	b.n	8003412 <__kernel_cos+0xf2>
 800345a:	bf00      	nop
 800345c:	f3af 8000 	nop.w
 8003460:	be8838d4 	.word	0xbe8838d4
 8003464:	bda8fae9 	.word	0xbda8fae9
 8003468:	bdb4b1c4 	.word	0xbdb4b1c4
 800346c:	3e21ee9e 	.word	0x3e21ee9e
 8003470:	809c52ad 	.word	0x809c52ad
 8003474:	3e927e4f 	.word	0x3e927e4f
 8003478:	19cb1590 	.word	0x19cb1590
 800347c:	3efa01a0 	.word	0x3efa01a0
 8003480:	16c15177 	.word	0x16c15177
 8003484:	3f56c16c 	.word	0x3f56c16c
 8003488:	5555554c 	.word	0x5555554c
 800348c:	3fa55555 	.word	0x3fa55555
 8003490:	00000000 	.word	0x00000000
 8003494:	3ff00000 	.word	0x3ff00000
 8003498:	3fe00000 	.word	0x3fe00000
 800349c:	3fd33332 	.word	0x3fd33332
 80034a0:	3ff00000 	.word	0x3ff00000
 80034a4:	3fe90000 	.word	0x3fe90000
 80034a8:	3fd20000 	.word	0x3fd20000
 80034ac:	00000000 	.word	0x00000000

080034b0 <__kernel_sin>:
 80034b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b4:	ec55 4b10 	vmov	r4, r5, d0
 80034b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80034bc:	b085      	sub	sp, #20
 80034be:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80034c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80034c6:	4680      	mov	r8, r0
 80034c8:	d205      	bcs.n	80034d6 <__kernel_sin+0x26>
 80034ca:	4620      	mov	r0, r4
 80034cc:	4629      	mov	r1, r5
 80034ce:	f7fd fae7 	bl	8000aa0 <__aeabi_d2iz>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d052      	beq.n	800357c <__kernel_sin+0xcc>
 80034d6:	4622      	mov	r2, r4
 80034d8:	462b      	mov	r3, r5
 80034da:	4620      	mov	r0, r4
 80034dc:	4629      	mov	r1, r5
 80034de:	f7fd f82f 	bl	8000540 <__aeabi_dmul>
 80034e2:	4682      	mov	sl, r0
 80034e4:	468b      	mov	fp, r1
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4620      	mov	r0, r4
 80034ec:	4629      	mov	r1, r5
 80034ee:	f7fd f827 	bl	8000540 <__aeabi_dmul>
 80034f2:	a342      	add	r3, pc, #264	@ (adr r3, 80035fc <__kernel_sin+0x14c>)
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	e9cd 0100 	strd	r0, r1, [sp]
 80034fc:	4650      	mov	r0, sl
 80034fe:	4659      	mov	r1, fp
 8003500:	f7fd f81e 	bl	8000540 <__aeabi_dmul>
 8003504:	a33f      	add	r3, pc, #252	@ (adr r3, 8003604 <__kernel_sin+0x154>)
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f7fc fe61 	bl	80001d0 <__aeabi_dsub>
 800350e:	4652      	mov	r2, sl
 8003510:	465b      	mov	r3, fp
 8003512:	f7fd f815 	bl	8000540 <__aeabi_dmul>
 8003516:	a33d      	add	r3, pc, #244	@ (adr r3, 800360c <__kernel_sin+0x15c>)
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f7fc fe5a 	bl	80001d4 <__adddf3>
 8003520:	4652      	mov	r2, sl
 8003522:	465b      	mov	r3, fp
 8003524:	f7fd f80c 	bl	8000540 <__aeabi_dmul>
 8003528:	a33a      	add	r3, pc, #232	@ (adr r3, 8003614 <__kernel_sin+0x164>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f7fc fe4f 	bl	80001d0 <__aeabi_dsub>
 8003532:	4652      	mov	r2, sl
 8003534:	465b      	mov	r3, fp
 8003536:	f7fd f803 	bl	8000540 <__aeabi_dmul>
 800353a:	a338      	add	r3, pc, #224	@ (adr r3, 800361c <__kernel_sin+0x16c>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f7fc fe48 	bl	80001d4 <__adddf3>
 8003544:	4606      	mov	r6, r0
 8003546:	460f      	mov	r7, r1
 8003548:	f1b8 0f00 	cmp.w	r8, #0
 800354c:	d11b      	bne.n	8003586 <__kernel_sin+0xd6>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4650      	mov	r0, sl
 8003554:	4659      	mov	r1, fp
 8003556:	f7fc fff3 	bl	8000540 <__aeabi_dmul>
 800355a:	a325      	add	r3, pc, #148	@ (adr r3, 80035f0 <__kernel_sin+0x140>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f7fc fe36 	bl	80001d0 <__aeabi_dsub>
 8003564:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003568:	f7fc ffea 	bl	8000540 <__aeabi_dmul>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4620      	mov	r0, r4
 8003572:	4629      	mov	r1, r5
 8003574:	f7fc fe2e 	bl	80001d4 <__adddf3>
 8003578:	4604      	mov	r4, r0
 800357a:	460d      	mov	r5, r1
 800357c:	ec45 4b10 	vmov	d0, r4, r5
 8003580:	b005      	add	sp, #20
 8003582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800358a:	4b1b      	ldr	r3, [pc, #108]	@ (80035f8 <__kernel_sin+0x148>)
 800358c:	2200      	movs	r2, #0
 800358e:	f7fc ffd7 	bl	8000540 <__aeabi_dmul>
 8003592:	4632      	mov	r2, r6
 8003594:	4680      	mov	r8, r0
 8003596:	4689      	mov	r9, r1
 8003598:	463b      	mov	r3, r7
 800359a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800359e:	f7fc ffcf 	bl	8000540 <__aeabi_dmul>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4640      	mov	r0, r8
 80035a8:	4649      	mov	r1, r9
 80035aa:	f7fc fe11 	bl	80001d0 <__aeabi_dsub>
 80035ae:	4652      	mov	r2, sl
 80035b0:	465b      	mov	r3, fp
 80035b2:	f7fc ffc5 	bl	8000540 <__aeabi_dmul>
 80035b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035ba:	f7fc fe09 	bl	80001d0 <__aeabi_dsub>
 80035be:	a30c      	add	r3, pc, #48	@ (adr r3, 80035f0 <__kernel_sin+0x140>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	4606      	mov	r6, r0
 80035c6:	460f      	mov	r7, r1
 80035c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035cc:	f7fc ffb8 	bl	8000540 <__aeabi_dmul>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4630      	mov	r0, r6
 80035d6:	4639      	mov	r1, r7
 80035d8:	f7fc fdfc 	bl	80001d4 <__adddf3>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4620      	mov	r0, r4
 80035e2:	4629      	mov	r1, r5
 80035e4:	f7fc fdf4 	bl	80001d0 <__aeabi_dsub>
 80035e8:	e7c6      	b.n	8003578 <__kernel_sin+0xc8>
 80035ea:	bf00      	nop
 80035ec:	f3af 8000 	nop.w
 80035f0:	55555549 	.word	0x55555549
 80035f4:	3fc55555 	.word	0x3fc55555
 80035f8:	3fe00000 	.word	0x3fe00000
 80035fc:	5acfd57c 	.word	0x5acfd57c
 8003600:	3de5d93a 	.word	0x3de5d93a
 8003604:	8a2b9ceb 	.word	0x8a2b9ceb
 8003608:	3e5ae5e6 	.word	0x3e5ae5e6
 800360c:	57b1fe7d 	.word	0x57b1fe7d
 8003610:	3ec71de3 	.word	0x3ec71de3
 8003614:	19c161d5 	.word	0x19c161d5
 8003618:	3f2a01a0 	.word	0x3f2a01a0
 800361c:	1110f8a6 	.word	0x1110f8a6
 8003620:	3f811111 	.word	0x3f811111
 8003624:	00000000 	.word	0x00000000

08003628 <__ieee754_rem_pio2>:
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	ec57 6b10 	vmov	r6, r7, d0
 8003630:	4bc5      	ldr	r3, [pc, #788]	@ (8003948 <__ieee754_rem_pio2+0x320>)
 8003632:	b08d      	sub	sp, #52	@ 0x34
 8003634:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003638:	4598      	cmp	r8, r3
 800363a:	4604      	mov	r4, r0
 800363c:	9704      	str	r7, [sp, #16]
 800363e:	d807      	bhi.n	8003650 <__ieee754_rem_pio2+0x28>
 8003640:	2200      	movs	r2, #0
 8003642:	2300      	movs	r3, #0
 8003644:	ed80 0b00 	vstr	d0, [r0]
 8003648:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800364c:	2500      	movs	r5, #0
 800364e:	e028      	b.n	80036a2 <__ieee754_rem_pio2+0x7a>
 8003650:	4bbe      	ldr	r3, [pc, #760]	@ (800394c <__ieee754_rem_pio2+0x324>)
 8003652:	4598      	cmp	r8, r3
 8003654:	d878      	bhi.n	8003748 <__ieee754_rem_pio2+0x120>
 8003656:	9b04      	ldr	r3, [sp, #16]
 8003658:	4dbd      	ldr	r5, [pc, #756]	@ (8003950 <__ieee754_rem_pio2+0x328>)
 800365a:	2b00      	cmp	r3, #0
 800365c:	4630      	mov	r0, r6
 800365e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003910 <__ieee754_rem_pio2+0x2e8>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	4639      	mov	r1, r7
 8003666:	dd38      	ble.n	80036da <__ieee754_rem_pio2+0xb2>
 8003668:	f7fc fdb2 	bl	80001d0 <__aeabi_dsub>
 800366c:	45a8      	cmp	r8, r5
 800366e:	4606      	mov	r6, r0
 8003670:	460f      	mov	r7, r1
 8003672:	d01a      	beq.n	80036aa <__ieee754_rem_pio2+0x82>
 8003674:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003918 <__ieee754_rem_pio2+0x2f0>)
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f7fc fda9 	bl	80001d0 <__aeabi_dsub>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4680      	mov	r8, r0
 8003684:	4689      	mov	r9, r1
 8003686:	4630      	mov	r0, r6
 8003688:	4639      	mov	r1, r7
 800368a:	f7fc fda1 	bl	80001d0 <__aeabi_dsub>
 800368e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003918 <__ieee754_rem_pio2+0x2f0>)
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f7fc fd9c 	bl	80001d0 <__aeabi_dsub>
 8003698:	e9c4 8900 	strd	r8, r9, [r4]
 800369c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80036a0:	2501      	movs	r5, #1
 80036a2:	4628      	mov	r0, r5
 80036a4:	b00d      	add	sp, #52	@ 0x34
 80036a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036aa:	a39d      	add	r3, pc, #628	@ (adr r3, 8003920 <__ieee754_rem_pio2+0x2f8>)
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	f7fc fd8e 	bl	80001d0 <__aeabi_dsub>
 80036b4:	a39c      	add	r3, pc, #624	@ (adr r3, 8003928 <__ieee754_rem_pio2+0x300>)
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	4606      	mov	r6, r0
 80036bc:	460f      	mov	r7, r1
 80036be:	f7fc fd87 	bl	80001d0 <__aeabi_dsub>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4680      	mov	r8, r0
 80036c8:	4689      	mov	r9, r1
 80036ca:	4630      	mov	r0, r6
 80036cc:	4639      	mov	r1, r7
 80036ce:	f7fc fd7f 	bl	80001d0 <__aeabi_dsub>
 80036d2:	a395      	add	r3, pc, #596	@ (adr r3, 8003928 <__ieee754_rem_pio2+0x300>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	e7dc      	b.n	8003694 <__ieee754_rem_pio2+0x6c>
 80036da:	f7fc fd7b 	bl	80001d4 <__adddf3>
 80036de:	45a8      	cmp	r8, r5
 80036e0:	4606      	mov	r6, r0
 80036e2:	460f      	mov	r7, r1
 80036e4:	d018      	beq.n	8003718 <__ieee754_rem_pio2+0xf0>
 80036e6:	a38c      	add	r3, pc, #560	@ (adr r3, 8003918 <__ieee754_rem_pio2+0x2f0>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f7fc fd72 	bl	80001d4 <__adddf3>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4680      	mov	r8, r0
 80036f6:	4689      	mov	r9, r1
 80036f8:	4630      	mov	r0, r6
 80036fa:	4639      	mov	r1, r7
 80036fc:	f7fc fd68 	bl	80001d0 <__aeabi_dsub>
 8003700:	a385      	add	r3, pc, #532	@ (adr r3, 8003918 <__ieee754_rem_pio2+0x2f0>)
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f7fc fd65 	bl	80001d4 <__adddf3>
 800370a:	f04f 35ff 	mov.w	r5, #4294967295
 800370e:	e9c4 8900 	strd	r8, r9, [r4]
 8003712:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003716:	e7c4      	b.n	80036a2 <__ieee754_rem_pio2+0x7a>
 8003718:	a381      	add	r3, pc, #516	@ (adr r3, 8003920 <__ieee754_rem_pio2+0x2f8>)
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f7fc fd59 	bl	80001d4 <__adddf3>
 8003722:	a381      	add	r3, pc, #516	@ (adr r3, 8003928 <__ieee754_rem_pio2+0x300>)
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	4606      	mov	r6, r0
 800372a:	460f      	mov	r7, r1
 800372c:	f7fc fd52 	bl	80001d4 <__adddf3>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4680      	mov	r8, r0
 8003736:	4689      	mov	r9, r1
 8003738:	4630      	mov	r0, r6
 800373a:	4639      	mov	r1, r7
 800373c:	f7fc fd48 	bl	80001d0 <__aeabi_dsub>
 8003740:	a379      	add	r3, pc, #484	@ (adr r3, 8003928 <__ieee754_rem_pio2+0x300>)
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	e7de      	b.n	8003706 <__ieee754_rem_pio2+0xde>
 8003748:	4b82      	ldr	r3, [pc, #520]	@ (8003954 <__ieee754_rem_pio2+0x32c>)
 800374a:	4598      	cmp	r8, r3
 800374c:	f200 80d1 	bhi.w	80038f2 <__ieee754_rem_pio2+0x2ca>
 8003750:	f000 f966 	bl	8003a20 <fabs>
 8003754:	ec57 6b10 	vmov	r6, r7, d0
 8003758:	a375      	add	r3, pc, #468	@ (adr r3, 8003930 <__ieee754_rem_pio2+0x308>)
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	4630      	mov	r0, r6
 8003760:	4639      	mov	r1, r7
 8003762:	f7fc feed 	bl	8000540 <__aeabi_dmul>
 8003766:	4b7c      	ldr	r3, [pc, #496]	@ (8003958 <__ieee754_rem_pio2+0x330>)
 8003768:	2200      	movs	r2, #0
 800376a:	f7fc fd33 	bl	80001d4 <__adddf3>
 800376e:	f7fd f997 	bl	8000aa0 <__aeabi_d2iz>
 8003772:	4605      	mov	r5, r0
 8003774:	f7fc fe7a 	bl	800046c <__aeabi_i2d>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003780:	a363      	add	r3, pc, #396	@ (adr r3, 8003910 <__ieee754_rem_pio2+0x2e8>)
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f7fc fedb 	bl	8000540 <__aeabi_dmul>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4630      	mov	r0, r6
 8003790:	4639      	mov	r1, r7
 8003792:	f7fc fd1d 	bl	80001d0 <__aeabi_dsub>
 8003796:	a360      	add	r3, pc, #384	@ (adr r3, 8003918 <__ieee754_rem_pio2+0x2f0>)
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	4682      	mov	sl, r0
 800379e:	468b      	mov	fp, r1
 80037a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037a4:	f7fc fecc 	bl	8000540 <__aeabi_dmul>
 80037a8:	2d1f      	cmp	r5, #31
 80037aa:	4606      	mov	r6, r0
 80037ac:	460f      	mov	r7, r1
 80037ae:	dc0c      	bgt.n	80037ca <__ieee754_rem_pio2+0x1a2>
 80037b0:	4b6a      	ldr	r3, [pc, #424]	@ (800395c <__ieee754_rem_pio2+0x334>)
 80037b2:	1e6a      	subs	r2, r5, #1
 80037b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b8:	4543      	cmp	r3, r8
 80037ba:	d006      	beq.n	80037ca <__ieee754_rem_pio2+0x1a2>
 80037bc:	4632      	mov	r2, r6
 80037be:	463b      	mov	r3, r7
 80037c0:	4650      	mov	r0, sl
 80037c2:	4659      	mov	r1, fp
 80037c4:	f7fc fd04 	bl	80001d0 <__aeabi_dsub>
 80037c8:	e00e      	b.n	80037e8 <__ieee754_rem_pio2+0x1c0>
 80037ca:	463b      	mov	r3, r7
 80037cc:	4632      	mov	r2, r6
 80037ce:	4650      	mov	r0, sl
 80037d0:	4659      	mov	r1, fp
 80037d2:	f7fc fcfd 	bl	80001d0 <__aeabi_dsub>
 80037d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80037da:	9305      	str	r3, [sp, #20]
 80037dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80037e0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	dc02      	bgt.n	80037ee <__ieee754_rem_pio2+0x1c6>
 80037e8:	e9c4 0100 	strd	r0, r1, [r4]
 80037ec:	e039      	b.n	8003862 <__ieee754_rem_pio2+0x23a>
 80037ee:	a34c      	add	r3, pc, #304	@ (adr r3, 8003920 <__ieee754_rem_pio2+0x2f8>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037f8:	f7fc fea2 	bl	8000540 <__aeabi_dmul>
 80037fc:	4606      	mov	r6, r0
 80037fe:	460f      	mov	r7, r1
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4650      	mov	r0, sl
 8003806:	4659      	mov	r1, fp
 8003808:	f7fc fce2 	bl	80001d0 <__aeabi_dsub>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4680      	mov	r8, r0
 8003812:	4689      	mov	r9, r1
 8003814:	4650      	mov	r0, sl
 8003816:	4659      	mov	r1, fp
 8003818:	f7fc fcda 	bl	80001d0 <__aeabi_dsub>
 800381c:	4632      	mov	r2, r6
 800381e:	463b      	mov	r3, r7
 8003820:	f7fc fcd6 	bl	80001d0 <__aeabi_dsub>
 8003824:	a340      	add	r3, pc, #256	@ (adr r3, 8003928 <__ieee754_rem_pio2+0x300>)
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	4606      	mov	r6, r0
 800382c:	460f      	mov	r7, r1
 800382e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003832:	f7fc fe85 	bl	8000540 <__aeabi_dmul>
 8003836:	4632      	mov	r2, r6
 8003838:	463b      	mov	r3, r7
 800383a:	f7fc fcc9 	bl	80001d0 <__aeabi_dsub>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4606      	mov	r6, r0
 8003844:	460f      	mov	r7, r1
 8003846:	4640      	mov	r0, r8
 8003848:	4649      	mov	r1, r9
 800384a:	f7fc fcc1 	bl	80001d0 <__aeabi_dsub>
 800384e:	9a05      	ldr	r2, [sp, #20]
 8003850:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b31      	cmp	r3, #49	@ 0x31
 8003858:	dc20      	bgt.n	800389c <__ieee754_rem_pio2+0x274>
 800385a:	e9c4 0100 	strd	r0, r1, [r4]
 800385e:	46c2      	mov	sl, r8
 8003860:	46cb      	mov	fp, r9
 8003862:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003866:	4650      	mov	r0, sl
 8003868:	4642      	mov	r2, r8
 800386a:	464b      	mov	r3, r9
 800386c:	4659      	mov	r1, fp
 800386e:	f7fc fcaf 	bl	80001d0 <__aeabi_dsub>
 8003872:	463b      	mov	r3, r7
 8003874:	4632      	mov	r2, r6
 8003876:	f7fc fcab 	bl	80001d0 <__aeabi_dsub>
 800387a:	9b04      	ldr	r3, [sp, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003882:	f6bf af0e 	bge.w	80036a2 <__ieee754_rem_pio2+0x7a>
 8003886:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800388a:	6063      	str	r3, [r4, #4]
 800388c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003890:	f8c4 8000 	str.w	r8, [r4]
 8003894:	60a0      	str	r0, [r4, #8]
 8003896:	60e3      	str	r3, [r4, #12]
 8003898:	426d      	negs	r5, r5
 800389a:	e702      	b.n	80036a2 <__ieee754_rem_pio2+0x7a>
 800389c:	a326      	add	r3, pc, #152	@ (adr r3, 8003938 <__ieee754_rem_pio2+0x310>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038a6:	f7fc fe4b 	bl	8000540 <__aeabi_dmul>
 80038aa:	4606      	mov	r6, r0
 80038ac:	460f      	mov	r7, r1
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4640      	mov	r0, r8
 80038b4:	4649      	mov	r1, r9
 80038b6:	f7fc fc8b 	bl	80001d0 <__aeabi_dsub>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4682      	mov	sl, r0
 80038c0:	468b      	mov	fp, r1
 80038c2:	4640      	mov	r0, r8
 80038c4:	4649      	mov	r1, r9
 80038c6:	f7fc fc83 	bl	80001d0 <__aeabi_dsub>
 80038ca:	4632      	mov	r2, r6
 80038cc:	463b      	mov	r3, r7
 80038ce:	f7fc fc7f 	bl	80001d0 <__aeabi_dsub>
 80038d2:	a31b      	add	r3, pc, #108	@ (adr r3, 8003940 <__ieee754_rem_pio2+0x318>)
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	4606      	mov	r6, r0
 80038da:	460f      	mov	r7, r1
 80038dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038e0:	f7fc fe2e 	bl	8000540 <__aeabi_dmul>
 80038e4:	4632      	mov	r2, r6
 80038e6:	463b      	mov	r3, r7
 80038e8:	f7fc fc72 	bl	80001d0 <__aeabi_dsub>
 80038ec:	4606      	mov	r6, r0
 80038ee:	460f      	mov	r7, r1
 80038f0:	e764      	b.n	80037bc <__ieee754_rem_pio2+0x194>
 80038f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003960 <__ieee754_rem_pio2+0x338>)
 80038f4:	4598      	cmp	r8, r3
 80038f6:	d935      	bls.n	8003964 <__ieee754_rem_pio2+0x33c>
 80038f8:	4632      	mov	r2, r6
 80038fa:	463b      	mov	r3, r7
 80038fc:	4630      	mov	r0, r6
 80038fe:	4639      	mov	r1, r7
 8003900:	f7fc fc66 	bl	80001d0 <__aeabi_dsub>
 8003904:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003908:	e9c4 0100 	strd	r0, r1, [r4]
 800390c:	e69e      	b.n	800364c <__ieee754_rem_pio2+0x24>
 800390e:	bf00      	nop
 8003910:	54400000 	.word	0x54400000
 8003914:	3ff921fb 	.word	0x3ff921fb
 8003918:	1a626331 	.word	0x1a626331
 800391c:	3dd0b461 	.word	0x3dd0b461
 8003920:	1a600000 	.word	0x1a600000
 8003924:	3dd0b461 	.word	0x3dd0b461
 8003928:	2e037073 	.word	0x2e037073
 800392c:	3ba3198a 	.word	0x3ba3198a
 8003930:	6dc9c883 	.word	0x6dc9c883
 8003934:	3fe45f30 	.word	0x3fe45f30
 8003938:	2e000000 	.word	0x2e000000
 800393c:	3ba3198a 	.word	0x3ba3198a
 8003940:	252049c1 	.word	0x252049c1
 8003944:	397b839a 	.word	0x397b839a
 8003948:	3fe921fb 	.word	0x3fe921fb
 800394c:	4002d97b 	.word	0x4002d97b
 8003950:	3ff921fb 	.word	0x3ff921fb
 8003954:	413921fb 	.word	0x413921fb
 8003958:	3fe00000 	.word	0x3fe00000
 800395c:	080073b8 	.word	0x080073b8
 8003960:	7fefffff 	.word	0x7fefffff
 8003964:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003968:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800396c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003970:	4630      	mov	r0, r6
 8003972:	460f      	mov	r7, r1
 8003974:	f7fd f894 	bl	8000aa0 <__aeabi_d2iz>
 8003978:	f7fc fd78 	bl	800046c <__aeabi_i2d>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4630      	mov	r0, r6
 8003982:	4639      	mov	r1, r7
 8003984:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003988:	f7fc fc22 	bl	80001d0 <__aeabi_dsub>
 800398c:	4b22      	ldr	r3, [pc, #136]	@ (8003a18 <__ieee754_rem_pio2+0x3f0>)
 800398e:	2200      	movs	r2, #0
 8003990:	f7fc fdd6 	bl	8000540 <__aeabi_dmul>
 8003994:	460f      	mov	r7, r1
 8003996:	4606      	mov	r6, r0
 8003998:	f7fd f882 	bl	8000aa0 <__aeabi_d2iz>
 800399c:	f7fc fd66 	bl	800046c <__aeabi_i2d>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4630      	mov	r0, r6
 80039a6:	4639      	mov	r1, r7
 80039a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80039ac:	f7fc fc10 	bl	80001d0 <__aeabi_dsub>
 80039b0:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <__ieee754_rem_pio2+0x3f0>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	f7fc fdc4 	bl	8000540 <__aeabi_dmul>
 80039b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80039bc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80039c0:	f04f 0803 	mov.w	r8, #3
 80039c4:	2600      	movs	r6, #0
 80039c6:	2700      	movs	r7, #0
 80039c8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80039cc:	4632      	mov	r2, r6
 80039ce:	463b      	mov	r3, r7
 80039d0:	46c2      	mov	sl, r8
 80039d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80039d6:	f7fd f81b 	bl	8000a10 <__aeabi_dcmpeq>
 80039da:	2800      	cmp	r0, #0
 80039dc:	d1f4      	bne.n	80039c8 <__ieee754_rem_pio2+0x3a0>
 80039de:	4b0f      	ldr	r3, [pc, #60]	@ (8003a1c <__ieee754_rem_pio2+0x3f4>)
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	2302      	movs	r3, #2
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	462a      	mov	r2, r5
 80039e8:	4653      	mov	r3, sl
 80039ea:	4621      	mov	r1, r4
 80039ec:	a806      	add	r0, sp, #24
 80039ee:	f000 f81f 	bl	8003a30 <__kernel_rem_pio2>
 80039f2:	9b04      	ldr	r3, [sp, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	4605      	mov	r5, r0
 80039f8:	f6bf ae53 	bge.w	80036a2 <__ieee754_rem_pio2+0x7a>
 80039fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003a00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003a04:	e9c4 2300 	strd	r2, r3, [r4]
 8003a08:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003a0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003a10:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003a14:	e740      	b.n	8003898 <__ieee754_rem_pio2+0x270>
 8003a16:	bf00      	nop
 8003a18:	41700000 	.word	0x41700000
 8003a1c:	08007438 	.word	0x08007438

08003a20 <fabs>:
 8003a20:	ec51 0b10 	vmov	r0, r1, d0
 8003a24:	4602      	mov	r2, r0
 8003a26:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003a2a:	ec43 2b10 	vmov	d0, r2, r3
 8003a2e:	4770      	bx	lr

08003a30 <__kernel_rem_pio2>:
 8003a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a34:	ed2d 8b02 	vpush	{d8}
 8003a38:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003a3c:	f112 0f14 	cmn.w	r2, #20
 8003a40:	9306      	str	r3, [sp, #24]
 8003a42:	9104      	str	r1, [sp, #16]
 8003a44:	4bbe      	ldr	r3, [pc, #760]	@ (8003d40 <__kernel_rem_pio2+0x310>)
 8003a46:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003a48:	9008      	str	r0, [sp, #32]
 8003a4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	9b06      	ldr	r3, [sp, #24]
 8003a52:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a56:	bfa8      	it	ge
 8003a58:	1ed4      	subge	r4, r2, #3
 8003a5a:	9305      	str	r3, [sp, #20]
 8003a5c:	bfb2      	itee	lt
 8003a5e:	2400      	movlt	r4, #0
 8003a60:	2318      	movge	r3, #24
 8003a62:	fb94 f4f3 	sdivge	r4, r4, r3
 8003a66:	f06f 0317 	mvn.w	r3, #23
 8003a6a:	fb04 3303 	mla	r3, r4, r3, r3
 8003a6e:	eb03 0b02 	add.w	fp, r3, r2
 8003a72:	9b00      	ldr	r3, [sp, #0]
 8003a74:	9a05      	ldr	r2, [sp, #20]
 8003a76:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8003d30 <__kernel_rem_pio2+0x300>
 8003a7a:	eb03 0802 	add.w	r8, r3, r2
 8003a7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003a80:	1aa7      	subs	r7, r4, r2
 8003a82:	ae20      	add	r6, sp, #128	@ 0x80
 8003a84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003a88:	2500      	movs	r5, #0
 8003a8a:	4545      	cmp	r5, r8
 8003a8c:	dd13      	ble.n	8003ab6 <__kernel_rem_pio2+0x86>
 8003a8e:	9b06      	ldr	r3, [sp, #24]
 8003a90:	aa20      	add	r2, sp, #128	@ 0x80
 8003a92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003a96:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8003a9a:	f04f 0800 	mov.w	r8, #0
 8003a9e:	9b00      	ldr	r3, [sp, #0]
 8003aa0:	4598      	cmp	r8, r3
 8003aa2:	dc31      	bgt.n	8003b08 <__kernel_rem_pio2+0xd8>
 8003aa4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8003d30 <__kernel_rem_pio2+0x300>
 8003aa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003aac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003ab0:	462f      	mov	r7, r5
 8003ab2:	2600      	movs	r6, #0
 8003ab4:	e01b      	b.n	8003aee <__kernel_rem_pio2+0xbe>
 8003ab6:	42ef      	cmn	r7, r5
 8003ab8:	d407      	bmi.n	8003aca <__kernel_rem_pio2+0x9a>
 8003aba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003abe:	f7fc fcd5 	bl	800046c <__aeabi_i2d>
 8003ac2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003ac6:	3501      	adds	r5, #1
 8003ac8:	e7df      	b.n	8003a8a <__kernel_rem_pio2+0x5a>
 8003aca:	ec51 0b18 	vmov	r0, r1, d8
 8003ace:	e7f8      	b.n	8003ac2 <__kernel_rem_pio2+0x92>
 8003ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ad4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003ad8:	f7fc fd32 	bl	8000540 <__aeabi_dmul>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ae4:	f7fc fb76 	bl	80001d4 <__adddf3>
 8003ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003aec:	3601      	adds	r6, #1
 8003aee:	9b05      	ldr	r3, [sp, #20]
 8003af0:	429e      	cmp	r6, r3
 8003af2:	f1a7 0708 	sub.w	r7, r7, #8
 8003af6:	ddeb      	ble.n	8003ad0 <__kernel_rem_pio2+0xa0>
 8003af8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003afc:	f108 0801 	add.w	r8, r8, #1
 8003b00:	ecaa 7b02 	vstmia	sl!, {d7}
 8003b04:	3508      	adds	r5, #8
 8003b06:	e7ca      	b.n	8003a9e <__kernel_rem_pio2+0x6e>
 8003b08:	9b00      	ldr	r3, [sp, #0]
 8003b0a:	f8dd 8000 	ldr.w	r8, [sp]
 8003b0e:	aa0c      	add	r2, sp, #48	@ 0x30
 8003b10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003b14:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003b18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b1e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003b22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b24:	ab98      	add	r3, sp, #608	@ 0x260
 8003b26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003b2a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8003b2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003b32:	ac0c      	add	r4, sp, #48	@ 0x30
 8003b34:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003b36:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8003b3a:	46a1      	mov	r9, r4
 8003b3c:	46c2      	mov	sl, r8
 8003b3e:	f1ba 0f00 	cmp.w	sl, #0
 8003b42:	f1a5 0508 	sub.w	r5, r5, #8
 8003b46:	dc77      	bgt.n	8003c38 <__kernel_rem_pio2+0x208>
 8003b48:	4658      	mov	r0, fp
 8003b4a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003b4e:	f000 fac7 	bl	80040e0 <scalbn>
 8003b52:	ec57 6b10 	vmov	r6, r7, d0
 8003b56:	2200      	movs	r2, #0
 8003b58:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	4639      	mov	r1, r7
 8003b60:	f7fc fcee 	bl	8000540 <__aeabi_dmul>
 8003b64:	ec41 0b10 	vmov	d0, r0, r1
 8003b68:	f000 fb3a 	bl	80041e0 <floor>
 8003b6c:	4b75      	ldr	r3, [pc, #468]	@ (8003d44 <__kernel_rem_pio2+0x314>)
 8003b6e:	ec51 0b10 	vmov	r0, r1, d0
 8003b72:	2200      	movs	r2, #0
 8003b74:	f7fc fce4 	bl	8000540 <__aeabi_dmul>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	4639      	mov	r1, r7
 8003b80:	f7fc fb26 	bl	80001d0 <__aeabi_dsub>
 8003b84:	460f      	mov	r7, r1
 8003b86:	4606      	mov	r6, r0
 8003b88:	f7fc ff8a 	bl	8000aa0 <__aeabi_d2iz>
 8003b8c:	9002      	str	r0, [sp, #8]
 8003b8e:	f7fc fc6d 	bl	800046c <__aeabi_i2d>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4630      	mov	r0, r6
 8003b98:	4639      	mov	r1, r7
 8003b9a:	f7fc fb19 	bl	80001d0 <__aeabi_dsub>
 8003b9e:	f1bb 0f00 	cmp.w	fp, #0
 8003ba2:	4606      	mov	r6, r0
 8003ba4:	460f      	mov	r7, r1
 8003ba6:	dd6c      	ble.n	8003c82 <__kernel_rem_pio2+0x252>
 8003ba8:	f108 31ff 	add.w	r1, r8, #4294967295
 8003bac:	ab0c      	add	r3, sp, #48	@ 0x30
 8003bae:	9d02      	ldr	r5, [sp, #8]
 8003bb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bb4:	f1cb 0018 	rsb	r0, fp, #24
 8003bb8:	fa43 f200 	asr.w	r2, r3, r0
 8003bbc:	4415      	add	r5, r2
 8003bbe:	4082      	lsls	r2, r0
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	aa0c      	add	r2, sp, #48	@ 0x30
 8003bc4:	9502      	str	r5, [sp, #8]
 8003bc6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003bca:	f1cb 0217 	rsb	r2, fp, #23
 8003bce:	fa43 f902 	asr.w	r9, r3, r2
 8003bd2:	f1b9 0f00 	cmp.w	r9, #0
 8003bd6:	dd64      	ble.n	8003ca2 <__kernel_rem_pio2+0x272>
 8003bd8:	9b02      	ldr	r3, [sp, #8]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	3301      	adds	r3, #1
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	4615      	mov	r5, r2
 8003be2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8003be6:	4590      	cmp	r8, r2
 8003be8:	f300 80b8 	bgt.w	8003d5c <__kernel_rem_pio2+0x32c>
 8003bec:	f1bb 0f00 	cmp.w	fp, #0
 8003bf0:	dd07      	ble.n	8003c02 <__kernel_rem_pio2+0x1d2>
 8003bf2:	f1bb 0f01 	cmp.w	fp, #1
 8003bf6:	f000 80bf 	beq.w	8003d78 <__kernel_rem_pio2+0x348>
 8003bfa:	f1bb 0f02 	cmp.w	fp, #2
 8003bfe:	f000 80c6 	beq.w	8003d8e <__kernel_rem_pio2+0x35e>
 8003c02:	f1b9 0f02 	cmp.w	r9, #2
 8003c06:	d14c      	bne.n	8003ca2 <__kernel_rem_pio2+0x272>
 8003c08:	4632      	mov	r2, r6
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	494e      	ldr	r1, [pc, #312]	@ (8003d48 <__kernel_rem_pio2+0x318>)
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f7fc fade 	bl	80001d0 <__aeabi_dsub>
 8003c14:	4606      	mov	r6, r0
 8003c16:	460f      	mov	r7, r1
 8003c18:	2d00      	cmp	r5, #0
 8003c1a:	d042      	beq.n	8003ca2 <__kernel_rem_pio2+0x272>
 8003c1c:	4658      	mov	r0, fp
 8003c1e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8003d38 <__kernel_rem_pio2+0x308>
 8003c22:	f000 fa5d 	bl	80040e0 <scalbn>
 8003c26:	4630      	mov	r0, r6
 8003c28:	4639      	mov	r1, r7
 8003c2a:	ec53 2b10 	vmov	r2, r3, d0
 8003c2e:	f7fc facf 	bl	80001d0 <__aeabi_dsub>
 8003c32:	4606      	mov	r6, r0
 8003c34:	460f      	mov	r7, r1
 8003c36:	e034      	b.n	8003ca2 <__kernel_rem_pio2+0x272>
 8003c38:	4b44      	ldr	r3, [pc, #272]	@ (8003d4c <__kernel_rem_pio2+0x31c>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c40:	f7fc fc7e 	bl	8000540 <__aeabi_dmul>
 8003c44:	f7fc ff2c 	bl	8000aa0 <__aeabi_d2iz>
 8003c48:	f7fc fc10 	bl	800046c <__aeabi_i2d>
 8003c4c:	4b40      	ldr	r3, [pc, #256]	@ (8003d50 <__kernel_rem_pio2+0x320>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	4606      	mov	r6, r0
 8003c52:	460f      	mov	r7, r1
 8003c54:	f7fc fc74 	bl	8000540 <__aeabi_dmul>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c60:	f7fc fab6 	bl	80001d0 <__aeabi_dsub>
 8003c64:	f7fc ff1c 	bl	8000aa0 <__aeabi_d2iz>
 8003c68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c6c:	f849 0b04 	str.w	r0, [r9], #4
 8003c70:	4639      	mov	r1, r7
 8003c72:	4630      	mov	r0, r6
 8003c74:	f7fc faae 	bl	80001d4 <__adddf3>
 8003c78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c80:	e75d      	b.n	8003b3e <__kernel_rem_pio2+0x10e>
 8003c82:	d107      	bne.n	8003c94 <__kernel_rem_pio2+0x264>
 8003c84:	f108 33ff 	add.w	r3, r8, #4294967295
 8003c88:	aa0c      	add	r2, sp, #48	@ 0x30
 8003c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8003c92:	e79e      	b.n	8003bd2 <__kernel_rem_pio2+0x1a2>
 8003c94:	4b2f      	ldr	r3, [pc, #188]	@ (8003d54 <__kernel_rem_pio2+0x324>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	f7fc fed8 	bl	8000a4c <__aeabi_dcmpge>
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d143      	bne.n	8003d28 <__kernel_rem_pio2+0x2f8>
 8003ca0:	4681      	mov	r9, r0
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	4639      	mov	r1, r7
 8003caa:	f7fc feb1 	bl	8000a10 <__aeabi_dcmpeq>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	f000 80bf 	beq.w	8003e32 <__kernel_rem_pio2+0x402>
 8003cb4:	f108 33ff 	add.w	r3, r8, #4294967295
 8003cb8:	2200      	movs	r2, #0
 8003cba:	9900      	ldr	r1, [sp, #0]
 8003cbc:	428b      	cmp	r3, r1
 8003cbe:	da6e      	bge.n	8003d9e <__kernel_rem_pio2+0x36e>
 8003cc0:	2a00      	cmp	r2, #0
 8003cc2:	f000 8089 	beq.w	8003dd8 <__kernel_rem_pio2+0x3a8>
 8003cc6:	f108 38ff 	add.w	r8, r8, #4294967295
 8003cca:	ab0c      	add	r3, sp, #48	@ 0x30
 8003ccc:	f1ab 0b18 	sub.w	fp, fp, #24
 8003cd0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f6      	beq.n	8003cc6 <__kernel_rem_pio2+0x296>
 8003cd8:	4658      	mov	r0, fp
 8003cda:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8003d38 <__kernel_rem_pio2+0x308>
 8003cde:	f000 f9ff 	bl	80040e0 <scalbn>
 8003ce2:	f108 0301 	add.w	r3, r8, #1
 8003ce6:	00da      	lsls	r2, r3, #3
 8003ce8:	9205      	str	r2, [sp, #20]
 8003cea:	ec55 4b10 	vmov	r4, r5, d0
 8003cee:	aa70      	add	r2, sp, #448	@ 0x1c0
 8003cf0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8003d4c <__kernel_rem_pio2+0x31c>
 8003cf4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8003cf8:	4646      	mov	r6, r8
 8003cfa:	f04f 0a00 	mov.w	sl, #0
 8003cfe:	2e00      	cmp	r6, #0
 8003d00:	f280 80cf 	bge.w	8003ea2 <__kernel_rem_pio2+0x472>
 8003d04:	4644      	mov	r4, r8
 8003d06:	2c00      	cmp	r4, #0
 8003d08:	f2c0 80fd 	blt.w	8003f06 <__kernel_rem_pio2+0x4d6>
 8003d0c:	4b12      	ldr	r3, [pc, #72]	@ (8003d58 <__kernel_rem_pio2+0x328>)
 8003d0e:	461f      	mov	r7, r3
 8003d10:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003d12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003d16:	9306      	str	r3, [sp, #24]
 8003d18:	f04f 0a00 	mov.w	sl, #0
 8003d1c:	f04f 0b00 	mov.w	fp, #0
 8003d20:	2600      	movs	r6, #0
 8003d22:	eba8 0504 	sub.w	r5, r8, r4
 8003d26:	e0e2      	b.n	8003eee <__kernel_rem_pio2+0x4be>
 8003d28:	f04f 0902 	mov.w	r9, #2
 8003d2c:	e754      	b.n	8003bd8 <__kernel_rem_pio2+0x1a8>
 8003d2e:	bf00      	nop
	...
 8003d3c:	3ff00000 	.word	0x3ff00000
 8003d40:	08007580 	.word	0x08007580
 8003d44:	40200000 	.word	0x40200000
 8003d48:	3ff00000 	.word	0x3ff00000
 8003d4c:	3e700000 	.word	0x3e700000
 8003d50:	41700000 	.word	0x41700000
 8003d54:	3fe00000 	.word	0x3fe00000
 8003d58:	08007540 	.word	0x08007540
 8003d5c:	f854 3b04 	ldr.w	r3, [r4], #4
 8003d60:	b945      	cbnz	r5, 8003d74 <__kernel_rem_pio2+0x344>
 8003d62:	b123      	cbz	r3, 8003d6e <__kernel_rem_pio2+0x33e>
 8003d64:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8003d68:	f844 3c04 	str.w	r3, [r4, #-4]
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	3201      	adds	r2, #1
 8003d70:	461d      	mov	r5, r3
 8003d72:	e738      	b.n	8003be6 <__kernel_rem_pio2+0x1b6>
 8003d74:	1acb      	subs	r3, r1, r3
 8003d76:	e7f7      	b.n	8003d68 <__kernel_rem_pio2+0x338>
 8003d78:	f108 32ff 	add.w	r2, r8, #4294967295
 8003d7c:	ab0c      	add	r3, sp, #48	@ 0x30
 8003d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d82:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003d86:	a90c      	add	r1, sp, #48	@ 0x30
 8003d88:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003d8c:	e739      	b.n	8003c02 <__kernel_rem_pio2+0x1d2>
 8003d8e:	f108 32ff 	add.w	r2, r8, #4294967295
 8003d92:	ab0c      	add	r3, sp, #48	@ 0x30
 8003d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003d9c:	e7f3      	b.n	8003d86 <__kernel_rem_pio2+0x356>
 8003d9e:	a90c      	add	r1, sp, #48	@ 0x30
 8003da0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	430a      	orrs	r2, r1
 8003da8:	e787      	b.n	8003cba <__kernel_rem_pio2+0x28a>
 8003daa:	3401      	adds	r4, #1
 8003dac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003db0:	2a00      	cmp	r2, #0
 8003db2:	d0fa      	beq.n	8003daa <__kernel_rem_pio2+0x37a>
 8003db4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003db6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003dba:	eb0d 0503 	add.w	r5, sp, r3
 8003dbe:	9b06      	ldr	r3, [sp, #24]
 8003dc0:	aa20      	add	r2, sp, #128	@ 0x80
 8003dc2:	4443      	add	r3, r8
 8003dc4:	f108 0701 	add.w	r7, r8, #1
 8003dc8:	3d98      	subs	r5, #152	@ 0x98
 8003dca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8003dce:	4444      	add	r4, r8
 8003dd0:	42bc      	cmp	r4, r7
 8003dd2:	da04      	bge.n	8003dde <__kernel_rem_pio2+0x3ae>
 8003dd4:	46a0      	mov	r8, r4
 8003dd6:	e6a2      	b.n	8003b1e <__kernel_rem_pio2+0xee>
 8003dd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003dda:	2401      	movs	r4, #1
 8003ddc:	e7e6      	b.n	8003dac <__kernel_rem_pio2+0x37c>
 8003dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003de0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003de4:	f7fc fb42 	bl	800046c <__aeabi_i2d>
 8003de8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80040b0 <__kernel_rem_pio2+0x680>
 8003dec:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003df0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003df4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003df8:	46b2      	mov	sl, r6
 8003dfa:	f04f 0800 	mov.w	r8, #0
 8003dfe:	9b05      	ldr	r3, [sp, #20]
 8003e00:	4598      	cmp	r8, r3
 8003e02:	dd05      	ble.n	8003e10 <__kernel_rem_pio2+0x3e0>
 8003e04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003e08:	3701      	adds	r7, #1
 8003e0a:	eca5 7b02 	vstmia	r5!, {d7}
 8003e0e:	e7df      	b.n	8003dd0 <__kernel_rem_pio2+0x3a0>
 8003e10:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8003e14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003e18:	f7fc fb92 	bl	8000540 <__aeabi_dmul>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e24:	f7fc f9d6 	bl	80001d4 <__adddf3>
 8003e28:	f108 0801 	add.w	r8, r8, #1
 8003e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e30:	e7e5      	b.n	8003dfe <__kernel_rem_pio2+0x3ce>
 8003e32:	f1cb 0000 	rsb	r0, fp, #0
 8003e36:	ec47 6b10 	vmov	d0, r6, r7
 8003e3a:	f000 f951 	bl	80040e0 <scalbn>
 8003e3e:	ec55 4b10 	vmov	r4, r5, d0
 8003e42:	4b9d      	ldr	r3, [pc, #628]	@ (80040b8 <__kernel_rem_pio2+0x688>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	4620      	mov	r0, r4
 8003e48:	4629      	mov	r1, r5
 8003e4a:	f7fc fdff 	bl	8000a4c <__aeabi_dcmpge>
 8003e4e:	b300      	cbz	r0, 8003e92 <__kernel_rem_pio2+0x462>
 8003e50:	4b9a      	ldr	r3, [pc, #616]	@ (80040bc <__kernel_rem_pio2+0x68c>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	4620      	mov	r0, r4
 8003e56:	4629      	mov	r1, r5
 8003e58:	f7fc fb72 	bl	8000540 <__aeabi_dmul>
 8003e5c:	f7fc fe20 	bl	8000aa0 <__aeabi_d2iz>
 8003e60:	4606      	mov	r6, r0
 8003e62:	f7fc fb03 	bl	800046c <__aeabi_i2d>
 8003e66:	4b94      	ldr	r3, [pc, #592]	@ (80040b8 <__kernel_rem_pio2+0x688>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f7fc fb69 	bl	8000540 <__aeabi_dmul>
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4602      	mov	r2, r0
 8003e72:	4629      	mov	r1, r5
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7fc f9ab 	bl	80001d0 <__aeabi_dsub>
 8003e7a:	f7fc fe11 	bl	8000aa0 <__aeabi_d2iz>
 8003e7e:	ab0c      	add	r3, sp, #48	@ 0x30
 8003e80:	f10b 0b18 	add.w	fp, fp, #24
 8003e84:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003e88:	f108 0801 	add.w	r8, r8, #1
 8003e8c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8003e90:	e722      	b.n	8003cd8 <__kernel_rem_pio2+0x2a8>
 8003e92:	4620      	mov	r0, r4
 8003e94:	4629      	mov	r1, r5
 8003e96:	f7fc fe03 	bl	8000aa0 <__aeabi_d2iz>
 8003e9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8003e9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003ea0:	e71a      	b.n	8003cd8 <__kernel_rem_pio2+0x2a8>
 8003ea2:	ab0c      	add	r3, sp, #48	@ 0x30
 8003ea4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003ea8:	f7fc fae0 	bl	800046c <__aeabi_i2d>
 8003eac:	4622      	mov	r2, r4
 8003eae:	462b      	mov	r3, r5
 8003eb0:	f7fc fb46 	bl	8000540 <__aeabi_dmul>
 8003eb4:	4652      	mov	r2, sl
 8003eb6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8003eba:	465b      	mov	r3, fp
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f7fc fb3e 	bl	8000540 <__aeabi_dmul>
 8003ec4:	3e01      	subs	r6, #1
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	460d      	mov	r5, r1
 8003eca:	e718      	b.n	8003cfe <__kernel_rem_pio2+0x2ce>
 8003ecc:	9906      	ldr	r1, [sp, #24]
 8003ece:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8003ed2:	9106      	str	r1, [sp, #24]
 8003ed4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8003ed8:	f7fc fb32 	bl	8000540 <__aeabi_dmul>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4650      	mov	r0, sl
 8003ee2:	4659      	mov	r1, fp
 8003ee4:	f7fc f976 	bl	80001d4 <__adddf3>
 8003ee8:	3601      	adds	r6, #1
 8003eea:	4682      	mov	sl, r0
 8003eec:	468b      	mov	fp, r1
 8003eee:	9b00      	ldr	r3, [sp, #0]
 8003ef0:	429e      	cmp	r6, r3
 8003ef2:	dc01      	bgt.n	8003ef8 <__kernel_rem_pio2+0x4c8>
 8003ef4:	42b5      	cmp	r5, r6
 8003ef6:	dae9      	bge.n	8003ecc <__kernel_rem_pio2+0x49c>
 8003ef8:	ab48      	add	r3, sp, #288	@ 0x120
 8003efa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003efe:	e9c5 ab00 	strd	sl, fp, [r5]
 8003f02:	3c01      	subs	r4, #1
 8003f04:	e6ff      	b.n	8003d06 <__kernel_rem_pio2+0x2d6>
 8003f06:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	dc0b      	bgt.n	8003f24 <__kernel_rem_pio2+0x4f4>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	dc39      	bgt.n	8003f84 <__kernel_rem_pio2+0x554>
 8003f10:	d05d      	beq.n	8003fce <__kernel_rem_pio2+0x59e>
 8003f12:	9b02      	ldr	r3, [sp, #8]
 8003f14:	f003 0007 	and.w	r0, r3, #7
 8003f18:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8003f1c:	ecbd 8b02 	vpop	{d8}
 8003f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f24:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d1f3      	bne.n	8003f12 <__kernel_rem_pio2+0x4e2>
 8003f2a:	9b05      	ldr	r3, [sp, #20]
 8003f2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f30:	eb0d 0403 	add.w	r4, sp, r3
 8003f34:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8003f38:	4625      	mov	r5, r4
 8003f3a:	46c2      	mov	sl, r8
 8003f3c:	f1ba 0f00 	cmp.w	sl, #0
 8003f40:	f1a5 0508 	sub.w	r5, r5, #8
 8003f44:	dc6b      	bgt.n	800401e <__kernel_rem_pio2+0x5ee>
 8003f46:	4645      	mov	r5, r8
 8003f48:	2d01      	cmp	r5, #1
 8003f4a:	f1a4 0408 	sub.w	r4, r4, #8
 8003f4e:	f300 8087 	bgt.w	8004060 <__kernel_rem_pio2+0x630>
 8003f52:	9c05      	ldr	r4, [sp, #20]
 8003f54:	ab48      	add	r3, sp, #288	@ 0x120
 8003f56:	441c      	add	r4, r3
 8003f58:	2000      	movs	r0, #0
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	f1b8 0f01 	cmp.w	r8, #1
 8003f60:	f300 809c 	bgt.w	800409c <__kernel_rem_pio2+0x66c>
 8003f64:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8003f68:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8003f6c:	f1b9 0f00 	cmp.w	r9, #0
 8003f70:	f040 80a6 	bne.w	80040c0 <__kernel_rem_pio2+0x690>
 8003f74:	9b04      	ldr	r3, [sp, #16]
 8003f76:	e9c3 7800 	strd	r7, r8, [r3]
 8003f7a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003f7e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003f82:	e7c6      	b.n	8003f12 <__kernel_rem_pio2+0x4e2>
 8003f84:	9d05      	ldr	r5, [sp, #20]
 8003f86:	ab48      	add	r3, sp, #288	@ 0x120
 8003f88:	441d      	add	r5, r3
 8003f8a:	4644      	mov	r4, r8
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	2100      	movs	r1, #0
 8003f90:	2c00      	cmp	r4, #0
 8003f92:	da35      	bge.n	8004000 <__kernel_rem_pio2+0x5d0>
 8003f94:	f1b9 0f00 	cmp.w	r9, #0
 8003f98:	d038      	beq.n	800400c <__kernel_rem_pio2+0x5dc>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003fa0:	9c04      	ldr	r4, [sp, #16]
 8003fa2:	e9c4 2300 	strd	r2, r3, [r4]
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8003fae:	f7fc f90f 	bl	80001d0 <__aeabi_dsub>
 8003fb2:	ad4a      	add	r5, sp, #296	@ 0x128
 8003fb4:	2401      	movs	r4, #1
 8003fb6:	45a0      	cmp	r8, r4
 8003fb8:	da2b      	bge.n	8004012 <__kernel_rem_pio2+0x5e2>
 8003fba:	f1b9 0f00 	cmp.w	r9, #0
 8003fbe:	d002      	beq.n	8003fc6 <__kernel_rem_pio2+0x596>
 8003fc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	9b04      	ldr	r3, [sp, #16]
 8003fc8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003fcc:	e7a1      	b.n	8003f12 <__kernel_rem_pio2+0x4e2>
 8003fce:	9c05      	ldr	r4, [sp, #20]
 8003fd0:	ab48      	add	r3, sp, #288	@ 0x120
 8003fd2:	441c      	add	r4, r3
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	f1b8 0f00 	cmp.w	r8, #0
 8003fdc:	da09      	bge.n	8003ff2 <__kernel_rem_pio2+0x5c2>
 8003fde:	f1b9 0f00 	cmp.w	r9, #0
 8003fe2:	d002      	beq.n	8003fea <__kernel_rem_pio2+0x5ba>
 8003fe4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003fe8:	4619      	mov	r1, r3
 8003fea:	9b04      	ldr	r3, [sp, #16]
 8003fec:	e9c3 0100 	strd	r0, r1, [r3]
 8003ff0:	e78f      	b.n	8003f12 <__kernel_rem_pio2+0x4e2>
 8003ff2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003ff6:	f7fc f8ed 	bl	80001d4 <__adddf3>
 8003ffa:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ffe:	e7eb      	b.n	8003fd8 <__kernel_rem_pio2+0x5a8>
 8004000:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004004:	f7fc f8e6 	bl	80001d4 <__adddf3>
 8004008:	3c01      	subs	r4, #1
 800400a:	e7c1      	b.n	8003f90 <__kernel_rem_pio2+0x560>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	e7c6      	b.n	8003fa0 <__kernel_rem_pio2+0x570>
 8004012:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004016:	f7fc f8dd 	bl	80001d4 <__adddf3>
 800401a:	3401      	adds	r4, #1
 800401c:	e7cb      	b.n	8003fb6 <__kernel_rem_pio2+0x586>
 800401e:	ed95 7b00 	vldr	d7, [r5]
 8004022:	ed8d 7b00 	vstr	d7, [sp]
 8004026:	ed95 7b02 	vldr	d7, [r5, #8]
 800402a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800402e:	ec53 2b17 	vmov	r2, r3, d7
 8004032:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004036:	f7fc f8cd 	bl	80001d4 <__adddf3>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4606      	mov	r6, r0
 8004040:	460f      	mov	r7, r1
 8004042:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004046:	f7fc f8c3 	bl	80001d0 <__aeabi_dsub>
 800404a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800404e:	f7fc f8c1 	bl	80001d4 <__adddf3>
 8004052:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004056:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800405a:	e9c5 6700 	strd	r6, r7, [r5]
 800405e:	e76d      	b.n	8003f3c <__kernel_rem_pio2+0x50c>
 8004060:	ed94 7b00 	vldr	d7, [r4]
 8004064:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004068:	ec51 0b17 	vmov	r0, r1, d7
 800406c:	4652      	mov	r2, sl
 800406e:	465b      	mov	r3, fp
 8004070:	ed8d 7b00 	vstr	d7, [sp]
 8004074:	f7fc f8ae 	bl	80001d4 <__adddf3>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4606      	mov	r6, r0
 800407e:	460f      	mov	r7, r1
 8004080:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004084:	f7fc f8a4 	bl	80001d0 <__aeabi_dsub>
 8004088:	4652      	mov	r2, sl
 800408a:	465b      	mov	r3, fp
 800408c:	f7fc f8a2 	bl	80001d4 <__adddf3>
 8004090:	3d01      	subs	r5, #1
 8004092:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004096:	e9c4 6700 	strd	r6, r7, [r4]
 800409a:	e755      	b.n	8003f48 <__kernel_rem_pio2+0x518>
 800409c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80040a0:	f7fc f898 	bl	80001d4 <__adddf3>
 80040a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80040a8:	e758      	b.n	8003f5c <__kernel_rem_pio2+0x52c>
 80040aa:	bf00      	nop
 80040ac:	f3af 8000 	nop.w
	...
 80040b8:	41700000 	.word	0x41700000
 80040bc:	3e700000 	.word	0x3e700000
 80040c0:	9b04      	ldr	r3, [sp, #16]
 80040c2:	9a04      	ldr	r2, [sp, #16]
 80040c4:	601f      	str	r7, [r3, #0]
 80040c6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80040ca:	605c      	str	r4, [r3, #4]
 80040cc:	609d      	str	r5, [r3, #8]
 80040ce:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80040d2:	60d3      	str	r3, [r2, #12]
 80040d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80040d8:	6110      	str	r0, [r2, #16]
 80040da:	6153      	str	r3, [r2, #20]
 80040dc:	e719      	b.n	8003f12 <__kernel_rem_pio2+0x4e2>
 80040de:	bf00      	nop

080040e0 <scalbn>:
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	ec55 4b10 	vmov	r4, r5, d0
 80040e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80040ea:	4606      	mov	r6, r0
 80040ec:	462b      	mov	r3, r5
 80040ee:	b991      	cbnz	r1, 8004116 <scalbn+0x36>
 80040f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80040f4:	4323      	orrs	r3, r4
 80040f6:	d03d      	beq.n	8004174 <scalbn+0x94>
 80040f8:	4b35      	ldr	r3, [pc, #212]	@ (80041d0 <scalbn+0xf0>)
 80040fa:	4620      	mov	r0, r4
 80040fc:	4629      	mov	r1, r5
 80040fe:	2200      	movs	r2, #0
 8004100:	f7fc fa1e 	bl	8000540 <__aeabi_dmul>
 8004104:	4b33      	ldr	r3, [pc, #204]	@ (80041d4 <scalbn+0xf4>)
 8004106:	429e      	cmp	r6, r3
 8004108:	4604      	mov	r4, r0
 800410a:	460d      	mov	r5, r1
 800410c:	da0f      	bge.n	800412e <scalbn+0x4e>
 800410e:	a328      	add	r3, pc, #160	@ (adr r3, 80041b0 <scalbn+0xd0>)
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	e01e      	b.n	8004154 <scalbn+0x74>
 8004116:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800411a:	4291      	cmp	r1, r2
 800411c:	d10b      	bne.n	8004136 <scalbn+0x56>
 800411e:	4622      	mov	r2, r4
 8004120:	4620      	mov	r0, r4
 8004122:	4629      	mov	r1, r5
 8004124:	f7fc f856 	bl	80001d4 <__adddf3>
 8004128:	4604      	mov	r4, r0
 800412a:	460d      	mov	r5, r1
 800412c:	e022      	b.n	8004174 <scalbn+0x94>
 800412e:	460b      	mov	r3, r1
 8004130:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004134:	3936      	subs	r1, #54	@ 0x36
 8004136:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800413a:	4296      	cmp	r6, r2
 800413c:	dd0d      	ble.n	800415a <scalbn+0x7a>
 800413e:	2d00      	cmp	r5, #0
 8004140:	a11d      	add	r1, pc, #116	@ (adr r1, 80041b8 <scalbn+0xd8>)
 8004142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004146:	da02      	bge.n	800414e <scalbn+0x6e>
 8004148:	a11d      	add	r1, pc, #116	@ (adr r1, 80041c0 <scalbn+0xe0>)
 800414a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800414e:	a31a      	add	r3, pc, #104	@ (adr r3, 80041b8 <scalbn+0xd8>)
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f7fc f9f4 	bl	8000540 <__aeabi_dmul>
 8004158:	e7e6      	b.n	8004128 <scalbn+0x48>
 800415a:	1872      	adds	r2, r6, r1
 800415c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004160:	428a      	cmp	r2, r1
 8004162:	dcec      	bgt.n	800413e <scalbn+0x5e>
 8004164:	2a00      	cmp	r2, #0
 8004166:	dd08      	ble.n	800417a <scalbn+0x9a>
 8004168:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800416c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004170:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004174:	ec45 4b10 	vmov	d0, r4, r5
 8004178:	bd70      	pop	{r4, r5, r6, pc}
 800417a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800417e:	da08      	bge.n	8004192 <scalbn+0xb2>
 8004180:	2d00      	cmp	r5, #0
 8004182:	a10b      	add	r1, pc, #44	@ (adr r1, 80041b0 <scalbn+0xd0>)
 8004184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004188:	dac1      	bge.n	800410e <scalbn+0x2e>
 800418a:	a10f      	add	r1, pc, #60	@ (adr r1, 80041c8 <scalbn+0xe8>)
 800418c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004190:	e7bd      	b.n	800410e <scalbn+0x2e>
 8004192:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004196:	3236      	adds	r2, #54	@ 0x36
 8004198:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800419c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80041a0:	4620      	mov	r0, r4
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <scalbn+0xf8>)
 80041a4:	4629      	mov	r1, r5
 80041a6:	2200      	movs	r2, #0
 80041a8:	e7d4      	b.n	8004154 <scalbn+0x74>
 80041aa:	bf00      	nop
 80041ac:	f3af 8000 	nop.w
 80041b0:	c2f8f359 	.word	0xc2f8f359
 80041b4:	01a56e1f 	.word	0x01a56e1f
 80041b8:	8800759c 	.word	0x8800759c
 80041bc:	7e37e43c 	.word	0x7e37e43c
 80041c0:	8800759c 	.word	0x8800759c
 80041c4:	fe37e43c 	.word	0xfe37e43c
 80041c8:	c2f8f359 	.word	0xc2f8f359
 80041cc:	81a56e1f 	.word	0x81a56e1f
 80041d0:	43500000 	.word	0x43500000
 80041d4:	ffff3cb0 	.word	0xffff3cb0
 80041d8:	3c900000 	.word	0x3c900000
 80041dc:	00000000 	.word	0x00000000

080041e0 <floor>:
 80041e0:	ec51 0b10 	vmov	r0, r1, d0
 80041e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80041e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80041f0:	2e13      	cmp	r6, #19
 80041f2:	460c      	mov	r4, r1
 80041f4:	4605      	mov	r5, r0
 80041f6:	4680      	mov	r8, r0
 80041f8:	dc34      	bgt.n	8004264 <floor+0x84>
 80041fa:	2e00      	cmp	r6, #0
 80041fc:	da17      	bge.n	800422e <floor+0x4e>
 80041fe:	a332      	add	r3, pc, #200	@ (adr r3, 80042c8 <floor+0xe8>)
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	f7fb ffe6 	bl	80001d4 <__adddf3>
 8004208:	2200      	movs	r2, #0
 800420a:	2300      	movs	r3, #0
 800420c:	f7fc fc28 	bl	8000a60 <__aeabi_dcmpgt>
 8004210:	b150      	cbz	r0, 8004228 <floor+0x48>
 8004212:	2c00      	cmp	r4, #0
 8004214:	da55      	bge.n	80042c2 <floor+0xe2>
 8004216:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800421a:	432c      	orrs	r4, r5
 800421c:	2500      	movs	r5, #0
 800421e:	42ac      	cmp	r4, r5
 8004220:	4c2b      	ldr	r4, [pc, #172]	@ (80042d0 <floor+0xf0>)
 8004222:	bf08      	it	eq
 8004224:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004228:	4621      	mov	r1, r4
 800422a:	4628      	mov	r0, r5
 800422c:	e023      	b.n	8004276 <floor+0x96>
 800422e:	4f29      	ldr	r7, [pc, #164]	@ (80042d4 <floor+0xf4>)
 8004230:	4137      	asrs	r7, r6
 8004232:	ea01 0307 	and.w	r3, r1, r7
 8004236:	4303      	orrs	r3, r0
 8004238:	d01d      	beq.n	8004276 <floor+0x96>
 800423a:	a323      	add	r3, pc, #140	@ (adr r3, 80042c8 <floor+0xe8>)
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f7fb ffc8 	bl	80001d4 <__adddf3>
 8004244:	2200      	movs	r2, #0
 8004246:	2300      	movs	r3, #0
 8004248:	f7fc fc0a 	bl	8000a60 <__aeabi_dcmpgt>
 800424c:	2800      	cmp	r0, #0
 800424e:	d0eb      	beq.n	8004228 <floor+0x48>
 8004250:	2c00      	cmp	r4, #0
 8004252:	bfbe      	ittt	lt
 8004254:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004258:	4133      	asrlt	r3, r6
 800425a:	18e4      	addlt	r4, r4, r3
 800425c:	ea24 0407 	bic.w	r4, r4, r7
 8004260:	2500      	movs	r5, #0
 8004262:	e7e1      	b.n	8004228 <floor+0x48>
 8004264:	2e33      	cmp	r6, #51	@ 0x33
 8004266:	dd0a      	ble.n	800427e <floor+0x9e>
 8004268:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800426c:	d103      	bne.n	8004276 <floor+0x96>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	f7fb ffaf 	bl	80001d4 <__adddf3>
 8004276:	ec41 0b10 	vmov	d0, r0, r1
 800427a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800427e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004282:	f04f 37ff 	mov.w	r7, #4294967295
 8004286:	40df      	lsrs	r7, r3
 8004288:	4207      	tst	r7, r0
 800428a:	d0f4      	beq.n	8004276 <floor+0x96>
 800428c:	a30e      	add	r3, pc, #56	@ (adr r3, 80042c8 <floor+0xe8>)
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	f7fb ff9f 	bl	80001d4 <__adddf3>
 8004296:	2200      	movs	r2, #0
 8004298:	2300      	movs	r3, #0
 800429a:	f7fc fbe1 	bl	8000a60 <__aeabi_dcmpgt>
 800429e:	2800      	cmp	r0, #0
 80042a0:	d0c2      	beq.n	8004228 <floor+0x48>
 80042a2:	2c00      	cmp	r4, #0
 80042a4:	da0a      	bge.n	80042bc <floor+0xdc>
 80042a6:	2e14      	cmp	r6, #20
 80042a8:	d101      	bne.n	80042ae <floor+0xce>
 80042aa:	3401      	adds	r4, #1
 80042ac:	e006      	b.n	80042bc <floor+0xdc>
 80042ae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80042b2:	2301      	movs	r3, #1
 80042b4:	40b3      	lsls	r3, r6
 80042b6:	441d      	add	r5, r3
 80042b8:	4545      	cmp	r5, r8
 80042ba:	d3f6      	bcc.n	80042aa <floor+0xca>
 80042bc:	ea25 0507 	bic.w	r5, r5, r7
 80042c0:	e7b2      	b.n	8004228 <floor+0x48>
 80042c2:	2500      	movs	r5, #0
 80042c4:	462c      	mov	r4, r5
 80042c6:	e7af      	b.n	8004228 <floor+0x48>
 80042c8:	8800759c 	.word	0x8800759c
 80042cc:	7e37e43c 	.word	0x7e37e43c
 80042d0:	bff00000 	.word	0xbff00000
 80042d4:	000fffff 	.word	0x000fffff

080042d8 <_init>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr

080042e4 <_fini>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr
