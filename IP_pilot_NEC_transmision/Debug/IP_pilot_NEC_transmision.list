
IP_pilot_NEC_transmision.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a1c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005ba4  08005ba4  00006ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bec  08005bec  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bec  08005bec  00006bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bf4  08005bf4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf4  08005bf4  00006bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bf8  08005bf8  00006bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005bfc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000000c  08005c08  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005c08  00007270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119e8  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f2  00000000  00000000  00018a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0001b218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c1e  00000000  00000000  0001c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027476  00000000  00000000  0001cdd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014167  00000000  00000000  0004424c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2319  00000000  00000000  000583b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a6cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004004  00000000  00000000  0014a710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0014e714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b8c 	.word	0x08005b8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005b8c 	.word	0x08005b8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004c2:	4a0b      	ldr	r2, [pc, #44]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	2010      	movs	r0, #16
 80004dc:	f000 fe7d 	bl	80011da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004e0:	2010      	movs	r0, #16
 80004e2:	f000 fe96 	bl	8001212 <HAL_NVIC_EnableIRQ>

}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <MX_GPIO_Init+0x2c>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fe:	4a08      	ldr	r2, [pc, #32]	@ (8000520 <MX_GPIO_Init+0x2c>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <MX_GPIO_Init+0x2c>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <calc_pulse>:

static volatile uint32_t received_value;
static int received_bits;

static pulse_t calc_pulse(uint32_t time)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	if (time < 250)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2bf9      	cmp	r3, #249	@ 0xf9
 8000530:	d801      	bhi.n	8000536 <calc_pulse+0x12>
		return PULSE_ERROR;
 8000532:	2305      	movs	r3, #5
 8000534:	e021      	b.n	800057a <calc_pulse+0x56>
	else if (time < 1200)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800053c:	d201      	bcs.n	8000542 <calc_pulse+0x1e>
		return PULSE_SHORT;
 800053e:	2304      	movs	r3, #4
 8000540:	e01b      	b.n	800057a <calc_pulse+0x56>
	else if (time < 2000)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000548:	d201      	bcs.n	800054e <calc_pulse+0x2a>
		return PULSE_LONG;
 800054a:	2303      	movs	r3, #3
 800054c:	e015      	b.n	800057a <calc_pulse+0x56>
	else if (time < 3000)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000554:	4293      	cmp	r3, r2
 8000556:	d801      	bhi.n	800055c <calc_pulse+0x38>
		return PULSE_2MS;
 8000558:	2302      	movs	r3, #2
 800055a:	e00e      	b.n	800057a <calc_pulse+0x56>
	else if (time < 6000)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000562:	4293      	cmp	r3, r2
 8000564:	d801      	bhi.n	800056a <calc_pulse+0x46>
		return PULSE_4MS;
 8000566:	2301      	movs	r3, #1
 8000568:	e007      	b.n	800057a <calc_pulse+0x56>
	else if (time < 12000)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000570:	4293      	cmp	r3, r2
 8000572:	d801      	bhi.n	8000578 <calc_pulse+0x54>
		return PULSE_9MS;
 8000574:	2300      	movs	r3, #0
 8000576:	e000      	b.n	800057a <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8000578:	2305      	movs	r3, #5
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
	...

08000588 <ir_tim_interrupt>:

void ir_tim_interrupt(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 800058e:	4b27      	ldr	r3, [pc, #156]	@ (800062c <ir_tim_interrupt+0xa4>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b1f      	cmp	r3, #31
 8000594:	dc43      	bgt.n	800061e <ir_tim_interrupt+0x96>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1));
 8000596:	2100      	movs	r1, #0
 8000598:	4825      	ldr	r0, [pc, #148]	@ (8000630 <ir_tim_interrupt+0xa8>)
 800059a:	f003 fdc3 	bl	8004124 <HAL_TIM_ReadCapturedValue>
 800059e:	4603      	mov	r3, r0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ffbf 	bl	8000524 <calc_pulse>
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d831      	bhi.n	8000616 <ir_tim_interrupt+0x8e>
 80005b2:	a201      	add	r2, pc, #4	@ (adr r2, 80005b8 <ir_tim_interrupt+0x30>)
 80005b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b8:	080005f9 	.word	0x080005f9
 80005bc:	08000607 	.word	0x08000607
 80005c0:	080005df 	.word	0x080005df
 80005c4:	080005c9 	.word	0x080005c9
	case PULSE_SHORT:
		received_value = received_value >> 1;
 80005c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <ir_tim_interrupt+0xac>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	085b      	lsrs	r3, r3, #1
 80005ce:	4a19      	ldr	r2, [pc, #100]	@ (8000634 <ir_tim_interrupt+0xac>)
 80005d0:	6013      	str	r3, [r2, #0]
		received_bits++;
 80005d2:	4b16      	ldr	r3, [pc, #88]	@ (800062c <ir_tim_interrupt+0xa4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	4a14      	ldr	r2, [pc, #80]	@ (800062c <ir_tim_interrupt+0xa4>)
 80005da:	6013      	str	r3, [r2, #0]
		break;
 80005dc:	e022      	b.n	8000624 <ir_tim_interrupt+0x9c>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <ir_tim_interrupt+0xac>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	085b      	lsrs	r3, r3, #1
 80005e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005e8:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <ir_tim_interrupt+0xac>)
 80005ea:	6013      	str	r3, [r2, #0]
		received_bits++;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <ir_tim_interrupt+0xa4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	4a0e      	ldr	r2, [pc, #56]	@ (800062c <ir_tim_interrupt+0xa4>)
 80005f4:	6013      	str	r3, [r2, #0]
		break;
 80005f6:	e015      	b.n	8000624 <ir_tim_interrupt+0x9c>
	case PULSE_4MS:
		received_value = 0;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <ir_tim_interrupt+0xac>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <ir_tim_interrupt+0xa4>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
		break;
 8000604:	e00e      	b.n	8000624 <ir_tim_interrupt+0x9c>
	case PULSE_2MS:
		if (received_bits == 0)
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <ir_tim_interrupt+0xa4>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <ir_tim_interrupt+0x9a>
			received_bits = 32;
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <ir_tim_interrupt+0xa4>)
 8000610:	2220      	movs	r2, #32
 8000612:	601a      	str	r2, [r3, #0]
		break;
 8000614:	e005      	b.n	8000622 <ir_tim_interrupt+0x9a>
	default:
		received_bits = 0;
 8000616:	4b05      	ldr	r3, [pc, #20]	@ (800062c <ir_tim_interrupt+0xa4>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
		break;
 800061c:	e002      	b.n	8000624 <ir_tim_interrupt+0x9c>
		return;
 800061e:	bf00      	nop
 8000620:	e000      	b.n	8000624 <ir_tim_interrupt+0x9c>
		break;
 8000622:	bf00      	nop
	}
}
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000002c 	.word	0x2000002c
 8000630:	20000030 	.word	0x20000030
 8000634:	20000028 	.word	0x20000028

08000638 <ir_init>:

void ir_init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim2);
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <ir_init+0x18>)
 800063e:	f002 fd1d 	bl	800307c <HAL_TIM_Base_Start>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000642:	2100      	movs	r1, #0
 8000644:	4802      	ldr	r0, [pc, #8]	@ (8000650 <ir_init+0x18>)
 8000646:	f003 f865 	bl	8003714 <HAL_TIM_IC_Start_IT>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000030 	.word	0x20000030

08000654 <ir_read>:

int ir_read(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 800065a:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <ir_read+0x30>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b20      	cmp	r3, #32
 8000660:	d002      	beq.n	8000668 <ir_read+0x14>
		return -1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	e007      	b.n	8000678 <ir_read+0x24>

	uint8_t value = received_value >> 16;
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <ir_read+0x34>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	0c1b      	lsrs	r3, r3, #16
 800066e:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 8000670:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <ir_read+0x30>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
	return value;
 8000676:	79fb      	ldrb	r3, [r7, #7]
}
 8000678:	4618      	mov	r0, r3
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	2000002c 	.word	0x2000002c
 8000688:	20000028 	.word	0x20000028

0800068c <HAL_TIM_IC_CaptureCallback>:
  return 1;
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a08      	ldr	r2, [pc, #32]	@ (80006b8 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d109      	bne.n	80006b0 <HAL_TIM_IC_CaptureCallback+0x24>
  {
    switch (HAL_TIM_GetActiveChannel(&htim2))
 800069c:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <HAL_TIM_IC_CaptureCallback+0x2c>)
 800069e:	f003 fdc1 	bl	8004224 <HAL_TIM_GetActiveChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d102      	bne.n	80006ae <HAL_TIM_IC_CaptureCallback+0x22>
    {
      case HAL_TIM_ACTIVE_CHANNEL_1:
        ir_tim_interrupt();
 80006a8:	f7ff ff6e 	bl	8000588 <ir_tim_interrupt>
        break;
 80006ac:	e000      	b.n	80006b0 <HAL_TIM_IC_CaptureCallback+0x24>
      default:
        break;
 80006ae:	bf00      	nop
    }
  }
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000030 	.word	0x20000030

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c2:	f000 fc3a 	bl	8000f3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c6:	f000 f849 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ca:	f7ff ff13 	bl	80004f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ce:	f7ff fef3 	bl	80004b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006d2:	f000 fadd 	bl	8000c90 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006d6:	f000 f913 	bl	8000900 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006da:	f000 f99d 	bl	8000a18 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ws2812b_init();
 80006de:	f000 fb8f 	bl	8000e00 <ws2812b_init>
  ir_init();
 80006e2:	f7ff ffa9 	bl	8000638 <ir_init>

  while (1)
  {
    int value = ir_read();
 80006e6:	f7ff ffb5 	bl	8000654 <ir_read>
 80006ea:	6078      	str	r0, [r7, #4]
    switch (value) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b5e      	cmp	r3, #94	@ 0x5e
 80006f0:	d021      	beq.n	8000736 <main+0x7a>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b5e      	cmp	r3, #94	@ 0x5e
 80006f6:	dcf6      	bgt.n	80006e6 <main+0x2a>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b45      	cmp	r3, #69	@ 0x45
 80006fc:	d024      	beq.n	8000748 <main+0x8c>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b45      	cmp	r3, #69	@ 0x45
 8000702:	dcf0      	bgt.n	80006e6 <main+0x2a>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b0c      	cmp	r3, #12
 8000708:	d003      	beq.n	8000712 <main+0x56>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b18      	cmp	r3, #24
 800070e:	d009      	beq.n	8000724 <main+0x68>
 8000710:	e023      	b.n	800075a <main+0x9e>
    case IR_CODE_1:
      ws2812b_set_color(0, 255, 0, 0);
 8000712:	2300      	movs	r3, #0
 8000714:	2200      	movs	r2, #0
 8000716:	21ff      	movs	r1, #255	@ 0xff
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fbaf 	bl	8000e7c <ws2812b_set_color>
      ws2812b_update();
 800071e:	f000 fb9f 	bl	8000e60 <ws2812b_update>
      break;
 8000722:	e01a      	b.n	800075a <main+0x9e>
    case IR_CODE_2:
      ws2812b_set_color(0, 0, 255, 0);
 8000724:	2300      	movs	r3, #0
 8000726:	22ff      	movs	r2, #255	@ 0xff
 8000728:	2100      	movs	r1, #0
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fba6 	bl	8000e7c <ws2812b_set_color>
      ws2812b_update();
 8000730:	f000 fb96 	bl	8000e60 <ws2812b_update>
      break;
 8000734:	e011      	b.n	800075a <main+0x9e>
    case IR_CODE_3:
      ws2812b_set_color(0, 0, 0, 255);
 8000736:	23ff      	movs	r3, #255	@ 0xff
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fb9d 	bl	8000e7c <ws2812b_set_color>
      ws2812b_update();
 8000742:	f000 fb8d 	bl	8000e60 <ws2812b_update>
      break;
 8000746:	e008      	b.n	800075a <main+0x9e>
    case IR_CODE_ONOFF:
      ws2812b_set_color(0, 0, 0, 0);
 8000748:	2300      	movs	r3, #0
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2000      	movs	r0, #0
 8000750:	f000 fb94 	bl	8000e7c <ws2812b_set_color>
      ws2812b_update();
 8000754:	f000 fb84 	bl	8000e60 <ws2812b_update>
      break;
 8000758:	bf00      	nop
  {
 800075a:	e7c4      	b.n	80006e6 <main+0x2a>

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b096      	sub	sp, #88	@ 0x58
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2244      	movs	r2, #68	@ 0x44
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f005 f9e1 	bl	8005b32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800077e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000782:	f001 f911 	bl	80019a8 <HAL_PWREx_ControlVoltageScaling>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800078c:	f000 f838 	bl	8000800 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000790:	2310      	movs	r3, #16
 8000792:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800079c:	2360      	movs	r3, #96	@ 0x60
 800079e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007a4:	2301      	movs	r3, #1
 80007a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007ac:	2328      	movs	r3, #40	@ 0x28
 80007ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007b0:	2307      	movs	r3, #7
 80007b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 f947 	bl	8001a54 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007cc:	f000 f818 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2303      	movs	r3, #3
 80007d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	2104      	movs	r1, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fd0f 	bl	800220c <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007f4:	f000 f804 	bl	8000800 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3758      	adds	r7, #88	@ 0x58
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000816:	4a0e      	ldr	r2, [pc, #56]	@ (8000850 <HAL_MspInit+0x44>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6613      	str	r3, [r2, #96]	@ 0x60
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <HAL_MspInit+0x44>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082e:	4a08      	ldr	r2, [pc, #32]	@ (8000850 <HAL_MspInit+0x44>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000834:	6593      	str	r3, [r2, #88]	@ 0x58
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <HAL_MspInit+0x44>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <NMI_Handler+0x4>

0800085c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <MemManage_Handler+0x4>

0800086c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <UsageFault_Handler+0x4>

0800087c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008aa:	f000 fb9b 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80008b8:	4802      	ldr	r0, [pc, #8]	@ (80008c4 <DMA1_Channel6_IRQHandler+0x10>)
 80008ba:	f000 fddd 	bl	8001478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000c8 	.word	0x200000c8

080008c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008cc:	4802      	ldr	r0, [pc, #8]	@ (80008d8 <TIM2_IRQHandler+0x10>)
 80008ce:	f003 f86b 	bl	80039a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000030 	.word	0x20000030

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <SystemInit+0x20>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e6:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <SystemInit+0x20>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b090      	sub	sp, #64	@ 0x40
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800093c:	4b35      	ldr	r3, [pc, #212]	@ (8000a14 <MX_TIM2_Init+0x114>)
 800093e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000942:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000944:	4b33      	ldr	r3, [pc, #204]	@ (8000a14 <MX_TIM2_Init+0x114>)
 8000946:	224f      	movs	r2, #79	@ 0x4f
 8000948:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b32      	ldr	r3, [pc, #200]	@ (8000a14 <MX_TIM2_Init+0x114>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000950:	4b30      	ldr	r3, [pc, #192]	@ (8000a14 <MX_TIM2_Init+0x114>)
 8000952:	f04f 32ff 	mov.w	r2, #4294967295
 8000956:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <MX_TIM2_Init+0x114>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a14 <MX_TIM2_Init+0x114>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000964:	482b      	ldr	r0, [pc, #172]	@ (8000a14 <MX_TIM2_Init+0x114>)
 8000966:	f002 fb31 	bl	8002fcc <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000970:	f7ff ff46 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000978:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800097a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800097e:	4619      	mov	r1, r3
 8000980:	4824      	ldr	r0, [pc, #144]	@ (8000a14 <MX_TIM2_Init+0x114>)
 8000982:	f003 fac3 	bl	8003f0c <HAL_TIM_ConfigClockSource>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800098c:	f7ff ff38 	bl	8000800 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000990:	4820      	ldr	r0, [pc, #128]	@ (8000a14 <MX_TIM2_Init+0x114>)
 8000992:	f002 fe5d 	bl	8003650 <HAL_TIM_IC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800099c:	f7ff ff30 	bl	8000800 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80009a0:	2304      	movs	r3, #4
 80009a2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80009a4:	2340      	movs	r3, #64	@ 0x40
 80009a6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4817      	ldr	r0, [pc, #92]	@ (8000a14 <MX_TIM2_Init+0x114>)
 80009b8:	f003 fb71 	bl	800409e <HAL_TIM_SlaveConfigSynchro>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80009c2:	f7ff ff1d 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4619      	mov	r1, r3
 80009d4:	480f      	ldr	r0, [pc, #60]	@ (8000a14 <MX_TIM2_Init+0x114>)
 80009d6:	f004 faeb 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80009e0:	f7ff ff0e 	bl	8000800 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009e4:	2302      	movs	r3, #2
 80009e6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009e8:	2301      	movs	r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <MX_TIM2_Init+0x114>)
 80009fc:	f003 f8d6 	bl	8003bac <HAL_TIM_IC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8000a06:	f7ff fefb 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3740      	adds	r7, #64	@ 0x40
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000030 	.word	0x20000030

08000a18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	@ 0x38
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8000b00 <MX_TIM3_Init+0xe8>)
 8000a4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a50:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000a5c:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a5e:	2263      	movs	r2, #99	@ 0x63
 8000a60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a6e:	4823      	ldr	r0, [pc, #140]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a70:	f002 faac 	bl	8002fcc <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a7a:	f7ff fec1 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481c      	ldr	r0, [pc, #112]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a8c:	f003 fa3e 	bl	8003f0c <HAL_TIM_ConfigClockSource>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a96:	f7ff feb3 	bl	8000800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a9a:	4818      	ldr	r0, [pc, #96]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a9c:	f002 fb56 	bl	800314c <HAL_TIM_PWM_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000aa6:	f7ff feab 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4810      	ldr	r0, [pc, #64]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000aba:	f004 fa79 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ac4:	f7ff fe9c 	bl	8000800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac8:	2360      	movs	r3, #96	@ 0x60
 8000aca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4807      	ldr	r0, [pc, #28]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000ae0:	f003 f900 	bl	8003ce4 <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000aea:	f7ff fe89 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aee:	4803      	ldr	r0, [pc, #12]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000af0:	f000 f898 	bl	8000c24 <HAL_TIM_MspPostInit>

}
 8000af4:	bf00      	nop
 8000af6:	3738      	adds	r7, #56	@ 0x38
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000007c 	.word	0x2000007c
 8000b00:	40000400 	.word	0x40000400

08000b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b24:	d131      	bne.n	8000b8a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b26:	4b3b      	ldr	r3, [pc, #236]	@ (8000c14 <HAL_TIM_Base_MspInit+0x110>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2a:	4a3a      	ldr	r2, [pc, #232]	@ (8000c14 <HAL_TIM_Base_MspInit+0x110>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b32:	4b38      	ldr	r3, [pc, #224]	@ (8000c14 <HAL_TIM_Base_MspInit+0x110>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b35      	ldr	r3, [pc, #212]	@ (8000c14 <HAL_TIM_Base_MspInit+0x110>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	4a34      	ldr	r2, [pc, #208]	@ (8000c14 <HAL_TIM_Base_MspInit+0x110>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4a:	4b32      	ldr	r3, [pc, #200]	@ (8000c14 <HAL_TIM_Base_MspInit+0x110>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b66:	2301      	movs	r3, #1
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b74:	f000 fd60 	bl	8001638 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	201c      	movs	r0, #28
 8000b7e:	f000 fb2c 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b82:	201c      	movs	r0, #28
 8000b84:	f000 fb45 	bl	8001212 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b88:	e040      	b.n	8000c0c <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM3)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a22      	ldr	r2, [pc, #136]	@ (8000c18 <HAL_TIM_Base_MspInit+0x114>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d13b      	bne.n	8000c0c <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <HAL_TIM_Base_MspInit+0x110>)
 8000b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b98:	4a1e      	ldr	r2, [pc, #120]	@ (8000c14 <HAL_TIM_Base_MspInit+0x110>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <HAL_TIM_Base_MspInit+0x110>)
 8000ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000bae:	4a1c      	ldr	r2, [pc, #112]	@ (8000c20 <HAL_TIM_Base_MspInit+0x11c>)
 8000bb0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000bb4:	2205      	movs	r2, #5
 8000bb6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000bba:	2210      	movs	r2, #16
 8000bbc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000bc6:	2280      	movs	r2, #128	@ 0x80
 8000bc8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000bcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bd0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000be4:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000be6:	f000 fb2f 	bl	8001248 <HAL_DMA_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <HAL_TIM_Base_MspInit+0xf0>
      Error_Handler();
 8000bf0:	f7ff fe06 	bl	8000800 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a09      	ldr	r2, [pc, #36]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000bf8:	625a      	str	r2, [r3, #36]	@ 0x24
 8000bfa:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a06      	ldr	r2, [pc, #24]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000c04:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <HAL_TIM_Base_MspInit+0x118>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	@ 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40000400 	.word	0x40000400
 8000c1c:	200000c8 	.word	0x200000c8
 8000c20:	4002006c 	.word	0x4002006c

08000c24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a11      	ldr	r2, [pc, #68]	@ (8000c88 <HAL_TIM_MspPostInit+0x64>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d11c      	bne.n	8000c80 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <HAL_TIM_MspPostInit+0x68>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	4a10      	ldr	r2, [pc, #64]	@ (8000c8c <HAL_TIM_MspPostInit+0x68>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <HAL_TIM_MspPostInit+0x68>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c5e:	2340      	movs	r3, #64	@ 0x40
 8000c60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7c:	f000 fcdc 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40000400 	.word	0x40000400
 8000c8c:	40021000 	.word	0x40021000

08000c90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c94:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000c96:	4a15      	ldr	r2, [pc, #84]	@ (8000cec <MX_USART2_UART_Init+0x5c>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cd4:	f004 fa12 	bl	80050fc <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cde:	f7ff fd8f 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000110 	.word	0x20000110
 8000cec:	40004400 	.word	0x40004400

08000cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0ac      	sub	sp, #176	@ 0xb0
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2288      	movs	r2, #136	@ 0x88
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 ff0e 	bl	8005b32 <memset>
  if(uartHandle->Instance==USART2)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <HAL_UART_MspInit+0xb0>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d13b      	bne.n	8000d98 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fc91 	bl	8002654 <HAL_RCCEx_PeriphCLKConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d38:	f7ff fd62 	bl	8000800 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3c:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d40:	4a18      	ldr	r2, [pc, #96]	@ (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d58:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d60:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d84:	2307      	movs	r3, #7
 8000d86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d94:	f000 fc50 	bl	8001638 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d98:	bf00      	nop
 8000d9a:	37b0      	adds	r7, #176	@ 0xb0
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40021000 	.word	0x40021000

08000da8 <set_byte>:
#define LED_N			7

static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

static void set_byte(uint32_t pos, uint8_t value)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	e016      	b.n	8000de8 <set_byte+0x40>
    if (value & 0x80) {
 8000dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	da06      	bge.n	8000dd0 <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <set_byte+0x54>)
 8000dca:	2140      	movs	r1, #64	@ 0x40
 8000dcc:	54d1      	strb	r1, [r2, r3]
 8000dce:	e005      	b.n	8000ddc <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a09      	ldr	r2, [pc, #36]	@ (8000dfc <set_byte+0x54>)
 8000dd8:	2120      	movs	r1, #32
 8000dda:	54d1      	strb	r1, [r2, r3]
    }

    value <<= 1;
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b07      	cmp	r3, #7
 8000dec:	dde5      	ble.n	8000dba <set_byte+0x12>
  }
}
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	20000198 	.word	0x20000198

08000e00 <ws2812b_init>:

void ws2812b_init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	e007      	b.n	8000e1c <ws2812b_init+0x1c>
    led_buffer[i] = 0;
 8000e0c:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <ws2812b_init+0x58>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b27      	cmp	r3, #39	@ 0x27
 8000e20:	ddf4      	ble.n	8000e0c <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	e007      	b.n	8000e38 <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3328      	adds	r3, #40	@ 0x28
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <ws2812b_init+0x58>)
 8000e2e:	2120      	movs	r1, #32
 8000e30:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3301      	adds	r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2ba7      	cmp	r3, #167	@ 0xa7
 8000e3c:	ddf4      	ble.n	8000e28 <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 100;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <ws2812b_init+0x58>)
 8000e40:	2264      	movs	r2, #100	@ 0x64
 8000e42:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

  HAL_TIM_Base_Start(&htim3);
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <ws2812b_init+0x5c>)
 8000e48:	f002 f918 	bl	800307c <HAL_TIM_Base_Start>
  ws2812b_update();
 8000e4c:	f000 f808 	bl	8000e60 <ws2812b_update>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000198 	.word	0x20000198
 8000e5c:	2000007c 	.word	0x2000007c

08000e60 <ws2812b_update>:

void ws2812b_update(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8000e64:	23d1      	movs	r3, #209	@ 0xd1
 8000e66:	4a03      	ldr	r2, [pc, #12]	@ (8000e74 <ws2812b_update+0x14>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4803      	ldr	r0, [pc, #12]	@ (8000e78 <ws2812b_update+0x18>)
 8000e6c:	f002 f9d0 	bl	8003210 <HAL_TIM_PWM_Start_DMA>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000198 	.word	0x20000198
 8000e78:	2000007c 	.word	0x2000007c

08000e7c <ws2812b_set_color>:
	while (HAL_TIM_GetChannelState(&htim3, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
		{}
}

void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	4608      	mov	r0, r1
 8000e86:	4611      	mov	r1, r2
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	70fb      	strb	r3, [r7, #3]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	70bb      	strb	r3, [r7, #2]
 8000e92:	4613      	mov	r3, r2
 8000e94:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b06      	cmp	r3, #6
 8000e9a:	d820      	bhi.n	8000ede <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	3328      	adds	r3, #40	@ 0x28
 8000ea8:	78ba      	ldrb	r2, [r7, #2]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff7b 	bl	8000da8 <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	3330      	adds	r3, #48	@ 0x30
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff70 	bl	8000da8 <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4413      	add	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	3338      	adds	r3, #56	@ 0x38
 8000ed4:	787a      	ldrb	r2, [r7, #1]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff65 	bl	8000da8 <set_byte>
	}
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eec:	f7ff fcf6 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef0:	480c      	ldr	r0, [pc, #48]	@ (8000f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef2:	490d      	ldr	r1, [pc, #52]	@ (8000f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f2c <LoopForever+0xe>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f08:	4c0a      	ldr	r4, [pc, #40]	@ (8000f34 <LoopForever+0x16>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f16:	f004 fe15 	bl	8005b44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f1a:	f7ff fbcf 	bl	80006bc <main>

08000f1e <LoopForever>:

LoopForever:
    b LoopForever
 8000f1e:	e7fe      	b.n	8000f1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f2c:	08005bfc 	.word	0x08005bfc
  ldr r2, =_sbss
 8000f30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f34:	20000270 	.word	0x20000270

08000f38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_2_IRQHandler>

08000f3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f93d 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	f000 f80e 	bl	8000f6c <HAL_InitTick>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	e001      	b.n	8000f60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f5c:	f7ff fc56 	bl	800080c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <HAL_InitTick+0x6c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d023      	beq.n	8000fc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <HAL_InitTick+0x70>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <HAL_InitTick+0x6c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f949 	bl	800122e <HAL_SYSTICK_Config>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10f      	bne.n	8000fc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d809      	bhi.n	8000fbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 f913 	bl	80011da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <HAL_InitTick+0x74>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e007      	b.n	8000fcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e004      	b.n	8000fcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e001      	b.n	8000fcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	2000026c 	.word	0x2000026c

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2000026c 	.word	0x2000026c

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	@ (80010c0 <__NVIC_EnableIRQ+0x38>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	@ (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	@ (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	@ 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	@ 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff29 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff3e 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff8e 	bl	8001118 <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff31 	bl	8001088 <__NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffa2 	bl	8001180 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e098      	b.n	800138c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	4b4d      	ldr	r3, [pc, #308]	@ (8001398 <HAL_DMA_Init+0x150>)
 8001262:	429a      	cmp	r2, r3
 8001264:	d80f      	bhi.n	8001286 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b4b      	ldr	r3, [pc, #300]	@ (800139c <HAL_DMA_Init+0x154>)
 800126e:	4413      	add	r3, r2
 8001270:	4a4b      	ldr	r2, [pc, #300]	@ (80013a0 <HAL_DMA_Init+0x158>)
 8001272:	fba2 2303 	umull	r2, r3, r2, r3
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	009a      	lsls	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a48      	ldr	r2, [pc, #288]	@ (80013a4 <HAL_DMA_Init+0x15c>)
 8001282:	641a      	str	r2, [r3, #64]	@ 0x40
 8001284:	e00e      	b.n	80012a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4b46      	ldr	r3, [pc, #280]	@ (80013a8 <HAL_DMA_Init+0x160>)
 800128e:	4413      	add	r3, r2
 8001290:	4a43      	ldr	r2, [pc, #268]	@ (80013a0 <HAL_DMA_Init+0x158>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	009a      	lsls	r2, r3, #2
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a42      	ldr	r2, [pc, #264]	@ (80013ac <HAL_DMA_Init+0x164>)
 80012a2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2202      	movs	r2, #2
 80012a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80012ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80012be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80012fe:	d039      	beq.n	8001374 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	4a27      	ldr	r2, [pc, #156]	@ (80013a4 <HAL_DMA_Init+0x15c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d11a      	bne.n	8001340 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800130a:	4b29      	ldr	r3, [pc, #164]	@ (80013b0 <HAL_DMA_Init+0x168>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	f003 031c 	and.w	r3, r3, #28
 8001316:	210f      	movs	r1, #15
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	4924      	ldr	r1, [pc, #144]	@ (80013b0 <HAL_DMA_Init+0x168>)
 8001320:	4013      	ands	r3, r2
 8001322:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <HAL_DMA_Init+0x168>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6859      	ldr	r1, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001330:	f003 031c 	and.w	r3, r3, #28
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	491d      	ldr	r1, [pc, #116]	@ (80013b0 <HAL_DMA_Init+0x168>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
 800133e:	e019      	b.n	8001374 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001340:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <HAL_DMA_Init+0x16c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001348:	f003 031c 	and.w	r3, r3, #28
 800134c:	210f      	movs	r1, #15
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	4917      	ldr	r1, [pc, #92]	@ (80013b4 <HAL_DMA_Init+0x16c>)
 8001356:	4013      	ands	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800135a:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <HAL_DMA_Init+0x16c>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6859      	ldr	r1, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	f003 031c 	and.w	r3, r3, #28
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	4911      	ldr	r1, [pc, #68]	@ (80013b4 <HAL_DMA_Init+0x16c>)
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40020407 	.word	0x40020407
 800139c:	bffdfff8 	.word	0xbffdfff8
 80013a0:	cccccccd 	.word	0xcccccccd
 80013a4:	40020000 	.word	0x40020000
 80013a8:	bffdfbf8 	.word	0xbffdfbf8
 80013ac:	40020400 	.word	0x40020400
 80013b0:	400200a8 	.word	0x400200a8
 80013b4:	400204a8 	.word	0x400204a8

080013b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <HAL_DMA_Start_IT+0x20>
 80013d4:	2302      	movs	r3, #2
 80013d6:	e04b      	b.n	8001470 <HAL_DMA_Start_IT+0xb8>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d13a      	bne.n	8001462 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2202      	movs	r2, #2
 80013f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0201 	bic.w	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 f8e0 	bl	80015d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	2b00      	cmp	r3, #0
 800141c:	d008      	beq.n	8001430 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 020e 	orr.w	r2, r2, #14
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e00f      	b.n	8001450 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0204 	bic.w	r2, r2, #4
 800143e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 020a 	orr.w	r2, r2, #10
 800144e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	e005      	b.n	800146e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800146a:	2302      	movs	r3, #2
 800146c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800146e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001494:	f003 031c 	and.w	r3, r3, #28
 8001498:	2204      	movs	r2, #4
 800149a:	409a      	lsls	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d026      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x7a>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d021      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0320 	and.w	r3, r3, #32
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d107      	bne.n	80014cc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0204 	bic.w	r2, r2, #4
 80014ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d0:	f003 021c 	and.w	r2, r3, #28
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	2104      	movs	r1, #4
 80014da:	fa01 f202 	lsl.w	r2, r1, r2
 80014de:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d071      	beq.n	80015cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80014f0:	e06c      	b.n	80015cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f003 031c 	and.w	r3, r3, #28
 80014fa:	2202      	movs	r2, #2
 80014fc:	409a      	lsls	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d02e      	beq.n	8001564 <HAL_DMA_IRQHandler+0xec>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d029      	beq.n	8001564 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0320 	and.w	r3, r3, #32
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10b      	bne.n	8001536 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 020a 	bic.w	r2, r2, #10
 800152c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f003 021c 	and.w	r2, r3, #28
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	2102      	movs	r1, #2
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001556:	2b00      	cmp	r3, #0
 8001558:	d038      	beq.n	80015cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001562:	e033      	b.n	80015cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001568:	f003 031c 	and.w	r3, r3, #28
 800156c:	2208      	movs	r2, #8
 800156e:	409a      	lsls	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d02a      	beq.n	80015ce <HAL_DMA_IRQHandler+0x156>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d025      	beq.n	80015ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 020e 	bic.w	r2, r2, #14
 8001590:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	f003 021c 	and.w	r2, r3, #28
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
}
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b085      	sub	sp, #20
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e8:	f003 021c 	and.w	r2, r3, #28
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	2101      	movs	r1, #1
 80015f2:	fa01 f202 	lsl.w	r2, r1, r2
 80015f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b10      	cmp	r3, #16
 8001606:	d108      	bne.n	800161a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001618:	e007      	b.n	800162a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	60da      	str	r2, [r3, #12]
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001646:	e17f      	b.n	8001948 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8171 	beq.w	8001942 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d005      	beq.n	8001678 <HAL_GPIO_Init+0x40>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d130      	bne.n	80016da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ae:	2201      	movs	r2, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	f003 0201 	and.w	r2, r3, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d118      	bne.n	8001718 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016ec:	2201      	movs	r2, #1
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	f003 0201 	and.w	r2, r3, #1
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b03      	cmp	r3, #3
 8001722:	d017      	beq.n	8001754 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d123      	bne.n	80017a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	08da      	lsrs	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3208      	adds	r2, #8
 80017a2:	6939      	ldr	r1, [r7, #16]
 80017a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80ac 	beq.w	8001942 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001968 <HAL_GPIO_Init+0x330>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001968 <HAL_GPIO_Init+0x330>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001968 <HAL_GPIO_Init+0x330>)
 80017f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001802:	4a5a      	ldr	r2, [pc, #360]	@ (800196c <HAL_GPIO_Init+0x334>)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800182c:	d025      	beq.n	800187a <HAL_GPIO_Init+0x242>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4f      	ldr	r2, [pc, #316]	@ (8001970 <HAL_GPIO_Init+0x338>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d01f      	beq.n	8001876 <HAL_GPIO_Init+0x23e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4e      	ldr	r2, [pc, #312]	@ (8001974 <HAL_GPIO_Init+0x33c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d019      	beq.n	8001872 <HAL_GPIO_Init+0x23a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <HAL_GPIO_Init+0x340>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_GPIO_Init+0x236>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4c      	ldr	r2, [pc, #304]	@ (800197c <HAL_GPIO_Init+0x344>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00d      	beq.n	800186a <HAL_GPIO_Init+0x232>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4b      	ldr	r2, [pc, #300]	@ (8001980 <HAL_GPIO_Init+0x348>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d007      	beq.n	8001866 <HAL_GPIO_Init+0x22e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4a      	ldr	r2, [pc, #296]	@ (8001984 <HAL_GPIO_Init+0x34c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_GPIO_Init+0x22a>
 800185e:	2306      	movs	r3, #6
 8001860:	e00c      	b.n	800187c <HAL_GPIO_Init+0x244>
 8001862:	2307      	movs	r3, #7
 8001864:	e00a      	b.n	800187c <HAL_GPIO_Init+0x244>
 8001866:	2305      	movs	r3, #5
 8001868:	e008      	b.n	800187c <HAL_GPIO_Init+0x244>
 800186a:	2304      	movs	r3, #4
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x244>
 800186e:	2303      	movs	r3, #3
 8001870:	e004      	b.n	800187c <HAL_GPIO_Init+0x244>
 8001872:	2302      	movs	r3, #2
 8001874:	e002      	b.n	800187c <HAL_GPIO_Init+0x244>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_GPIO_Init+0x244>
 800187a:	2300      	movs	r3, #0
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	f002 0203 	and.w	r2, r2, #3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4093      	lsls	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800188c:	4937      	ldr	r1, [pc, #220]	@ (800196c <HAL_GPIO_Init+0x334>)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800189a:	4b3b      	ldr	r3, [pc, #236]	@ (8001988 <HAL_GPIO_Init+0x350>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018be:	4a32      	ldr	r2, [pc, #200]	@ (8001988 <HAL_GPIO_Init+0x350>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018c4:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <HAL_GPIO_Init+0x350>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018e8:	4a27      	ldr	r2, [pc, #156]	@ (8001988 <HAL_GPIO_Init+0x350>)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018ee:	4b26      	ldr	r3, [pc, #152]	@ (8001988 <HAL_GPIO_Init+0x350>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001912:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <HAL_GPIO_Init+0x350>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001918:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <HAL_GPIO_Init+0x350>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800193c:	4a12      	ldr	r2, [pc, #72]	@ (8001988 <HAL_GPIO_Init+0x350>)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	f47f ae78 	bne.w	8001648 <HAL_GPIO_Init+0x10>
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	40010000 	.word	0x40010000
 8001970:	48000400 	.word	0x48000400
 8001974:	48000800 	.word	0x48000800
 8001978:	48000c00 	.word	0x48000c00
 800197c:	48001000 	.word	0x48001000
 8001980:	48001400 	.word	0x48001400
 8001984:	48001800 	.word	0x48001800
 8001988:	40010400 	.word	0x40010400

0800198c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40007000 	.word	0x40007000

080019a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019b6:	d130      	bne.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b8:	4b23      	ldr	r3, [pc, #140]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019c4:	d038      	beq.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c6:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019d6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2232      	movs	r2, #50	@ 0x32
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0c9b      	lsrs	r3, r3, #18
 80019e8:	3301      	adds	r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ec:	e002      	b.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a00:	d102      	bne.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f2      	bne.n	80019ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a08:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a14:	d110      	bne.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e00f      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a26:	d007      	beq.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a28:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a30:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	431bde83 	.word	0x431bde83

08001a54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e3ca      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a66:	4b97      	ldr	r3, [pc, #604]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a70:	4b94      	ldr	r3, [pc, #592]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80e4 	beq.w	8001c50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_RCC_OscConfig+0x4a>
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b0c      	cmp	r3, #12
 8001a92:	f040 808b 	bne.w	8001bac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	f040 8087 	bne.w	8001bac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a9e:	4b89      	ldr	r3, [pc, #548]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x62>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e3a2      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1a      	ldr	r2, [r3, #32]
 8001aba:	4b82      	ldr	r3, [pc, #520]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x7c>
 8001ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ace:	e005      	b.n	8001adc <HAL_RCC_OscConfig+0x88>
 8001ad0:	4b7c      	ldr	r3, [pc, #496]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d223      	bcs.n	8001b28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fd55 	bl	8002594 <RCC_SetFlashLatencyFromMSIRange>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e383      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af4:	4b73      	ldr	r3, [pc, #460]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a72      	ldr	r2, [pc, #456]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b70      	ldr	r3, [pc, #448]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	496d      	ldr	r1, [pc, #436]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b12:	4b6c      	ldr	r3, [pc, #432]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	4968      	ldr	r1, [pc, #416]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
 8001b26:	e025      	b.n	8001b74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b28:	4b66      	ldr	r3, [pc, #408]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a65      	ldr	r2, [pc, #404]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b63      	ldr	r3, [pc, #396]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4960      	ldr	r1, [pc, #384]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b46:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	495b      	ldr	r1, [pc, #364]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fd15 	bl	8002594 <RCC_SetFlashLatencyFromMSIRange>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e343      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b74:	f000 fc4a 	bl	800240c <HAL_RCC_GetSysClockFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b52      	ldr	r3, [pc, #328]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	4950      	ldr	r1, [pc, #320]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b90:	4a4e      	ldr	r2, [pc, #312]	@ (8001ccc <HAL_RCC_OscConfig+0x278>)
 8001b92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b94:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f9e7 	bl	8000f6c <HAL_InitTick>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d052      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	e327      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d032      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bb4:	4b43      	ldr	r3, [pc, #268]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a42      	ldr	r2, [pc, #264]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fa24 	bl	800100c <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fa20 	bl	800100c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e310      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bda:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be6:	4b37      	ldr	r3, [pc, #220]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a36      	ldr	r2, [pc, #216]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4931      	ldr	r1, [pc, #196]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c04:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	492c      	ldr	r1, [pc, #176]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
 8001c18:	e01a      	b.n	8001c50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a29      	ldr	r2, [pc, #164]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c26:	f7ff f9f1 	bl	800100c <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f9ed 	bl	800100c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e2dd      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c40:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x1da>
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d074      	beq.n	8001d46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d005      	beq.n	8001c6e <HAL_RCC_OscConfig+0x21a>
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	d10e      	bne.n	8001c86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d10b      	bne.n	8001c86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d064      	beq.n	8001d44 <HAL_RCC_OscConfig+0x2f0>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d160      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e2ba      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x24a>
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e026      	b.n	8001cec <HAL_RCC_OscConfig+0x298>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca6:	d115      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x280>
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a05      	ldr	r2, [pc, #20]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001cae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a02      	ldr	r2, [pc, #8]	@ (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e014      	b.n	8001cec <HAL_RCC_OscConfig+0x298>
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08005ba4 	.word	0x08005ba4
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000004 	.word	0x20000004
 8001cd4:	4ba0      	ldr	r3, [pc, #640]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a9f      	ldr	r2, [pc, #636]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b9d      	ldr	r3, [pc, #628]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a9c      	ldr	r2, [pc, #624]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f98a 	bl	800100c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7ff f986 	bl	800100c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	@ 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e276      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0e:	4b92      	ldr	r3, [pc, #584]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x2a8>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f976 	bl	800100c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff f972 	bl	800100c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	@ 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e262      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d36:	4b88      	ldr	r3, [pc, #544]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x2d0>
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d060      	beq.n	8001e14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_OscConfig+0x310>
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d119      	bne.n	8001d92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d116      	bne.n	8001d92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d64:	4b7c      	ldr	r3, [pc, #496]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_OscConfig+0x328>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e23f      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b76      	ldr	r3, [pc, #472]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	4973      	ldr	r1, [pc, #460]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d90:	e040      	b.n	8001e14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d023      	beq.n	8001de2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff f931 	bl	800100c <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dae:	f7ff f92d 	bl	800100c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e21d      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc0:	4b65      	ldr	r3, [pc, #404]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b62      	ldr	r3, [pc, #392]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	061b      	lsls	r3, r3, #24
 8001dda:	495f      	ldr	r1, [pc, #380]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
 8001de0:	e018      	b.n	8001e14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dee:	f7ff f90d 	bl	800100c <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df6:	f7ff f909 	bl	800100c <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e1f9      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e08:	4b53      	ldr	r3, [pc, #332]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f0      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d03c      	beq.n	8001e9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01c      	beq.n	8001e62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e28:	4b4b      	ldr	r3, [pc, #300]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7ff f8e8 	bl	800100c <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff f8e4 	bl	800100c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1d4      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e52:	4b41      	ldr	r3, [pc, #260]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ef      	beq.n	8001e40 <HAL_RCC_OscConfig+0x3ec>
 8001e60:	e01b      	b.n	8001e9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e62:	4b3d      	ldr	r3, [pc, #244]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e68:	4a3b      	ldr	r2, [pc, #236]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e72:	f7ff f8cb 	bl	800100c <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7a:	f7ff f8c7 	bl	800100c <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e1b7      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e8c:	4b32      	ldr	r3, [pc, #200]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ef      	bne.n	8001e7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80a6 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001eac:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10d      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb8:	4b27      	ldr	r3, [pc, #156]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebc:	4a26      	ldr	r2, [pc, #152]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ec4:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed4:	4b21      	ldr	r3, [pc, #132]	@ (8001f5c <HAL_RCC_OscConfig+0x508>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d118      	bne.n	8001f12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f5c <HAL_RCC_OscConfig+0x508>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f5c <HAL_RCC_OscConfig+0x508>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eec:	f7ff f88e 	bl	800100c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef4:	f7ff f88a 	bl	800100c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e17a      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <HAL_RCC_OscConfig+0x508>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d108      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4d8>
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f20:	4a0d      	ldr	r2, [pc, #52]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f2a:	e029      	b.n	8001f80 <HAL_RCC_OscConfig+0x52c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b05      	cmp	r3, #5
 8001f32:	d115      	bne.n	8001f60 <HAL_RCC_OscConfig+0x50c>
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3a:	4a07      	ldr	r2, [pc, #28]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4a:	4a03      	ldr	r2, [pc, #12]	@ (8001f58 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x52c>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	4b9c      	ldr	r3, [pc, #624]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f66:	4a9b      	ldr	r2, [pc, #620]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f70:	4b98      	ldr	r3, [pc, #608]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f76:	4a97      	ldr	r2, [pc, #604]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d016      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7ff f840 	bl	800100c <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f90:	f7ff f83c 	bl	800100c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e12a      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa6:	4b8b      	ldr	r3, [pc, #556]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ed      	beq.n	8001f90 <HAL_RCC_OscConfig+0x53c>
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7ff f829 	bl	800100c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff f825 	bl	800100c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e113      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd4:	4b7f      	ldr	r3, [pc, #508]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ed      	bne.n	8001fbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe2:	7ffb      	ldrb	r3, [r7, #31]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe8:	4b7a      	ldr	r3, [pc, #488]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fec:	4a79      	ldr	r2, [pc, #484]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8001fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80fe 	beq.w	80021fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	2b02      	cmp	r3, #2
 8002004:	f040 80d0 	bne.w	80021a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002008:	4b72      	ldr	r3, [pc, #456]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 0203 	and.w	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002018:	429a      	cmp	r2, r3
 800201a:	d130      	bne.n	800207e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	3b01      	subs	r3, #1
 8002028:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d127      	bne.n	800207e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002038:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d11f      	bne.n	800207e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002048:	2a07      	cmp	r2, #7
 800204a:	bf14      	ite	ne
 800204c:	2201      	movne	r2, #1
 800204e:	2200      	moveq	r2, #0
 8002050:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002052:	4293      	cmp	r3, r2
 8002054:	d113      	bne.n	800207e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	3b01      	subs	r3, #1
 8002064:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d109      	bne.n	800207e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	3b01      	subs	r3, #1
 8002078:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d06e      	beq.n	800215c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b0c      	cmp	r3, #12
 8002082:	d069      	beq.n	8002158 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002084:	4b53      	ldr	r3, [pc, #332]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002090:	4b50      	ldr	r3, [pc, #320]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0ad      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020a0:	4b4c      	ldr	r3, [pc, #304]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a4b      	ldr	r2, [pc, #300]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 80020a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020ac:	f7fe ffae 	bl	800100c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe ffaa 	bl	800100c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e09a      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c6:	4b43      	ldr	r3, [pc, #268]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d2:	4b40      	ldr	r3, [pc, #256]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	4b40      	ldr	r3, [pc, #256]	@ (80021d8 <HAL_RCC_OscConfig+0x784>)
 80020d8:	4013      	ands	r3, r2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020e2:	3a01      	subs	r2, #1
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	4311      	orrs	r1, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020ec:	0212      	lsls	r2, r2, #8
 80020ee:	4311      	orrs	r1, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020f4:	0852      	lsrs	r2, r2, #1
 80020f6:	3a01      	subs	r2, #1
 80020f8:	0552      	lsls	r2, r2, #21
 80020fa:	4311      	orrs	r1, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002100:	0852      	lsrs	r2, r2, #1
 8002102:	3a01      	subs	r2, #1
 8002104:	0652      	lsls	r2, r2, #25
 8002106:	4311      	orrs	r1, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800210c:	0912      	lsrs	r2, r2, #4
 800210e:	0452      	lsls	r2, r2, #17
 8002110:	430a      	orrs	r2, r1
 8002112:	4930      	ldr	r1, [pc, #192]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8002114:	4313      	orrs	r3, r2
 8002116:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002118:	4b2e      	ldr	r3, [pc, #184]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a2d      	ldr	r2, [pc, #180]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 800211e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002122:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002124:	4b2b      	ldr	r3, [pc, #172]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a2a      	ldr	r2, [pc, #168]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 800212a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800212e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002130:	f7fe ff6c 	bl	800100c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe ff68 	bl	800100c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e058      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214a:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002156:	e050      	b.n	80021fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e04f      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215c:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d148      	bne.n	80021fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002168:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a19      	ldr	r2, [pc, #100]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 800216e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002172:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002174:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a16      	ldr	r2, [pc, #88]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800217e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002180:	f7fe ff44 	bl	800100c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7fe ff40 	bl	800100c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e030      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x734>
 80021a6:	e028      	b.n	80021fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	d023      	beq.n	80021f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a08      	ldr	r2, [pc, #32]	@ (80021d4 <HAL_RCC_OscConfig+0x780>)
 80021b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7fe ff27 	bl	800100c <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c0:	e00c      	b.n	80021dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c2:	f7fe ff23 	bl	800100c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d905      	bls.n	80021dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e013      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
 80021d4:	40021000 	.word	0x40021000
 80021d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021dc:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <HAL_RCC_OscConfig+0x7b0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ec      	bne.n	80021c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_RCC_OscConfig+0x7b0>)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	4905      	ldr	r1, [pc, #20]	@ (8002204 <HAL_RCC_OscConfig+0x7b0>)
 80021ee:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_RCC_OscConfig+0x7b4>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
 80021f4:	e001      	b.n	80021fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3720      	adds	r7, #32
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	feeefffc 	.word	0xfeeefffc

0800220c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0e7      	b.n	80023f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002220:	4b75      	ldr	r3, [pc, #468]	@ (80023f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d910      	bls.n	8002250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b72      	ldr	r3, [pc, #456]	@ (80023f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 0207 	bic.w	r2, r3, #7
 8002236:	4970      	ldr	r1, [pc, #448]	@ (80023f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b6e      	ldr	r3, [pc, #440]	@ (80023f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0cf      	b.n	80023f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d010      	beq.n	800227e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	4b66      	ldr	r3, [pc, #408]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002268:	429a      	cmp	r2, r3
 800226a:	d908      	bls.n	800227e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b63      	ldr	r3, [pc, #396]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4960      	ldr	r1, [pc, #384]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d04c      	beq.n	8002324 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002292:	4b5a      	ldr	r3, [pc, #360]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d121      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0a6      	b.n	80023f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022aa:	4b54      	ldr	r3, [pc, #336]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d115      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e09a      	b.n	80023f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c2:	4b4e      	ldr	r3, [pc, #312]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e08e      	b.n	80023f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d2:	4b4a      	ldr	r3, [pc, #296]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e086      	b.n	80023f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022e2:	4b46      	ldr	r3, [pc, #280]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f023 0203 	bic.w	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4943      	ldr	r1, [pc, #268]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f4:	f7fe fe8a 	bl	800100c <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7fe fe86 	bl	800100c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e06e      	b.n	80023f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	4b3a      	ldr	r3, [pc, #232]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 020c 	and.w	r2, r3, #12
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	429a      	cmp	r2, r3
 8002322:	d1eb      	bne.n	80022fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d010      	beq.n	8002352 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	4b31      	ldr	r3, [pc, #196]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800233c:	429a      	cmp	r2, r3
 800233e:	d208      	bcs.n	8002352 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b2e      	ldr	r3, [pc, #184]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	492b      	ldr	r1, [pc, #172]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002352:	4b29      	ldr	r3, [pc, #164]	@ (80023f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d210      	bcs.n	8002382 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002360:	4b25      	ldr	r3, [pc, #148]	@ (80023f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 0207 	bic.w	r2, r3, #7
 8002368:	4923      	ldr	r1, [pc, #140]	@ (80023f8 <HAL_RCC_ClockConfig+0x1ec>)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002370:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d001      	beq.n	8002382 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e036      	b.n	80023f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238e:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	4918      	ldr	r1, [pc, #96]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d009      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ac:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4910      	ldr	r1, [pc, #64]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023c0:	f000 f824 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	490b      	ldr	r1, [pc, #44]	@ (8002400 <HAL_RCC_ClockConfig+0x1f4>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
 80023dc:	4a09      	ldr	r2, [pc, #36]	@ (8002404 <HAL_RCC_ClockConfig+0x1f8>)
 80023de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023e0:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_RCC_ClockConfig+0x1fc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fdc1 	bl	8000f6c <HAL_InitTick>
 80023ea:	4603      	mov	r3, r0
 80023ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80023ee:	7afb      	ldrb	r3, [r7, #11]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40021000 	.word	0x40021000
 8002400:	08005ba4 	.word	0x08005ba4
 8002404:	20000000 	.word	0x20000000
 8002408:	20000004 	.word	0x20000004

0800240c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	@ 0x24
 8002410:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800241a:	4b3e      	ldr	r3, [pc, #248]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x108>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002424:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x108>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x34>
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d121      	bne.n	800247e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d11e      	bne.n	800247e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002440:	4b34      	ldr	r3, [pc, #208]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x108>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d107      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800244c:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x108>)
 800244e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	e005      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800245c:	4b2d      	ldr	r3, [pc, #180]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x108>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002468:	4a2b      	ldr	r2, [pc, #172]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x10c>)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002470:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10d      	bne.n	8002494 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b04      	cmp	r3, #4
 8002482:	d102      	bne.n	800248a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002484:	4b25      	ldr	r3, [pc, #148]	@ (800251c <HAL_RCC_GetSysClockFreq+0x110>)
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	e004      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d101      	bne.n	8002494 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002490:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x114>)
 8002492:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	2b0c      	cmp	r3, #12
 8002498:	d134      	bne.n	8002504 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800249a:	4b1e      	ldr	r3, [pc, #120]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x108>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d003      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d003      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0xac>
 80024b0:	e005      	b.n	80024be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024b2:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <HAL_RCC_GetSysClockFreq+0x110>)
 80024b4:	617b      	str	r3, [r7, #20]
      break;
 80024b6:	e005      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024b8:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ba:	617b      	str	r3, [r7, #20]
      break;
 80024bc:	e002      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	617b      	str	r3, [r7, #20]
      break;
 80024c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	3301      	adds	r3, #1
 80024d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	fb03 f202 	mul.w	r2, r3, r2
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	0e5b      	lsrs	r3, r3, #25
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	3301      	adds	r3, #1
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002504:	69bb      	ldr	r3, [r7, #24]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	08005bbc 	.word	0x08005bbc
 800251c:	00f42400 	.word	0x00f42400
 8002520:	007a1200 	.word	0x007a1200

08002524 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002528:	4b03      	ldr	r3, [pc, #12]	@ (8002538 <HAL_RCC_GetHCLKFreq+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000000 	.word	0x20000000

0800253c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002540:	f7ff fff0 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	4904      	ldr	r1, [pc, #16]	@ (8002564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	08005bb4 	.word	0x08005bb4

08002568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800256c:	f7ff ffda 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0adb      	lsrs	r3, r3, #11
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4904      	ldr	r1, [pc, #16]	@ (8002590 <HAL_RCC_GetPCLK2Freq+0x28>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	08005bb4 	.word	0x08005bb4

08002594 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025a0:	4b2a      	ldr	r3, [pc, #168]	@ (800264c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025ac:	f7ff f9ee 	bl	800198c <HAL_PWREx_GetVoltageRange>
 80025b0:	6178      	str	r0, [r7, #20]
 80025b2:	e014      	b.n	80025de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025b4:	4b25      	ldr	r3, [pc, #148]	@ (800264c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	4a24      	ldr	r2, [pc, #144]	@ (800264c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025be:	6593      	str	r3, [r2, #88]	@ 0x58
 80025c0:	4b22      	ldr	r3, [pc, #136]	@ (800264c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025cc:	f7ff f9de 	bl	800198c <HAL_PWREx_GetVoltageRange>
 80025d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025d2:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d6:	4a1d      	ldr	r2, [pc, #116]	@ (800264c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025e4:	d10b      	bne.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b80      	cmp	r3, #128	@ 0x80
 80025ea:	d919      	bls.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80025f0:	d902      	bls.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025f2:	2302      	movs	r3, #2
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	e013      	b.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025f8:	2301      	movs	r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	e010      	b.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b80      	cmp	r3, #128	@ 0x80
 8002602:	d902      	bls.n	800260a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002604:	2303      	movs	r3, #3
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e00a      	b.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b80      	cmp	r3, #128	@ 0x80
 800260e:	d102      	bne.n	8002616 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002610:	2302      	movs	r3, #2
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	e004      	b.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b70      	cmp	r3, #112	@ 0x70
 800261a:	d101      	bne.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800261c:	2301      	movs	r3, #1
 800261e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002620:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 0207 	bic.w	r2, r3, #7
 8002628:	4909      	ldr	r1, [pc, #36]	@ (8002650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002630:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	429a      	cmp	r2, r3
 800263c:	d001      	beq.n	8002642 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	40022000 	.word	0x40022000

08002654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800265c:	2300      	movs	r3, #0
 800265e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002660:	2300      	movs	r3, #0
 8002662:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800266c:	2b00      	cmp	r3, #0
 800266e:	d041      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002674:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002678:	d02a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800267a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800267e:	d824      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002680:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002684:	d008      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002686:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800268a:	d81e      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002690:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002694:	d010      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002696:	e018      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002698:	4b86      	ldr	r3, [pc, #536]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a85      	ldr	r2, [pc, #532]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026a4:	e015      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fabb 	bl	8002c28 <RCCEx_PLLSAI1_Config>
 80026b2:	4603      	mov	r3, r0
 80026b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026b6:	e00c      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3320      	adds	r3, #32
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fba6 	bl	8002e10 <RCCEx_PLLSAI2_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c8:	e003      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	74fb      	strb	r3, [r7, #19]
      break;
 80026ce:	e000      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d2:	7cfb      	ldrb	r3, [r7, #19]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10b      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026d8:	4b76      	ldr	r3, [pc, #472]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026e6:	4973      	ldr	r1, [pc, #460]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026ee:	e001      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d041      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002704:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002708:	d02a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800270a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800270e:	d824      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002710:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002714:	d008      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002716:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800271a:	d81e      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002724:	d010      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002726:	e018      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002728:	4b62      	ldr	r3, [pc, #392]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a61      	ldr	r2, [pc, #388]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002732:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002734:	e015      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3304      	adds	r3, #4
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fa73 	bl	8002c28 <RCCEx_PLLSAI1_Config>
 8002742:	4603      	mov	r3, r0
 8002744:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002746:	e00c      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3320      	adds	r3, #32
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fb5e 	bl	8002e10 <RCCEx_PLLSAI2_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002758:	e003      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	74fb      	strb	r3, [r7, #19]
      break;
 800275e:	e000      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10b      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002768:	4b52      	ldr	r3, [pc, #328]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002776:	494f      	ldr	r1, [pc, #316]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800277e:	e001      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80a0 	beq.w	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002796:	4b47      	ldr	r3, [pc, #284]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00d      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ac:	4b41      	ldr	r3, [pc, #260]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b0:	4a40      	ldr	r2, [pc, #256]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027b8:	4b3e      	ldr	r3, [pc, #248]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c4:	2301      	movs	r3, #1
 80027c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027c8:	4b3b      	ldr	r3, [pc, #236]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a3a      	ldr	r2, [pc, #232]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027d4:	f7fe fc1a 	bl	800100c <HAL_GetTick>
 80027d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027da:	e009      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027dc:	f7fe fc16 	bl	800100c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d902      	bls.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	74fb      	strb	r3, [r7, #19]
        break;
 80027ee:	e005      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027f0:	4b31      	ldr	r3, [pc, #196]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ef      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d15c      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002802:	4b2c      	ldr	r3, [pc, #176]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002808:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800280c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01f      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	429a      	cmp	r2, r3
 800281e:	d019      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002820:	4b24      	ldr	r3, [pc, #144]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800282a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800282c:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002832:	4a20      	ldr	r2, [pc, #128]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800283c:	4b1d      	ldr	r3, [pc, #116]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002842:	4a1c      	ldr	r2, [pc, #112]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800284c:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d016      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7fe fbd5 	bl	800100c <HAL_GetTick>
 8002862:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002864:	e00b      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7fe fbd1 	bl	800100c <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d902      	bls.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	74fb      	strb	r3, [r7, #19]
            break;
 800287c:	e006      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287e:	4b0d      	ldr	r3, [pc, #52]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ec      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10c      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002892:	4b08      	ldr	r3, [pc, #32]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002898:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028a2:	4904      	ldr	r1, [pc, #16]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028aa:	e009      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	74bb      	strb	r3, [r7, #18]
 80028b0:	e006      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c0:	7c7b      	ldrb	r3, [r7, #17]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c6:	4b9e      	ldr	r3, [pc, #632]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ca:	4a9d      	ldr	r2, [pc, #628]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028de:	4b98      	ldr	r3, [pc, #608]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e4:	f023 0203 	bic.w	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ec:	4994      	ldr	r1, [pc, #592]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002900:	4b8f      	ldr	r3, [pc, #572]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002906:	f023 020c 	bic.w	r2, r3, #12
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290e:	498c      	ldr	r1, [pc, #560]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002922:	4b87      	ldr	r3, [pc, #540]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002928:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	4983      	ldr	r1, [pc, #524]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002944:	4b7e      	ldr	r3, [pc, #504]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	497b      	ldr	r1, [pc, #492]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002966:	4b76      	ldr	r3, [pc, #472]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002974:	4972      	ldr	r1, [pc, #456]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002988:	4b6d      	ldr	r3, [pc, #436]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002996:	496a      	ldr	r1, [pc, #424]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029aa:	4b65      	ldr	r3, [pc, #404]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b8:	4961      	ldr	r1, [pc, #388]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029da:	4959      	ldr	r1, [pc, #356]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ee:	4b54      	ldr	r3, [pc, #336]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029fc:	4950      	ldr	r1, [pc, #320]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a10:	4b4b      	ldr	r3, [pc, #300]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1e:	4948      	ldr	r1, [pc, #288]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a32:	4b43      	ldr	r3, [pc, #268]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a40:	493f      	ldr	r1, [pc, #252]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d028      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a54:	4b3a      	ldr	r3, [pc, #232]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a62:	4937      	ldr	r1, [pc, #220]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a72:	d106      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a74:	4b32      	ldr	r3, [pc, #200]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a31      	ldr	r2, [pc, #196]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a7e:	60d3      	str	r3, [r2, #12]
 8002a80:	e011      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	2101      	movs	r1, #1
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f8c8 	bl	8002c28 <RCCEx_PLLSAI1_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d028      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ab2:	4b23      	ldr	r3, [pc, #140]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac0:	491f      	ldr	r1, [pc, #124]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002acc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ad0:	d106      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002adc:	60d3      	str	r3, [r2, #12]
 8002ade:	e011      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	2101      	movs	r1, #1
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 f899 	bl	8002c28 <RCCEx_PLLSAI1_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d02b      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b1e:	4908      	ldr	r1, [pc, #32]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b2e:	d109      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b30:	4b03      	ldr	r3, [pc, #12]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a02      	ldr	r2, [pc, #8]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b3a:	60d3      	str	r3, [r2, #12]
 8002b3c:	e014      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2101      	movs	r1, #1
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 f867 	bl	8002c28 <RCCEx_PLLSAI1_Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b5e:	7cfb      	ldrb	r3, [r7, #19]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d02f      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b74:	4b2b      	ldr	r3, [pc, #172]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b82:	4928      	ldr	r1, [pc, #160]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b92:	d10d      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3304      	adds	r3, #4
 8002b98:	2102      	movs	r1, #2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 f844 	bl	8002c28 <RCCEx_PLLSAI1_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ba4:	7cfb      	ldrb	r3, [r7, #19]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d014      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002baa:	7cfb      	ldrb	r3, [r7, #19]
 8002bac:	74bb      	strb	r3, [r7, #18]
 8002bae:	e011      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3320      	adds	r3, #32
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 f925 	bl	8002e10 <RCCEx_PLLSAI2_Config>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bca:	7cfb      	ldrb	r3, [r7, #19]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bd0:	7cfb      	ldrb	r3, [r7, #19]
 8002bd2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002be0:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bee:	490d      	ldr	r1, [pc, #52]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c02:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c12:	4904      	ldr	r1, [pc, #16]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000

08002c28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c36:	4b75      	ldr	r3, [pc, #468]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d018      	beq.n	8002c74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c42:	4b72      	ldr	r3, [pc, #456]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0203 	and.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d10d      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
       ||
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c5a:	4b6c      	ldr	r3, [pc, #432]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
       ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d047      	beq.n	8002cfe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
 8002c72:	e044      	b.n	8002cfe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d018      	beq.n	8002cae <RCCEx_PLLSAI1_Config+0x86>
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d825      	bhi.n	8002ccc <RCCEx_PLLSAI1_Config+0xa4>
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d002      	beq.n	8002c8a <RCCEx_PLLSAI1_Config+0x62>
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d009      	beq.n	8002c9c <RCCEx_PLLSAI1_Config+0x74>
 8002c88:	e020      	b.n	8002ccc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c8a:	4b60      	ldr	r3, [pc, #384]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d11d      	bne.n	8002cd2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9a:	e01a      	b.n	8002cd2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c9c:	4b5b      	ldr	r3, [pc, #364]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d116      	bne.n	8002cd6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cac:	e013      	b.n	8002cd6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cae:	4b57      	ldr	r3, [pc, #348]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10f      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cba:	4b54      	ldr	r3, [pc, #336]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cca:	e006      	b.n	8002cda <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd0:	e004      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e002      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e000      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cda:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	4944      	ldr	r1, [pc, #272]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d17d      	bne.n	8002e00 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d04:	4b41      	ldr	r3, [pc, #260]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a40      	ldr	r2, [pc, #256]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d10:	f7fe f97c 	bl	800100c <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d16:	e009      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d18:	f7fe f978 	bl	800100c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d902      	bls.n	8002d2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	73fb      	strb	r3, [r7, #15]
        break;
 8002d2a:	e005      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d2c:	4b37      	ldr	r3, [pc, #220]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ef      	bne.n	8002d18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d160      	bne.n	8002e00 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d111      	bne.n	8002d68 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d44:	4b31      	ldr	r3, [pc, #196]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6892      	ldr	r2, [r2, #8]
 8002d54:	0211      	lsls	r1, r2, #8
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68d2      	ldr	r2, [r2, #12]
 8002d5a:	0912      	lsrs	r2, r2, #4
 8002d5c:	0452      	lsls	r2, r2, #17
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	492a      	ldr	r1, [pc, #168]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	610b      	str	r3, [r1, #16]
 8002d66:	e027      	b.n	8002db8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d112      	bne.n	8002d94 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d6e:	4b27      	ldr	r3, [pc, #156]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d76:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6892      	ldr	r2, [r2, #8]
 8002d7e:	0211      	lsls	r1, r2, #8
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6912      	ldr	r2, [r2, #16]
 8002d84:	0852      	lsrs	r2, r2, #1
 8002d86:	3a01      	subs	r2, #1
 8002d88:	0552      	lsls	r2, r2, #21
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	491f      	ldr	r1, [pc, #124]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	610b      	str	r3, [r1, #16]
 8002d92:	e011      	b.n	8002db8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d94:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6892      	ldr	r2, [r2, #8]
 8002da4:	0211      	lsls	r1, r2, #8
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6952      	ldr	r2, [r2, #20]
 8002daa:	0852      	lsrs	r2, r2, #1
 8002dac:	3a01      	subs	r2, #1
 8002dae:	0652      	lsls	r2, r2, #25
 8002db0:	430a      	orrs	r2, r1
 8002db2:	4916      	ldr	r1, [pc, #88]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002db8:	4b14      	ldr	r3, [pc, #80]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a13      	ldr	r2, [pc, #76]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002dc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7fe f922 	bl	800100c <HAL_GetTick>
 8002dc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dca:	e009      	b.n	8002de0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dcc:	f7fe f91e 	bl	800100c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d902      	bls.n	8002de0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	73fb      	strb	r3, [r7, #15]
          break;
 8002dde:	e005      	b.n	8002dec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002de0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ef      	beq.n	8002dcc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002df2:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	4904      	ldr	r1, [pc, #16]	@ (8002e0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000

08002e10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e2a:	4b67      	ldr	r3, [pc, #412]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0203 	and.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d10d      	bne.n	8002e56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e42:	4b61      	ldr	r3, [pc, #388]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
       ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d047      	beq.n	8002ee6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
 8002e5a:	e044      	b.n	8002ee6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d018      	beq.n	8002e96 <RCCEx_PLLSAI2_Config+0x86>
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d825      	bhi.n	8002eb4 <RCCEx_PLLSAI2_Config+0xa4>
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d002      	beq.n	8002e72 <RCCEx_PLLSAI2_Config+0x62>
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d009      	beq.n	8002e84 <RCCEx_PLLSAI2_Config+0x74>
 8002e70:	e020      	b.n	8002eb4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e72:	4b55      	ldr	r3, [pc, #340]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d11d      	bne.n	8002eba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e82:	e01a      	b.n	8002eba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e84:	4b50      	ldr	r3, [pc, #320]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d116      	bne.n	8002ebe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e94:	e013      	b.n	8002ebe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e96:	4b4c      	ldr	r3, [pc, #304]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ea2:	4b49      	ldr	r3, [pc, #292]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eb2:	e006      	b.n	8002ec2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb8:	e004      	b.n	8002ec4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e002      	b.n	8002ec4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e000      	b.n	8002ec4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ec2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10d      	bne.n	8002ee6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eca:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	4939      	ldr	r1, [pc, #228]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d167      	bne.n	8002fbc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002eec:	4b36      	ldr	r3, [pc, #216]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a35      	ldr	r2, [pc, #212]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef8:	f7fe f888 	bl	800100c <HAL_GetTick>
 8002efc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002efe:	e009      	b.n	8002f14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f00:	f7fe f884 	bl	800100c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d902      	bls.n	8002f14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	73fb      	strb	r3, [r7, #15]
        break;
 8002f12:	e005      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f14:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ef      	bne.n	8002f00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d14a      	bne.n	8002fbc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d111      	bne.n	8002f50 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f2c:	4b26      	ldr	r3, [pc, #152]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6892      	ldr	r2, [r2, #8]
 8002f3c:	0211      	lsls	r1, r2, #8
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68d2      	ldr	r2, [r2, #12]
 8002f42:	0912      	lsrs	r2, r2, #4
 8002f44:	0452      	lsls	r2, r2, #17
 8002f46:	430a      	orrs	r2, r1
 8002f48:	491f      	ldr	r1, [pc, #124]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	614b      	str	r3, [r1, #20]
 8002f4e:	e011      	b.n	8002f74 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f50:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6892      	ldr	r2, [r2, #8]
 8002f60:	0211      	lsls	r1, r2, #8
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6912      	ldr	r2, [r2, #16]
 8002f66:	0852      	lsrs	r2, r2, #1
 8002f68:	3a01      	subs	r2, #1
 8002f6a:	0652      	lsls	r2, r2, #25
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	4916      	ldr	r1, [pc, #88]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f74:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a13      	ldr	r2, [pc, #76]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fe f844 	bl	800100c <HAL_GetTick>
 8002f84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f86:	e009      	b.n	8002f9c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f88:	f7fe f840 	bl	800100c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d902      	bls.n	8002f9c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	73fb      	strb	r3, [r7, #15]
          break;
 8002f9a:	e005      	b.n	8002fa8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ef      	beq.n	8002f88 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	4904      	ldr	r1, [pc, #16]	@ (8002fc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000

08002fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e049      	b.n	8003072 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fd86 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f001 f9e8 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d001      	beq.n	8003094 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e047      	b.n	8003124 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a23      	ldr	r2, [pc, #140]	@ (8003130 <HAL_TIM_Base_Start+0xb4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01d      	beq.n	80030e2 <HAL_TIM_Base_Start+0x66>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ae:	d018      	beq.n	80030e2 <HAL_TIM_Base_Start+0x66>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003134 <HAL_TIM_Base_Start+0xb8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_TIM_Base_Start+0x66>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1e      	ldr	r2, [pc, #120]	@ (8003138 <HAL_TIM_Base_Start+0xbc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <HAL_TIM_Base_Start+0x66>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1c      	ldr	r2, [pc, #112]	@ (800313c <HAL_TIM_Base_Start+0xc0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d009      	beq.n	80030e2 <HAL_TIM_Base_Start+0x66>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003140 <HAL_TIM_Base_Start+0xc4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_TIM_Base_Start+0x66>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a19      	ldr	r2, [pc, #100]	@ (8003144 <HAL_TIM_Base_Start+0xc8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d115      	bne.n	800310e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	4b17      	ldr	r3, [pc, #92]	@ (8003148 <HAL_TIM_Base_Start+0xcc>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b06      	cmp	r3, #6
 80030f2:	d015      	beq.n	8003120 <HAL_TIM_Base_Start+0xa4>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030fa:	d011      	beq.n	8003120 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310c:	e008      	b.n	8003120 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e000      	b.n	8003122 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003120:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40000400 	.word	0x40000400
 8003138:	40000800 	.word	0x40000800
 800313c:	40000c00 	.word	0x40000c00
 8003140:	40013400 	.word	0x40013400
 8003144:	40014000 	.word	0x40014000
 8003148:	00010007 	.word	0x00010007

0800314c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e049      	b.n	80031f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f841 	bl	80031fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3304      	adds	r3, #4
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f001 f928 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d109      	bne.n	800323c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e03c      	b.n	80032b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b04      	cmp	r3, #4
 8003240:	d109      	bne.n	8003256 <HAL_TIM_PWM_Start_DMA+0x46>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	bf0c      	ite	eq
 800324e:	2301      	moveq	r3, #1
 8003250:	2300      	movne	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e02f      	b.n	80032b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d109      	bne.n	8003270 <HAL_TIM_PWM_Start_DMA+0x60>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e022      	b.n	80032b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d109      	bne.n	800328a <HAL_TIM_PWM_Start_DMA+0x7a>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	bf0c      	ite	eq
 8003282:	2301      	moveq	r3, #1
 8003284:	2300      	movne	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e015      	b.n	80032b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b10      	cmp	r3, #16
 800328e:	d109      	bne.n	80032a4 <HAL_TIM_PWM_Start_DMA+0x94>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e008      	b.n	80032b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
 80032bc:	e1ab      	b.n	8003616 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e03c      	b.n	8003352 <HAL_TIM_PWM_Start_DMA+0x142>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d109      	bne.n	80032f2 <HAL_TIM_PWM_Start_DMA+0xe2>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	e02f      	b.n	8003352 <HAL_TIM_PWM_Start_DMA+0x142>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d109      	bne.n	800330c <HAL_TIM_PWM_Start_DMA+0xfc>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e022      	b.n	8003352 <HAL_TIM_PWM_Start_DMA+0x142>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d109      	bne.n	8003326 <HAL_TIM_PWM_Start_DMA+0x116>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b01      	cmp	r3, #1
 800331c:	bf0c      	ite	eq
 800331e:	2301      	moveq	r3, #1
 8003320:	2300      	movne	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e015      	b.n	8003352 <HAL_TIM_PWM_Start_DMA+0x142>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b10      	cmp	r3, #16
 800332a:	d109      	bne.n	8003340 <HAL_TIM_PWM_Start_DMA+0x130>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e008      	b.n	8003352 <HAL_TIM_PWM_Start_DMA+0x142>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d034      	beq.n	80033c0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_TIM_PWM_Start_DMA+0x152>
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e157      	b.n	8003616 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <HAL_TIM_PWM_Start_DMA+0x166>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003374:	e026      	b.n	80033c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b04      	cmp	r3, #4
 800337a:	d104      	bne.n	8003386 <HAL_TIM_PWM_Start_DMA+0x176>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003384:	e01e      	b.n	80033c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d104      	bne.n	8003396 <HAL_TIM_PWM_Start_DMA+0x186>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003394:	e016      	b.n	80033c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b0c      	cmp	r3, #12
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x196>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033a4:	e00e      	b.n	80033c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d104      	bne.n	80033b6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033b4:	e006      	b.n	80033c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033be:	e001      	b.n	80033c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e128      	b.n	8003616 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	f200 80ae 	bhi.w	8003528 <HAL_TIM_PWM_Start_DMA+0x318>
 80033cc:	a201      	add	r2, pc, #4	@ (adr r2, 80033d4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	08003409 	.word	0x08003409
 80033d8:	08003529 	.word	0x08003529
 80033dc:	08003529 	.word	0x08003529
 80033e0:	08003529 	.word	0x08003529
 80033e4:	08003451 	.word	0x08003451
 80033e8:	08003529 	.word	0x08003529
 80033ec:	08003529 	.word	0x08003529
 80033f0:	08003529 	.word	0x08003529
 80033f4:	08003499 	.word	0x08003499
 80033f8:	08003529 	.word	0x08003529
 80033fc:	08003529 	.word	0x08003529
 8003400:	08003529 	.word	0x08003529
 8003404:	080034e1 	.word	0x080034e1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	4a84      	ldr	r2, [pc, #528]	@ (8003620 <HAL_TIM_PWM_Start_DMA+0x410>)
 800340e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	4a83      	ldr	r2, [pc, #524]	@ (8003624 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003416:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	4a82      	ldr	r2, [pc, #520]	@ (8003628 <HAL_TIM_PWM_Start_DMA+0x418>)
 800341e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3334      	adds	r3, #52	@ 0x34
 800342c:	461a      	mov	r2, r3
 800342e:	887b      	ldrh	r3, [r7, #2]
 8003430:	f7fd ffc2 	bl	80013b8 <HAL_DMA_Start_IT>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0eb      	b.n	8003616 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800344c:	60da      	str	r2, [r3, #12]
      break;
 800344e:	e06e      	b.n	800352e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003454:	4a72      	ldr	r2, [pc, #456]	@ (8003620 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003456:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345c:	4a71      	ldr	r2, [pc, #452]	@ (8003624 <HAL_TIM_PWM_Start_DMA+0x414>)
 800345e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	4a70      	ldr	r2, [pc, #448]	@ (8003628 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003466:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3338      	adds	r3, #56	@ 0x38
 8003474:	461a      	mov	r2, r3
 8003476:	887b      	ldrh	r3, [r7, #2]
 8003478:	f7fd ff9e 	bl	80013b8 <HAL_DMA_Start_IT>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0c7      	b.n	8003616 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003494:	60da      	str	r2, [r3, #12]
      break;
 8003496:	e04a      	b.n	800352e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	4a60      	ldr	r2, [pc, #384]	@ (8003620 <HAL_TIM_PWM_Start_DMA+0x410>)
 800349e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	4a5f      	ldr	r2, [pc, #380]	@ (8003624 <HAL_TIM_PWM_Start_DMA+0x414>)
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ac:	4a5e      	ldr	r2, [pc, #376]	@ (8003628 <HAL_TIM_PWM_Start_DMA+0x418>)
 80034ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	333c      	adds	r3, #60	@ 0x3c
 80034bc:	461a      	mov	r2, r3
 80034be:	887b      	ldrh	r3, [r7, #2]
 80034c0:	f7fd ff7a 	bl	80013b8 <HAL_DMA_Start_IT>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0a3      	b.n	8003616 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034dc:	60da      	str	r2, [r3, #12]
      break;
 80034de:	e026      	b.n	800352e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003620 <HAL_TIM_PWM_Start_DMA+0x410>)
 80034e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003624 <HAL_TIM_PWM_Start_DMA+0x414>)
 80034ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003628 <HAL_TIM_PWM_Start_DMA+0x418>)
 80034f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3340      	adds	r3, #64	@ 0x40
 8003504:	461a      	mov	r2, r3
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	f7fd ff56 	bl	80013b8 <HAL_DMA_Start_IT>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e07f      	b.n	8003616 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003524:	60da      	str	r2, [r3, #12]
      break;
 8003526:	e002      	b.n	800352e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
      break;
 800352c:	bf00      	nop
  }

  if (status == HAL_OK)
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d16f      	bne.n	8003614 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2201      	movs	r2, #1
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	4618      	mov	r0, r3
 800353e:	f001 fd11 	bl	8004f64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a39      	ldr	r2, [pc, #228]	@ (800362c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_TIM_PWM_Start_DMA+0x364>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a37      	ldr	r2, [pc, #220]	@ (8003630 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_TIM_PWM_Start_DMA+0x364>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a36      	ldr	r2, [pc, #216]	@ (8003634 <HAL_TIM_PWM_Start_DMA+0x424>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_TIM_PWM_Start_DMA+0x364>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a34      	ldr	r2, [pc, #208]	@ (8003638 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_TIM_PWM_Start_DMA+0x364>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a33      	ldr	r2, [pc, #204]	@ (800363c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d101      	bne.n	8003578 <HAL_TIM_PWM_Start_DMA+0x368>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_TIM_PWM_Start_DMA+0x36a>
 8003578:	2300      	movs	r3, #0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a26      	ldr	r2, [pc, #152]	@ (800362c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d01d      	beq.n	80035d4 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a0:	d018      	beq.n	80035d4 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a26      	ldr	r2, [pc, #152]	@ (8003640 <HAL_TIM_PWM_Start_DMA+0x430>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d013      	beq.n	80035d4 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a24      	ldr	r2, [pc, #144]	@ (8003644 <HAL_TIM_PWM_Start_DMA+0x434>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a23      	ldr	r2, [pc, #140]	@ (8003648 <HAL_TIM_PWM_Start_DMA+0x438>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003630 <HAL_TIM_PWM_Start_DMA+0x420>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a19      	ldr	r2, [pc, #100]	@ (8003634 <HAL_TIM_PWM_Start_DMA+0x424>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d115      	bne.n	8003600 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	4b1c      	ldr	r3, [pc, #112]	@ (800364c <HAL_TIM_PWM_Start_DMA+0x43c>)
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d015      	beq.n	8003612 <HAL_TIM_PWM_Start_DMA+0x402>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ec:	d011      	beq.n	8003612 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	e008      	b.n	8003612 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e000      	b.n	8003614 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003612:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	080042cf 	.word	0x080042cf
 8003624:	08004377 	.word	0x08004377
 8003628:	0800423d 	.word	0x0800423d
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40013400 	.word	0x40013400
 8003634:	40014000 	.word	0x40014000
 8003638:	40014400 	.word	0x40014400
 800363c:	40014800 	.word	0x40014800
 8003640:	40000400 	.word	0x40000400
 8003644:	40000800 	.word	0x40000800
 8003648:	40000c00 	.word	0x40000c00
 800364c:	00010007 	.word	0x00010007

08003650 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e049      	b.n	80036f6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f841 	bl	80036fe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f000 fea6 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <HAL_TIM_IC_Start_IT+0x1e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800372e:	b2db      	uxtb	r3, r3
 8003730:	e023      	b.n	800377a <HAL_TIM_IC_Start_IT+0x66>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b04      	cmp	r3, #4
 8003736:	d104      	bne.n	8003742 <HAL_TIM_IC_Start_IT+0x2e>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800373e:	b2db      	uxtb	r3, r3
 8003740:	e01b      	b.n	800377a <HAL_TIM_IC_Start_IT+0x66>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d104      	bne.n	8003752 <HAL_TIM_IC_Start_IT+0x3e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800374e:	b2db      	uxtb	r3, r3
 8003750:	e013      	b.n	800377a <HAL_TIM_IC_Start_IT+0x66>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	d104      	bne.n	8003762 <HAL_TIM_IC_Start_IT+0x4e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e00b      	b.n	800377a <HAL_TIM_IC_Start_IT+0x66>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b10      	cmp	r3, #16
 8003766:	d104      	bne.n	8003772 <HAL_TIM_IC_Start_IT+0x5e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800376e:	b2db      	uxtb	r3, r3
 8003770:	e003      	b.n	800377a <HAL_TIM_IC_Start_IT+0x66>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003778:	b2db      	uxtb	r3, r3
 800377a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <HAL_TIM_IC_Start_IT+0x78>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e013      	b.n	80037b4 <HAL_TIM_IC_Start_IT+0xa0>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2b04      	cmp	r3, #4
 8003790:	d104      	bne.n	800379c <HAL_TIM_IC_Start_IT+0x88>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e00b      	b.n	80037b4 <HAL_TIM_IC_Start_IT+0xa0>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d104      	bne.n	80037ac <HAL_TIM_IC_Start_IT+0x98>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e003      	b.n	80037b4 <HAL_TIM_IC_Start_IT+0xa0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037b6:	7bbb      	ldrb	r3, [r7, #14]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d102      	bne.n	80037c2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80037bc:	7b7b      	ldrb	r3, [r7, #13]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d001      	beq.n	80037c6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0dd      	b.n	8003982 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_IC_Start_IT+0xc2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037d4:	e023      	b.n	800381e <HAL_TIM_IC_Start_IT+0x10a>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_IC_Start_IT+0xd2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037e4:	e01b      	b.n	800381e <HAL_TIM_IC_Start_IT+0x10a>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_IC_Start_IT+0xe2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037f4:	e013      	b.n	800381e <HAL_TIM_IC_Start_IT+0x10a>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_IC_Start_IT+0xf2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003804:	e00b      	b.n	800381e <HAL_TIM_IC_Start_IT+0x10a>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b10      	cmp	r3, #16
 800380a:	d104      	bne.n	8003816 <HAL_TIM_IC_Start_IT+0x102>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003814:	e003      	b.n	800381e <HAL_TIM_IC_Start_IT+0x10a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <HAL_TIM_IC_Start_IT+0x11a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800382c:	e013      	b.n	8003856 <HAL_TIM_IC_Start_IT+0x142>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d104      	bne.n	800383e <HAL_TIM_IC_Start_IT+0x12a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800383c:	e00b      	b.n	8003856 <HAL_TIM_IC_Start_IT+0x142>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d104      	bne.n	800384e <HAL_TIM_IC_Start_IT+0x13a>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800384c:	e003      	b.n	8003856 <HAL_TIM_IC_Start_IT+0x142>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2202      	movs	r2, #2
 8003852:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	d841      	bhi.n	80038e0 <HAL_TIM_IC_Start_IT+0x1cc>
 800385c:	a201      	add	r2, pc, #4	@ (adr r2, 8003864 <HAL_TIM_IC_Start_IT+0x150>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003899 	.word	0x08003899
 8003868:	080038e1 	.word	0x080038e1
 800386c:	080038e1 	.word	0x080038e1
 8003870:	080038e1 	.word	0x080038e1
 8003874:	080038ab 	.word	0x080038ab
 8003878:	080038e1 	.word	0x080038e1
 800387c:	080038e1 	.word	0x080038e1
 8003880:	080038e1 	.word	0x080038e1
 8003884:	080038bd 	.word	0x080038bd
 8003888:	080038e1 	.word	0x080038e1
 800388c:	080038e1 	.word	0x080038e1
 8003890:	080038e1 	.word	0x080038e1
 8003894:	080038cf 	.word	0x080038cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0202 	orr.w	r2, r2, #2
 80038a6:	60da      	str	r2, [r3, #12]
      break;
 80038a8:	e01d      	b.n	80038e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0204 	orr.w	r2, r2, #4
 80038b8:	60da      	str	r2, [r3, #12]
      break;
 80038ba:	e014      	b.n	80038e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	60da      	str	r2, [r3, #12]
      break;
 80038cc:	e00b      	b.n	80038e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0210 	orr.w	r2, r2, #16
 80038dc:	60da      	str	r2, [r3, #12]
      break;
 80038de:	e002      	b.n	80038e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d149      	bne.n	8003980 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	6839      	ldr	r1, [r7, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 fb35 	bl	8004f64 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a23      	ldr	r2, [pc, #140]	@ (800398c <HAL_TIM_IC_Start_IT+0x278>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d01d      	beq.n	8003940 <HAL_TIM_IC_Start_IT+0x22c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390c:	d018      	beq.n	8003940 <HAL_TIM_IC_Start_IT+0x22c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1f      	ldr	r2, [pc, #124]	@ (8003990 <HAL_TIM_IC_Start_IT+0x27c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d013      	beq.n	8003940 <HAL_TIM_IC_Start_IT+0x22c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1d      	ldr	r2, [pc, #116]	@ (8003994 <HAL_TIM_IC_Start_IT+0x280>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00e      	beq.n	8003940 <HAL_TIM_IC_Start_IT+0x22c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1c      	ldr	r2, [pc, #112]	@ (8003998 <HAL_TIM_IC_Start_IT+0x284>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d009      	beq.n	8003940 <HAL_TIM_IC_Start_IT+0x22c>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1a      	ldr	r2, [pc, #104]	@ (800399c <HAL_TIM_IC_Start_IT+0x288>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <HAL_TIM_IC_Start_IT+0x22c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a19      	ldr	r2, [pc, #100]	@ (80039a0 <HAL_TIM_IC_Start_IT+0x28c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d115      	bne.n	800396c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	4b17      	ldr	r3, [pc, #92]	@ (80039a4 <HAL_TIM_IC_Start_IT+0x290>)
 8003948:	4013      	ands	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b06      	cmp	r3, #6
 8003950:	d015      	beq.n	800397e <HAL_TIM_IC_Start_IT+0x26a>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003958:	d011      	beq.n	800397e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0201 	orr.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396a:	e008      	b.n	800397e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e000      	b.n	8003980 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800
 8003998:	40000c00 	.word	0x40000c00
 800399c:	40013400 	.word	0x40013400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	00010007 	.word	0x00010007

080039a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d020      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01b      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0202 	mvn.w	r2, #2
 80039dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fc fe4a 	bl	800068c <HAL_TIM_IC_CaptureCallback>
 80039f8:	e005      	b.n	8003a06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fbe0 	bl	80041c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fbe7 	bl	80041d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d020      	beq.n	8003a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01b      	beq.n	8003a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0204 	mvn.w	r2, #4
 8003a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fc fe24 	bl	800068c <HAL_TIM_IC_CaptureCallback>
 8003a44:	e005      	b.n	8003a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fbba 	bl	80041c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fbc1 	bl	80041d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d020      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01b      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0208 	mvn.w	r2, #8
 8003a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2204      	movs	r2, #4
 8003a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fc fdfe 	bl	800068c <HAL_TIM_IC_CaptureCallback>
 8003a90:	e005      	b.n	8003a9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fb94 	bl	80041c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fb9b 	bl	80041d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d020      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01b      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0210 	mvn.w	r2, #16
 8003ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fc fdd8 	bl	800068c <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fb6e 	bl	80041c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fb75 	bl	80041d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0201 	mvn.w	r2, #1
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fb4c 	bl	80041ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f001 face 	bl	80050d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00c      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f001 fac6 	bl	80050e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00c      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fb3e 	bl	80041fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00c      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0220 	mvn.w	r2, #32
 8003b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f001 fa8e 	bl	80050c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_IC_ConfigChannel+0x1e>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e088      	b.n	8003cdc <HAL_TIM_IC_ConfigChannel+0x130>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11b      	bne.n	8003c10 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003be8:	f000 fffe 	bl	8004be8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 020c 	bic.w	r2, r2, #12
 8003bfa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6999      	ldr	r1, [r3, #24]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	619a      	str	r2, [r3, #24]
 8003c0e:	e060      	b.n	8003cd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d11c      	bne.n	8003c50 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003c26:	f001 f87c 	bl	8004d22 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699a      	ldr	r2, [r3, #24]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6999      	ldr	r1, [r3, #24]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	021a      	lsls	r2, r3, #8
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	619a      	str	r2, [r3, #24]
 8003c4e:	e040      	b.n	8003cd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d11b      	bne.n	8003c8e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c66:	f001 f8c9 	bl	8004dfc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 020c 	bic.w	r2, r2, #12
 8003c78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69d9      	ldr	r1, [r3, #28]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	61da      	str	r2, [r3, #28]
 8003c8c:	e021      	b.n	8003cd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b0c      	cmp	r3, #12
 8003c92:	d11c      	bne.n	8003cce <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003ca4:	f001 f8e6 	bl	8004e74 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003cb6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69d9      	ldr	r1, [r3, #28]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	021a      	lsls	r2, r3, #8
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	61da      	str	r2, [r3, #28]
 8003ccc:	e001      	b.n	8003cd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e0ff      	b.n	8003f02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b14      	cmp	r3, #20
 8003d0e:	f200 80f0 	bhi.w	8003ef2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d12:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d6d 	.word	0x08003d6d
 8003d1c:	08003ef3 	.word	0x08003ef3
 8003d20:	08003ef3 	.word	0x08003ef3
 8003d24:	08003ef3 	.word	0x08003ef3
 8003d28:	08003dad 	.word	0x08003dad
 8003d2c:	08003ef3 	.word	0x08003ef3
 8003d30:	08003ef3 	.word	0x08003ef3
 8003d34:	08003ef3 	.word	0x08003ef3
 8003d38:	08003def 	.word	0x08003def
 8003d3c:	08003ef3 	.word	0x08003ef3
 8003d40:	08003ef3 	.word	0x08003ef3
 8003d44:	08003ef3 	.word	0x08003ef3
 8003d48:	08003e2f 	.word	0x08003e2f
 8003d4c:	08003ef3 	.word	0x08003ef3
 8003d50:	08003ef3 	.word	0x08003ef3
 8003d54:	08003ef3 	.word	0x08003ef3
 8003d58:	08003e71 	.word	0x08003e71
 8003d5c:	08003ef3 	.word	0x08003ef3
 8003d60:	08003ef3 	.word	0x08003ef3
 8003d64:	08003ef3 	.word	0x08003ef3
 8003d68:	08003eb1 	.word	0x08003eb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fbce 	bl	8004514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0208 	orr.w	r2, r2, #8
 8003d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0204 	bic.w	r2, r2, #4
 8003d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6999      	ldr	r1, [r3, #24]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	619a      	str	r2, [r3, #24]
      break;
 8003daa:	e0a5      	b.n	8003ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fc3e 	bl	8004634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6999      	ldr	r1, [r3, #24]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	021a      	lsls	r2, r3, #8
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	619a      	str	r2, [r3, #24]
      break;
 8003dec:	e084      	b.n	8003ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fca7 	bl	8004748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0208 	orr.w	r2, r2, #8
 8003e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0204 	bic.w	r2, r2, #4
 8003e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69d9      	ldr	r1, [r3, #28]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	61da      	str	r2, [r3, #28]
      break;
 8003e2c:	e064      	b.n	8003ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fd0f 	bl	8004858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69d9      	ldr	r1, [r3, #28]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	021a      	lsls	r2, r3, #8
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	61da      	str	r2, [r3, #28]
      break;
 8003e6e:	e043      	b.n	8003ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fd58 	bl	800492c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0208 	orr.w	r2, r2, #8
 8003e8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0204 	bic.w	r2, r2, #4
 8003e9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003eae:	e023      	b.n	8003ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fd9c 	bl	80049f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	021a      	lsls	r2, r3, #8
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ef0:	e002      	b.n	8003ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop

08003f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_TIM_ConfigClockSource+0x1c>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e0b6      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x18a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f64:	d03e      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0xd8>
 8003f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6a:	f200 8087 	bhi.w	800407c <HAL_TIM_ConfigClockSource+0x170>
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f72:	f000 8086 	beq.w	8004082 <HAL_TIM_ConfigClockSource+0x176>
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7a:	d87f      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x170>
 8003f7c:	2b70      	cmp	r3, #112	@ 0x70
 8003f7e:	d01a      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0xaa>
 8003f80:	2b70      	cmp	r3, #112	@ 0x70
 8003f82:	d87b      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x170>
 8003f84:	2b60      	cmp	r3, #96	@ 0x60
 8003f86:	d050      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x11e>
 8003f88:	2b60      	cmp	r3, #96	@ 0x60
 8003f8a:	d877      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x170>
 8003f8c:	2b50      	cmp	r3, #80	@ 0x50
 8003f8e:	d03c      	beq.n	800400a <HAL_TIM_ConfigClockSource+0xfe>
 8003f90:	2b50      	cmp	r3, #80	@ 0x50
 8003f92:	d873      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x170>
 8003f94:	2b40      	cmp	r3, #64	@ 0x40
 8003f96:	d058      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x13e>
 8003f98:	2b40      	cmp	r3, #64	@ 0x40
 8003f9a:	d86f      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x170>
 8003f9c:	2b30      	cmp	r3, #48	@ 0x30
 8003f9e:	d064      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x15e>
 8003fa0:	2b30      	cmp	r3, #48	@ 0x30
 8003fa2:	d86b      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x170>
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d060      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x15e>
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d867      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x170>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d05c      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x15e>
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d05a      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x15e>
 8003fb4:	e062      	b.n	800407c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc6:	f000 ffad 	bl	8004f24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	609a      	str	r2, [r3, #8]
      break;
 8003fe2:	e04f      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ff4:	f000 ff96 	bl	8004f24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004006:	609a      	str	r2, [r3, #8]
      break;
 8004008:	e03c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004016:	461a      	mov	r2, r3
 8004018:	f000 fe54 	bl	8004cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2150      	movs	r1, #80	@ 0x50
 8004022:	4618      	mov	r0, r3
 8004024:	f000 ff63 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 8004028:	e02c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004036:	461a      	mov	r2, r3
 8004038:	f000 feb0 	bl	8004d9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2160      	movs	r1, #96	@ 0x60
 8004042:	4618      	mov	r0, r3
 8004044:	f000 ff53 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 8004048:	e01c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004056:	461a      	mov	r2, r3
 8004058:	f000 fe34 	bl	8004cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2140      	movs	r1, #64	@ 0x40
 8004062:	4618      	mov	r0, r3
 8004064:	f000 ff43 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 8004068:	e00c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f000 ff3a 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 800407a:	e003      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
      break;
 8004080:	e000      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e031      	b.n	800411a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80040c6:	6839      	ldr	r1, [r7, #0]
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fcf9 	bl	8004ac0 <TIM_SlaveTimer_SetConfig>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d009      	beq.n	80040e8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e018      	b.n	800411a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040f6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004106:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b0c      	cmp	r3, #12
 8004136:	d831      	bhi.n	800419c <HAL_TIM_ReadCapturedValue+0x78>
 8004138:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <HAL_TIM_ReadCapturedValue+0x1c>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004175 	.word	0x08004175
 8004144:	0800419d 	.word	0x0800419d
 8004148:	0800419d 	.word	0x0800419d
 800414c:	0800419d 	.word	0x0800419d
 8004150:	0800417f 	.word	0x0800417f
 8004154:	0800419d 	.word	0x0800419d
 8004158:	0800419d 	.word	0x0800419d
 800415c:	0800419d 	.word	0x0800419d
 8004160:	08004189 	.word	0x08004189
 8004164:	0800419d 	.word	0x0800419d
 8004168:	0800419d 	.word	0x0800419d
 800416c:	0800419d 	.word	0x0800419d
 8004170:	08004193 	.word	0x08004193
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417a:	60fb      	str	r3, [r7, #12]

      break;
 800417c:	e00f      	b.n	800419e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004184:	60fb      	str	r3, [r7, #12]

      break;
 8004186:	e00a      	b.n	800419e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418e:	60fb      	str	r3, [r7, #12]

      break;
 8004190:	e005      	b.n	800419e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	60fb      	str	r3, [r7, #12]

      break;
 800419a:	e000      	b.n	800419e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800419c:	bf00      	nop
  }

  return tmpreg;
 800419e:	68fb      	ldr	r3, [r7, #12]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	7f1b      	ldrb	r3, [r3, #28]
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	429a      	cmp	r2, r3
 8004252:	d107      	bne.n	8004264 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004262:	e02a      	b.n	80042ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	429a      	cmp	r2, r3
 800426c:	d107      	bne.n	800427e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2202      	movs	r2, #2
 8004272:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800427c:	e01d      	b.n	80042ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	429a      	cmp	r2, r3
 8004286:	d107      	bne.n	8004298 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2204      	movs	r2, #4
 800428c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004296:	e010      	b.n	80042ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d107      	bne.n	80042b2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2208      	movs	r2, #8
 80042a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042b0:	e003      	b.n	80042ba <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff ffa8 	bl	8004210 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	771a      	strb	r2, [r3, #28]
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d10b      	bne.n	80042fe <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d136      	bne.n	8004362 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042fc:	e031      	b.n	8004362 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d10b      	bne.n	8004320 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2202      	movs	r2, #2
 800430c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d125      	bne.n	8004362 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800431e:	e020      	b.n	8004362 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	429a      	cmp	r2, r3
 8004328:	d10b      	bne.n	8004342 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2204      	movs	r2, #4
 800432e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d114      	bne.n	8004362 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004340:	e00f      	b.n	8004362 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	429a      	cmp	r2, r3
 800434a:	d10a      	bne.n	8004362 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2208      	movs	r2, #8
 8004350:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff ff36 	bl	80041d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	771a      	strb	r2, [r3, #28]
}
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	429a      	cmp	r2, r3
 800438c:	d103      	bne.n	8004396 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	771a      	strb	r2, [r3, #28]
 8004394:	e019      	b.n	80043ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	d103      	bne.n	80043a8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2202      	movs	r2, #2
 80043a4:	771a      	strb	r2, [r3, #28]
 80043a6:	e010      	b.n	80043ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d103      	bne.n	80043ba <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2204      	movs	r2, #4
 80043b6:	771a      	strb	r2, [r3, #28]
 80043b8:	e007      	b.n	80043ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d102      	bne.n	80043ca <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2208      	movs	r2, #8
 80043c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f7ff ff0c 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	771a      	strb	r2, [r3, #28]
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a40      	ldr	r2, [pc, #256]	@ (80044f4 <TIM_Base_SetConfig+0x114>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d013      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fe:	d00f      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a3d      	ldr	r2, [pc, #244]	@ (80044f8 <TIM_Base_SetConfig+0x118>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00b      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a3c      	ldr	r2, [pc, #240]	@ (80044fc <TIM_Base_SetConfig+0x11c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d007      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a3b      	ldr	r2, [pc, #236]	@ (8004500 <TIM_Base_SetConfig+0x120>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a3a      	ldr	r2, [pc, #232]	@ (8004504 <TIM_Base_SetConfig+0x124>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d108      	bne.n	8004432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a2f      	ldr	r2, [pc, #188]	@ (80044f4 <TIM_Base_SetConfig+0x114>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01f      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004440:	d01b      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a2c      	ldr	r2, [pc, #176]	@ (80044f8 <TIM_Base_SetConfig+0x118>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d017      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2b      	ldr	r2, [pc, #172]	@ (80044fc <TIM_Base_SetConfig+0x11c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a2a      	ldr	r2, [pc, #168]	@ (8004500 <TIM_Base_SetConfig+0x120>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00f      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a29      	ldr	r2, [pc, #164]	@ (8004504 <TIM_Base_SetConfig+0x124>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00b      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a28      	ldr	r2, [pc, #160]	@ (8004508 <TIM_Base_SetConfig+0x128>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d007      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a27      	ldr	r2, [pc, #156]	@ (800450c <TIM_Base_SetConfig+0x12c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a26      	ldr	r2, [pc, #152]	@ (8004510 <TIM_Base_SetConfig+0x130>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d108      	bne.n	800448c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a10      	ldr	r2, [pc, #64]	@ (80044f4 <TIM_Base_SetConfig+0x114>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00f      	beq.n	80044d8 <TIM_Base_SetConfig+0xf8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a12      	ldr	r2, [pc, #72]	@ (8004504 <TIM_Base_SetConfig+0x124>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_Base_SetConfig+0xf8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a11      	ldr	r2, [pc, #68]	@ (8004508 <TIM_Base_SetConfig+0x128>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_Base_SetConfig+0xf8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a10      	ldr	r2, [pc, #64]	@ (800450c <TIM_Base_SetConfig+0x12c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0xf8>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a0f      	ldr	r2, [pc, #60]	@ (8004510 <TIM_Base_SetConfig+0x130>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d103      	bne.n	80044e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	615a      	str	r2, [r3, #20]
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800
 8004500:	40000c00 	.word	0x40000c00
 8004504:	40013400 	.word	0x40013400
 8004508:	40014000 	.word	0x40014000
 800450c:	40014400 	.word	0x40014400
 8004510:	40014800 	.word	0x40014800

08004514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f023 0201 	bic.w	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f023 0302 	bic.w	r3, r3, #2
 8004560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a2c      	ldr	r2, [pc, #176]	@ (8004620 <TIM_OC1_SetConfig+0x10c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00f      	beq.n	8004594 <TIM_OC1_SetConfig+0x80>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a2b      	ldr	r2, [pc, #172]	@ (8004624 <TIM_OC1_SetConfig+0x110>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00b      	beq.n	8004594 <TIM_OC1_SetConfig+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a2a      	ldr	r2, [pc, #168]	@ (8004628 <TIM_OC1_SetConfig+0x114>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_OC1_SetConfig+0x80>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a29      	ldr	r2, [pc, #164]	@ (800462c <TIM_OC1_SetConfig+0x118>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_OC1_SetConfig+0x80>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a28      	ldr	r2, [pc, #160]	@ (8004630 <TIM_OC1_SetConfig+0x11c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10c      	bne.n	80045ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0308 	bic.w	r3, r3, #8
 800459a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f023 0304 	bic.w	r3, r3, #4
 80045ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004620 <TIM_OC1_SetConfig+0x10c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00f      	beq.n	80045d6 <TIM_OC1_SetConfig+0xc2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004624 <TIM_OC1_SetConfig+0x110>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <TIM_OC1_SetConfig+0xc2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a19      	ldr	r2, [pc, #100]	@ (8004628 <TIM_OC1_SetConfig+0x114>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_OC1_SetConfig+0xc2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a18      	ldr	r2, [pc, #96]	@ (800462c <TIM_OC1_SetConfig+0x118>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_OC1_SetConfig+0xc2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a17      	ldr	r2, [pc, #92]	@ (8004630 <TIM_OC1_SetConfig+0x11c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d111      	bne.n	80045fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	621a      	str	r2, [r3, #32]
}
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40013400 	.word	0x40013400
 8004628:	40014000 	.word	0x40014000
 800462c:	40014400 	.word	0x40014400
 8004630:	40014800 	.word	0x40014800

08004634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f023 0210 	bic.w	r2, r3, #16
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800466e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f023 0320 	bic.w	r3, r3, #32
 8004682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a28      	ldr	r2, [pc, #160]	@ (8004734 <TIM_OC2_SetConfig+0x100>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_OC2_SetConfig+0x6c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a27      	ldr	r2, [pc, #156]	@ (8004738 <TIM_OC2_SetConfig+0x104>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d10d      	bne.n	80046bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a1d      	ldr	r2, [pc, #116]	@ (8004734 <TIM_OC2_SetConfig+0x100>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00f      	beq.n	80046e4 <TIM_OC2_SetConfig+0xb0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004738 <TIM_OC2_SetConfig+0x104>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00b      	beq.n	80046e4 <TIM_OC2_SetConfig+0xb0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a1b      	ldr	r2, [pc, #108]	@ (800473c <TIM_OC2_SetConfig+0x108>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_OC2_SetConfig+0xb0>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004740 <TIM_OC2_SetConfig+0x10c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_OC2_SetConfig+0xb0>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a19      	ldr	r2, [pc, #100]	@ (8004744 <TIM_OC2_SetConfig+0x110>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d113      	bne.n	800470c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40012c00 	.word	0x40012c00
 8004738:	40013400 	.word	0x40013400
 800473c:	40014000 	.word	0x40014000
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800

08004748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a27      	ldr	r2, [pc, #156]	@ (8004844 <TIM_OC3_SetConfig+0xfc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_OC3_SetConfig+0x6a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a26      	ldr	r2, [pc, #152]	@ (8004848 <TIM_OC3_SetConfig+0x100>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10d      	bne.n	80047ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004844 <TIM_OC3_SetConfig+0xfc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00f      	beq.n	80047f6 <TIM_OC3_SetConfig+0xae>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004848 <TIM_OC3_SetConfig+0x100>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <TIM_OC3_SetConfig+0xae>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a1a      	ldr	r2, [pc, #104]	@ (800484c <TIM_OC3_SetConfig+0x104>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <TIM_OC3_SetConfig+0xae>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a19      	ldr	r2, [pc, #100]	@ (8004850 <TIM_OC3_SetConfig+0x108>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d003      	beq.n	80047f6 <TIM_OC3_SetConfig+0xae>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a18      	ldr	r2, [pc, #96]	@ (8004854 <TIM_OC3_SetConfig+0x10c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d113      	bne.n	800481e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	621a      	str	r2, [r3, #32]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40013400 	.word	0x40013400
 800484c:	40014000 	.word	0x40014000
 8004850:	40014400 	.word	0x40014400
 8004854:	40014800 	.word	0x40014800

08004858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800488a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	031b      	lsls	r3, r3, #12
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a18      	ldr	r2, [pc, #96]	@ (8004918 <TIM_OC4_SetConfig+0xc0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00f      	beq.n	80048dc <TIM_OC4_SetConfig+0x84>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a17      	ldr	r2, [pc, #92]	@ (800491c <TIM_OC4_SetConfig+0xc4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00b      	beq.n	80048dc <TIM_OC4_SetConfig+0x84>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a16      	ldr	r2, [pc, #88]	@ (8004920 <TIM_OC4_SetConfig+0xc8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d007      	beq.n	80048dc <TIM_OC4_SetConfig+0x84>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a15      	ldr	r2, [pc, #84]	@ (8004924 <TIM_OC4_SetConfig+0xcc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_OC4_SetConfig+0x84>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a14      	ldr	r2, [pc, #80]	@ (8004928 <TIM_OC4_SetConfig+0xd0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d109      	bne.n	80048f0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	019b      	lsls	r3, r3, #6
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40013400 	.word	0x40013400
 8004920:	40014000 	.word	0x40014000
 8004924:	40014400 	.word	0x40014400
 8004928:	40014800 	.word	0x40014800

0800492c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800495a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004970:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	041b      	lsls	r3, r3, #16
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a17      	ldr	r2, [pc, #92]	@ (80049e0 <TIM_OC5_SetConfig+0xb4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00f      	beq.n	80049a6 <TIM_OC5_SetConfig+0x7a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a16      	ldr	r2, [pc, #88]	@ (80049e4 <TIM_OC5_SetConfig+0xb8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00b      	beq.n	80049a6 <TIM_OC5_SetConfig+0x7a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a15      	ldr	r2, [pc, #84]	@ (80049e8 <TIM_OC5_SetConfig+0xbc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <TIM_OC5_SetConfig+0x7a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a14      	ldr	r2, [pc, #80]	@ (80049ec <TIM_OC5_SetConfig+0xc0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d003      	beq.n	80049a6 <TIM_OC5_SetConfig+0x7a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a13      	ldr	r2, [pc, #76]	@ (80049f0 <TIM_OC5_SetConfig+0xc4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d109      	bne.n	80049ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	621a      	str	r2, [r3, #32]
}
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	40013400 	.word	0x40013400
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40014400 	.word	0x40014400
 80049f0:	40014800 	.word	0x40014800

080049f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	051b      	lsls	r3, r3, #20
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a18      	ldr	r2, [pc, #96]	@ (8004aac <TIM_OC6_SetConfig+0xb8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00f      	beq.n	8004a70 <TIM_OC6_SetConfig+0x7c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a17      	ldr	r2, [pc, #92]	@ (8004ab0 <TIM_OC6_SetConfig+0xbc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00b      	beq.n	8004a70 <TIM_OC6_SetConfig+0x7c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a16      	ldr	r2, [pc, #88]	@ (8004ab4 <TIM_OC6_SetConfig+0xc0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d007      	beq.n	8004a70 <TIM_OC6_SetConfig+0x7c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a15      	ldr	r2, [pc, #84]	@ (8004ab8 <TIM_OC6_SetConfig+0xc4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_OC6_SetConfig+0x7c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a14      	ldr	r2, [pc, #80]	@ (8004abc <TIM_OC6_SetConfig+0xc8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d109      	bne.n	8004a84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	029b      	lsls	r3, r3, #10
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	621a      	str	r2, [r3, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40013400 	.word	0x40013400
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40014400 	.word	0x40014400
 8004abc:	40014800 	.word	0x40014800

08004ac0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004adc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aee:	f023 0307 	bic.w	r3, r3, #7
 8004af2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b70      	cmp	r3, #112	@ 0x70
 8004b0c:	d01a      	beq.n	8004b44 <TIM_SlaveTimer_SetConfig+0x84>
 8004b0e:	2b70      	cmp	r3, #112	@ 0x70
 8004b10:	d860      	bhi.n	8004bd4 <TIM_SlaveTimer_SetConfig+0x114>
 8004b12:	2b60      	cmp	r3, #96	@ 0x60
 8004b14:	d054      	beq.n	8004bc0 <TIM_SlaveTimer_SetConfig+0x100>
 8004b16:	2b60      	cmp	r3, #96	@ 0x60
 8004b18:	d85c      	bhi.n	8004bd4 <TIM_SlaveTimer_SetConfig+0x114>
 8004b1a:	2b50      	cmp	r3, #80	@ 0x50
 8004b1c:	d046      	beq.n	8004bac <TIM_SlaveTimer_SetConfig+0xec>
 8004b1e:	2b50      	cmp	r3, #80	@ 0x50
 8004b20:	d858      	bhi.n	8004bd4 <TIM_SlaveTimer_SetConfig+0x114>
 8004b22:	2b40      	cmp	r3, #64	@ 0x40
 8004b24:	d019      	beq.n	8004b5a <TIM_SlaveTimer_SetConfig+0x9a>
 8004b26:	2b40      	cmp	r3, #64	@ 0x40
 8004b28:	d854      	bhi.n	8004bd4 <TIM_SlaveTimer_SetConfig+0x114>
 8004b2a:	2b30      	cmp	r3, #48	@ 0x30
 8004b2c:	d055      	beq.n	8004bda <TIM_SlaveTimer_SetConfig+0x11a>
 8004b2e:	2b30      	cmp	r3, #48	@ 0x30
 8004b30:	d850      	bhi.n	8004bd4 <TIM_SlaveTimer_SetConfig+0x114>
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d051      	beq.n	8004bda <TIM_SlaveTimer_SetConfig+0x11a>
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d84c      	bhi.n	8004bd4 <TIM_SlaveTimer_SetConfig+0x114>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d04d      	beq.n	8004bda <TIM_SlaveTimer_SetConfig+0x11a>
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d04b      	beq.n	8004bda <TIM_SlaveTimer_SetConfig+0x11a>
 8004b42:	e047      	b.n	8004bd4 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004b54:	f000 f9e6 	bl	8004f24 <TIM_ETR_SetConfig>
      break;
 8004b58:	e040      	b.n	8004bdc <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b05      	cmp	r3, #5
 8004b60:	d101      	bne.n	8004b66 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e03b      	b.n	8004bde <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6a1a      	ldr	r2, [r3, #32]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b8c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
      break;
 8004baa:	e017      	b.n	8004bdc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f000 f883 	bl	8004cc4 <TIM_TI1_ConfigInputStage>
      break;
 8004bbe:	e00d      	b.n	8004bdc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f000 f8e5 	bl	8004d9c <TIM_TI2_ConfigInputStage>
      break;
 8004bd2:	e003      	b.n	8004bdc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd8:	e000      	b.n	8004bdc <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004bda:	bf00      	nop
  }

  return status;
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f023 0201 	bic.w	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a26      	ldr	r2, [pc, #152]	@ (8004cac <TIM_TI1_SetConfig+0xc4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d017      	beq.n	8004c46 <TIM_TI1_SetConfig+0x5e>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c1c:	d013      	beq.n	8004c46 <TIM_TI1_SetConfig+0x5e>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4a23      	ldr	r2, [pc, #140]	@ (8004cb0 <TIM_TI1_SetConfig+0xc8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00f      	beq.n	8004c46 <TIM_TI1_SetConfig+0x5e>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a22      	ldr	r2, [pc, #136]	@ (8004cb4 <TIM_TI1_SetConfig+0xcc>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00b      	beq.n	8004c46 <TIM_TI1_SetConfig+0x5e>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4a21      	ldr	r2, [pc, #132]	@ (8004cb8 <TIM_TI1_SetConfig+0xd0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <TIM_TI1_SetConfig+0x5e>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a20      	ldr	r2, [pc, #128]	@ (8004cbc <TIM_TI1_SetConfig+0xd4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_TI1_SetConfig+0x5e>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc0 <TIM_TI1_SetConfig+0xd8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <TIM_TI1_SetConfig+0x62>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <TIM_TI1_SetConfig+0x64>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f023 0303 	bic.w	r3, r3, #3
 8004c56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e003      	b.n	8004c6a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f023 030a 	bic.w	r3, r3, #10
 8004c84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f003 030a 	and.w	r3, r3, #10
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40012c00 	.word	0x40012c00
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40000800 	.word	0x40000800
 8004cb8:	40000c00 	.word	0x40000c00
 8004cbc:	40013400 	.word	0x40013400
 8004cc0:	40014000 	.word	0x40014000

08004cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f023 0201 	bic.w	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f023 030a 	bic.w	r3, r3, #10
 8004d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	621a      	str	r2, [r3, #32]
}
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b087      	sub	sp, #28
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0210 	bic.w	r2, r3, #16
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	031b      	lsls	r3, r3, #12
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	621a      	str	r2, [r3, #32]
}
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f023 0210 	bic.w	r2, r3, #16
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	031b      	lsls	r3, r3, #12
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	621a      	str	r2, [r3, #32]
}
 8004df0:	bf00      	nop
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f023 0303 	bic.w	r3, r3, #3
 8004e28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	621a      	str	r2, [r3, #32]
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004eb2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	031b      	lsls	r3, r3, #12
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	031b      	lsls	r3, r3, #12
 8004ecc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f043 0307 	orr.w	r3, r3, #7
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	021a      	lsls	r2, r3, #8
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	609a      	str	r2, [r3, #8]
}
 8004f58:	bf00      	nop
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	2201      	movs	r2, #1
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1a      	ldr	r2, [r3, #32]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	401a      	ands	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1a      	ldr	r2, [r3, #32]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e068      	b.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a2e      	ldr	r2, [pc, #184]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a2d      	ldr	r2, [pc, #180]	@ (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d108      	bne.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005002:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005014:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1e      	ldr	r2, [pc, #120]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d01d      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503a:	d018      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1b      	ldr	r2, [pc, #108]	@ (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1a      	ldr	r2, [pc, #104]	@ (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00e      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a18      	ldr	r2, [pc, #96]	@ (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d009      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a13      	ldr	r2, [pc, #76]	@ (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d004      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a14      	ldr	r2, [pc, #80]	@ (80050bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d10c      	bne.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4313      	orrs	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40012c00 	.word	0x40012c00
 80050ac:	40013400 	.word	0x40013400
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800
 80050b8:	40000c00 	.word	0x40000c00
 80050bc:	40014000 	.word	0x40014000

080050c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e040      	b.n	8005190 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fb fde6 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2224      	movs	r2, #36	@ 0x24
 8005128:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fae0 	bl	8005708 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f825 	bl	8005198 <UART_SetConfig>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e01b      	b.n	8005190 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fb5f 	bl	800584c <UART_CheckIdleState>
 800518e:	4603      	mov	r3, r0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800519c:	b08a      	sub	sp, #40	@ 0x28
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	4313      	orrs	r3, r2
 80051be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4ba4      	ldr	r3, [pc, #656]	@ (8005458 <UART_SetConfig+0x2c0>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a99      	ldr	r2, [pc, #612]	@ (800545c <UART_SetConfig+0x2c4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005200:	4313      	orrs	r3, r2
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005214:	430a      	orrs	r2, r1
 8005216:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a90      	ldr	r2, [pc, #576]	@ (8005460 <UART_SetConfig+0x2c8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d126      	bne.n	8005270 <UART_SetConfig+0xd8>
 8005222:	4b90      	ldr	r3, [pc, #576]	@ (8005464 <UART_SetConfig+0x2cc>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005228:	f003 0303 	and.w	r3, r3, #3
 800522c:	2b03      	cmp	r3, #3
 800522e:	d81b      	bhi.n	8005268 <UART_SetConfig+0xd0>
 8005230:	a201      	add	r2, pc, #4	@ (adr r2, 8005238 <UART_SetConfig+0xa0>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	08005249 	.word	0x08005249
 800523c:	08005259 	.word	0x08005259
 8005240:	08005251 	.word	0x08005251
 8005244:	08005261 	.word	0x08005261
 8005248:	2301      	movs	r3, #1
 800524a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800524e:	e116      	b.n	800547e <UART_SetConfig+0x2e6>
 8005250:	2302      	movs	r3, #2
 8005252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005256:	e112      	b.n	800547e <UART_SetConfig+0x2e6>
 8005258:	2304      	movs	r3, #4
 800525a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800525e:	e10e      	b.n	800547e <UART_SetConfig+0x2e6>
 8005260:	2308      	movs	r3, #8
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005266:	e10a      	b.n	800547e <UART_SetConfig+0x2e6>
 8005268:	2310      	movs	r3, #16
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800526e:	e106      	b.n	800547e <UART_SetConfig+0x2e6>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a7c      	ldr	r2, [pc, #496]	@ (8005468 <UART_SetConfig+0x2d0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d138      	bne.n	80052ec <UART_SetConfig+0x154>
 800527a:	4b7a      	ldr	r3, [pc, #488]	@ (8005464 <UART_SetConfig+0x2cc>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005280:	f003 030c 	and.w	r3, r3, #12
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d82d      	bhi.n	80052e4 <UART_SetConfig+0x14c>
 8005288:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <UART_SetConfig+0xf8>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052c5 	.word	0x080052c5
 8005294:	080052e5 	.word	0x080052e5
 8005298:	080052e5 	.word	0x080052e5
 800529c:	080052e5 	.word	0x080052e5
 80052a0:	080052d5 	.word	0x080052d5
 80052a4:	080052e5 	.word	0x080052e5
 80052a8:	080052e5 	.word	0x080052e5
 80052ac:	080052e5 	.word	0x080052e5
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	080052e5 	.word	0x080052e5
 80052b8:	080052e5 	.word	0x080052e5
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052dd 	.word	0x080052dd
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ca:	e0d8      	b.n	800547e <UART_SetConfig+0x2e6>
 80052cc:	2302      	movs	r3, #2
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052d2:	e0d4      	b.n	800547e <UART_SetConfig+0x2e6>
 80052d4:	2304      	movs	r3, #4
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052da:	e0d0      	b.n	800547e <UART_SetConfig+0x2e6>
 80052dc:	2308      	movs	r3, #8
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052e2:	e0cc      	b.n	800547e <UART_SetConfig+0x2e6>
 80052e4:	2310      	movs	r3, #16
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ea:	e0c8      	b.n	800547e <UART_SetConfig+0x2e6>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a5e      	ldr	r2, [pc, #376]	@ (800546c <UART_SetConfig+0x2d4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d125      	bne.n	8005342 <UART_SetConfig+0x1aa>
 80052f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005464 <UART_SetConfig+0x2cc>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005300:	2b30      	cmp	r3, #48	@ 0x30
 8005302:	d016      	beq.n	8005332 <UART_SetConfig+0x19a>
 8005304:	2b30      	cmp	r3, #48	@ 0x30
 8005306:	d818      	bhi.n	800533a <UART_SetConfig+0x1a2>
 8005308:	2b20      	cmp	r3, #32
 800530a:	d00a      	beq.n	8005322 <UART_SetConfig+0x18a>
 800530c:	2b20      	cmp	r3, #32
 800530e:	d814      	bhi.n	800533a <UART_SetConfig+0x1a2>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <UART_SetConfig+0x182>
 8005314:	2b10      	cmp	r3, #16
 8005316:	d008      	beq.n	800532a <UART_SetConfig+0x192>
 8005318:	e00f      	b.n	800533a <UART_SetConfig+0x1a2>
 800531a:	2300      	movs	r3, #0
 800531c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005320:	e0ad      	b.n	800547e <UART_SetConfig+0x2e6>
 8005322:	2302      	movs	r3, #2
 8005324:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005328:	e0a9      	b.n	800547e <UART_SetConfig+0x2e6>
 800532a:	2304      	movs	r3, #4
 800532c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005330:	e0a5      	b.n	800547e <UART_SetConfig+0x2e6>
 8005332:	2308      	movs	r3, #8
 8005334:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005338:	e0a1      	b.n	800547e <UART_SetConfig+0x2e6>
 800533a:	2310      	movs	r3, #16
 800533c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005340:	e09d      	b.n	800547e <UART_SetConfig+0x2e6>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a4a      	ldr	r2, [pc, #296]	@ (8005470 <UART_SetConfig+0x2d8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d125      	bne.n	8005398 <UART_SetConfig+0x200>
 800534c:	4b45      	ldr	r3, [pc, #276]	@ (8005464 <UART_SetConfig+0x2cc>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005352:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005356:	2bc0      	cmp	r3, #192	@ 0xc0
 8005358:	d016      	beq.n	8005388 <UART_SetConfig+0x1f0>
 800535a:	2bc0      	cmp	r3, #192	@ 0xc0
 800535c:	d818      	bhi.n	8005390 <UART_SetConfig+0x1f8>
 800535e:	2b80      	cmp	r3, #128	@ 0x80
 8005360:	d00a      	beq.n	8005378 <UART_SetConfig+0x1e0>
 8005362:	2b80      	cmp	r3, #128	@ 0x80
 8005364:	d814      	bhi.n	8005390 <UART_SetConfig+0x1f8>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <UART_SetConfig+0x1d8>
 800536a:	2b40      	cmp	r3, #64	@ 0x40
 800536c:	d008      	beq.n	8005380 <UART_SetConfig+0x1e8>
 800536e:	e00f      	b.n	8005390 <UART_SetConfig+0x1f8>
 8005370:	2300      	movs	r3, #0
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005376:	e082      	b.n	800547e <UART_SetConfig+0x2e6>
 8005378:	2302      	movs	r3, #2
 800537a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800537e:	e07e      	b.n	800547e <UART_SetConfig+0x2e6>
 8005380:	2304      	movs	r3, #4
 8005382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005386:	e07a      	b.n	800547e <UART_SetConfig+0x2e6>
 8005388:	2308      	movs	r3, #8
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800538e:	e076      	b.n	800547e <UART_SetConfig+0x2e6>
 8005390:	2310      	movs	r3, #16
 8005392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005396:	e072      	b.n	800547e <UART_SetConfig+0x2e6>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a35      	ldr	r2, [pc, #212]	@ (8005474 <UART_SetConfig+0x2dc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d12a      	bne.n	80053f8 <UART_SetConfig+0x260>
 80053a2:	4b30      	ldr	r3, [pc, #192]	@ (8005464 <UART_SetConfig+0x2cc>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053b0:	d01a      	beq.n	80053e8 <UART_SetConfig+0x250>
 80053b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053b6:	d81b      	bhi.n	80053f0 <UART_SetConfig+0x258>
 80053b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053bc:	d00c      	beq.n	80053d8 <UART_SetConfig+0x240>
 80053be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053c2:	d815      	bhi.n	80053f0 <UART_SetConfig+0x258>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <UART_SetConfig+0x238>
 80053c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053cc:	d008      	beq.n	80053e0 <UART_SetConfig+0x248>
 80053ce:	e00f      	b.n	80053f0 <UART_SetConfig+0x258>
 80053d0:	2300      	movs	r3, #0
 80053d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053d6:	e052      	b.n	800547e <UART_SetConfig+0x2e6>
 80053d8:	2302      	movs	r3, #2
 80053da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053de:	e04e      	b.n	800547e <UART_SetConfig+0x2e6>
 80053e0:	2304      	movs	r3, #4
 80053e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053e6:	e04a      	b.n	800547e <UART_SetConfig+0x2e6>
 80053e8:	2308      	movs	r3, #8
 80053ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ee:	e046      	b.n	800547e <UART_SetConfig+0x2e6>
 80053f0:	2310      	movs	r3, #16
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053f6:	e042      	b.n	800547e <UART_SetConfig+0x2e6>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a17      	ldr	r2, [pc, #92]	@ (800545c <UART_SetConfig+0x2c4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d13a      	bne.n	8005478 <UART_SetConfig+0x2e0>
 8005402:	4b18      	ldr	r3, [pc, #96]	@ (8005464 <UART_SetConfig+0x2cc>)
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005408:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800540c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005410:	d01a      	beq.n	8005448 <UART_SetConfig+0x2b0>
 8005412:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005416:	d81b      	bhi.n	8005450 <UART_SetConfig+0x2b8>
 8005418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800541c:	d00c      	beq.n	8005438 <UART_SetConfig+0x2a0>
 800541e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005422:	d815      	bhi.n	8005450 <UART_SetConfig+0x2b8>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <UART_SetConfig+0x298>
 8005428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800542c:	d008      	beq.n	8005440 <UART_SetConfig+0x2a8>
 800542e:	e00f      	b.n	8005450 <UART_SetConfig+0x2b8>
 8005430:	2300      	movs	r3, #0
 8005432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005436:	e022      	b.n	800547e <UART_SetConfig+0x2e6>
 8005438:	2302      	movs	r3, #2
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800543e:	e01e      	b.n	800547e <UART_SetConfig+0x2e6>
 8005440:	2304      	movs	r3, #4
 8005442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005446:	e01a      	b.n	800547e <UART_SetConfig+0x2e6>
 8005448:	2308      	movs	r3, #8
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800544e:	e016      	b.n	800547e <UART_SetConfig+0x2e6>
 8005450:	2310      	movs	r3, #16
 8005452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005456:	e012      	b.n	800547e <UART_SetConfig+0x2e6>
 8005458:	efff69f3 	.word	0xefff69f3
 800545c:	40008000 	.word	0x40008000
 8005460:	40013800 	.word	0x40013800
 8005464:	40021000 	.word	0x40021000
 8005468:	40004400 	.word	0x40004400
 800546c:	40004800 	.word	0x40004800
 8005470:	40004c00 	.word	0x40004c00
 8005474:	40005000 	.word	0x40005000
 8005478:	2310      	movs	r3, #16
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a9f      	ldr	r2, [pc, #636]	@ (8005700 <UART_SetConfig+0x568>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d17a      	bne.n	800557e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005488:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800548c:	2b08      	cmp	r3, #8
 800548e:	d824      	bhi.n	80054da <UART_SetConfig+0x342>
 8005490:	a201      	add	r2, pc, #4	@ (adr r2, 8005498 <UART_SetConfig+0x300>)
 8005492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005496:	bf00      	nop
 8005498:	080054bd 	.word	0x080054bd
 800549c:	080054db 	.word	0x080054db
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054db 	.word	0x080054db
 80054a8:	080054cb 	.word	0x080054cb
 80054ac:	080054db 	.word	0x080054db
 80054b0:	080054db 	.word	0x080054db
 80054b4:	080054db 	.word	0x080054db
 80054b8:	080054d3 	.word	0x080054d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054bc:	f7fd f83e 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 80054c0:	61f8      	str	r0, [r7, #28]
        break;
 80054c2:	e010      	b.n	80054e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c4:	4b8f      	ldr	r3, [pc, #572]	@ (8005704 <UART_SetConfig+0x56c>)
 80054c6:	61fb      	str	r3, [r7, #28]
        break;
 80054c8:	e00d      	b.n	80054e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ca:	f7fc ff9f 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80054ce:	61f8      	str	r0, [r7, #28]
        break;
 80054d0:	e009      	b.n	80054e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054d6:	61fb      	str	r3, [r7, #28]
        break;
 80054d8:	e005      	b.n	80054e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80054e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 80fb 	beq.w	80056e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	4413      	add	r3, r2
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d305      	bcc.n	800550a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	429a      	cmp	r2, r3
 8005508:	d903      	bls.n	8005512 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005510:	e0e8      	b.n	80056e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	2200      	movs	r2, #0
 8005516:	461c      	mov	r4, r3
 8005518:	4615      	mov	r5, r2
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	022b      	lsls	r3, r5, #8
 8005524:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005528:	0222      	lsls	r2, r4, #8
 800552a:	68f9      	ldr	r1, [r7, #12]
 800552c:	6849      	ldr	r1, [r1, #4]
 800552e:	0849      	lsrs	r1, r1, #1
 8005530:	2000      	movs	r0, #0
 8005532:	4688      	mov	r8, r1
 8005534:	4681      	mov	r9, r0
 8005536:	eb12 0a08 	adds.w	sl, r2, r8
 800553a:	eb43 0b09 	adc.w	fp, r3, r9
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800554c:	4650      	mov	r0, sl
 800554e:	4659      	mov	r1, fp
 8005550:	f7fa fe3a 	bl	80001c8 <__aeabi_uldivmod>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4613      	mov	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005562:	d308      	bcc.n	8005576 <UART_SetConfig+0x3de>
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800556a:	d204      	bcs.n	8005576 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	60da      	str	r2, [r3, #12]
 8005574:	e0b6      	b.n	80056e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800557c:	e0b2      	b.n	80056e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005586:	d15e      	bne.n	8005646 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005588:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800558c:	2b08      	cmp	r3, #8
 800558e:	d828      	bhi.n	80055e2 <UART_SetConfig+0x44a>
 8005590:	a201      	add	r2, pc, #4	@ (adr r2, 8005598 <UART_SetConfig+0x400>)
 8005592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005596:	bf00      	nop
 8005598:	080055bd 	.word	0x080055bd
 800559c:	080055c5 	.word	0x080055c5
 80055a0:	080055cd 	.word	0x080055cd
 80055a4:	080055e3 	.word	0x080055e3
 80055a8:	080055d3 	.word	0x080055d3
 80055ac:	080055e3 	.word	0x080055e3
 80055b0:	080055e3 	.word	0x080055e3
 80055b4:	080055e3 	.word	0x080055e3
 80055b8:	080055db 	.word	0x080055db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055bc:	f7fc ffbe 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 80055c0:	61f8      	str	r0, [r7, #28]
        break;
 80055c2:	e014      	b.n	80055ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055c4:	f7fc ffd0 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 80055c8:	61f8      	str	r0, [r7, #28]
        break;
 80055ca:	e010      	b.n	80055ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055cc:	4b4d      	ldr	r3, [pc, #308]	@ (8005704 <UART_SetConfig+0x56c>)
 80055ce:	61fb      	str	r3, [r7, #28]
        break;
 80055d0:	e00d      	b.n	80055ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055d2:	f7fc ff1b 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80055d6:	61f8      	str	r0, [r7, #28]
        break;
 80055d8:	e009      	b.n	80055ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055de:	61fb      	str	r3, [r7, #28]
        break;
 80055e0:	e005      	b.n	80055ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d077      	beq.n	80056e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	005a      	lsls	r2, r3, #1
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	085b      	lsrs	r3, r3, #1
 80055fe:	441a      	add	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b0f      	cmp	r3, #15
 800560e:	d916      	bls.n	800563e <UART_SetConfig+0x4a6>
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005616:	d212      	bcs.n	800563e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f023 030f 	bic.w	r3, r3, #15
 8005620:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	b29b      	uxth	r3, r3
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	b29a      	uxth	r2, r3
 800562e:	8afb      	ldrh	r3, [r7, #22]
 8005630:	4313      	orrs	r3, r2
 8005632:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	8afa      	ldrh	r2, [r7, #22]
 800563a:	60da      	str	r2, [r3, #12]
 800563c:	e052      	b.n	80056e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005644:	e04e      	b.n	80056e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005646:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800564a:	2b08      	cmp	r3, #8
 800564c:	d827      	bhi.n	800569e <UART_SetConfig+0x506>
 800564e:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <UART_SetConfig+0x4bc>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005679 	.word	0x08005679
 8005658:	08005681 	.word	0x08005681
 800565c:	08005689 	.word	0x08005689
 8005660:	0800569f 	.word	0x0800569f
 8005664:	0800568f 	.word	0x0800568f
 8005668:	0800569f 	.word	0x0800569f
 800566c:	0800569f 	.word	0x0800569f
 8005670:	0800569f 	.word	0x0800569f
 8005674:	08005697 	.word	0x08005697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005678:	f7fc ff60 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 800567c:	61f8      	str	r0, [r7, #28]
        break;
 800567e:	e014      	b.n	80056aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005680:	f7fc ff72 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 8005684:	61f8      	str	r0, [r7, #28]
        break;
 8005686:	e010      	b.n	80056aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005688:	4b1e      	ldr	r3, [pc, #120]	@ (8005704 <UART_SetConfig+0x56c>)
 800568a:	61fb      	str	r3, [r7, #28]
        break;
 800568c:	e00d      	b.n	80056aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568e:	f7fc febd 	bl	800240c <HAL_RCC_GetSysClockFreq>
 8005692:	61f8      	str	r0, [r7, #28]
        break;
 8005694:	e009      	b.n	80056aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800569a:	61fb      	str	r3, [r7, #28]
        break;
 800569c:	e005      	b.n	80056aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056a8:	bf00      	nop
    }

    if (pclk != 0U)
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d019      	beq.n	80056e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	085a      	lsrs	r2, r3, #1
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	441a      	add	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b0f      	cmp	r3, #15
 80056c8:	d909      	bls.n	80056de <UART_SetConfig+0x546>
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d0:	d205      	bcs.n	80056de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60da      	str	r2, [r3, #12]
 80056dc:	e002      	b.n	80056e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80056f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3728      	adds	r7, #40	@ 0x28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056fe:	bf00      	nop
 8005700:	40008000 	.word	0x40008000
 8005704:	00f42400 	.word	0x00f42400

08005708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01a      	beq.n	800581e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005806:	d10a      	bne.n	800581e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	605a      	str	r2, [r3, #4]
  }
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b098      	sub	sp, #96	@ 0x60
 8005850:	af02      	add	r7, sp, #8
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800585c:	f7fb fbd6 	bl	800100c <HAL_GetTick>
 8005860:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b08      	cmp	r3, #8
 800586e:	d12e      	bne.n	80058ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005878:	2200      	movs	r2, #0
 800587a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f88c 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d021      	beq.n	80058ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800589e:	653b      	str	r3, [r7, #80]	@ 0x50
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e6      	bne.n	800588a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e062      	b.n	8005994 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d149      	bne.n	8005970 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058e4:	2200      	movs	r2, #0
 80058e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f856 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d03c      	beq.n	8005970 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	623b      	str	r3, [r7, #32]
   return(result);
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800590a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005914:	633b      	str	r3, [r7, #48]	@ 0x30
 8005916:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800591a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e6      	bne.n	80058f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3308      	adds	r3, #8
 800592e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	60fb      	str	r3, [r7, #12]
   return(result);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3308      	adds	r3, #8
 8005946:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005948:	61fa      	str	r2, [r7, #28]
 800594a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	69b9      	ldr	r1, [r7, #24]
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	617b      	str	r3, [r7, #20]
   return(result);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e5      	bne.n	8005928 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2220      	movs	r2, #32
 8005960:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e011      	b.n	8005994 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3758      	adds	r7, #88	@ 0x58
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ac:	e049      	b.n	8005a42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d045      	beq.n	8005a42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b6:	f7fb fb29 	bl	800100c <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <UART_WaitOnFlagUntilTimeout+0x30>
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e048      	b.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d031      	beq.n	8005a42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d110      	bne.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2208      	movs	r2, #8
 80059f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f838 	bl	8005a6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2208      	movs	r2, #8
 80059fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e029      	b.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a1c:	d111      	bne.n	8005a42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f81e 	bl	8005a6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e00f      	b.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69da      	ldr	r2, [r3, #28]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	bf0c      	ite	eq
 8005a52:	2301      	moveq	r3, #1
 8005a54:	2300      	movne	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d0a6      	beq.n	80059ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b095      	sub	sp, #84	@ 0x54
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a90:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e6      	bne.n	8005a72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ac4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e5      	bne.n	8005aa4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d118      	bne.n	8005b12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f023 0310 	bic.w	r3, r3, #16
 8005af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6979      	ldr	r1, [r7, #20]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e6      	bne.n	8005ae0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b26:	bf00      	nop
 8005b28:	3754      	adds	r7, #84	@ 0x54
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <memset>:
 8005b32:	4402      	add	r2, r0
 8005b34:	4603      	mov	r3, r0
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d100      	bne.n	8005b3c <memset+0xa>
 8005b3a:	4770      	bx	lr
 8005b3c:	f803 1b01 	strb.w	r1, [r3], #1
 8005b40:	e7f9      	b.n	8005b36 <memset+0x4>
	...

08005b44 <__libc_init_array>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	4d0d      	ldr	r5, [pc, #52]	@ (8005b7c <__libc_init_array+0x38>)
 8005b48:	4c0d      	ldr	r4, [pc, #52]	@ (8005b80 <__libc_init_array+0x3c>)
 8005b4a:	1b64      	subs	r4, r4, r5
 8005b4c:	10a4      	asrs	r4, r4, #2
 8005b4e:	2600      	movs	r6, #0
 8005b50:	42a6      	cmp	r6, r4
 8005b52:	d109      	bne.n	8005b68 <__libc_init_array+0x24>
 8005b54:	4d0b      	ldr	r5, [pc, #44]	@ (8005b84 <__libc_init_array+0x40>)
 8005b56:	4c0c      	ldr	r4, [pc, #48]	@ (8005b88 <__libc_init_array+0x44>)
 8005b58:	f000 f818 	bl	8005b8c <_init>
 8005b5c:	1b64      	subs	r4, r4, r5
 8005b5e:	10a4      	asrs	r4, r4, #2
 8005b60:	2600      	movs	r6, #0
 8005b62:	42a6      	cmp	r6, r4
 8005b64:	d105      	bne.n	8005b72 <__libc_init_array+0x2e>
 8005b66:	bd70      	pop	{r4, r5, r6, pc}
 8005b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b6c:	4798      	blx	r3
 8005b6e:	3601      	adds	r6, #1
 8005b70:	e7ee      	b.n	8005b50 <__libc_init_array+0xc>
 8005b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b76:	4798      	blx	r3
 8005b78:	3601      	adds	r6, #1
 8005b7a:	e7f2      	b.n	8005b62 <__libc_init_array+0x1e>
 8005b7c:	08005bf4 	.word	0x08005bf4
 8005b80:	08005bf4 	.word	0x08005bf4
 8005b84:	08005bf4 	.word	0x08005bf4
 8005b88:	08005bf8 	.word	0x08005bf8

08005b8c <_init>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr

08005b98 <_fini>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	bf00      	nop
 8005b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9e:	bc08      	pop	{r3}
 8005ba0:	469e      	mov	lr, r3
 8005ba2:	4770      	bx	lr
